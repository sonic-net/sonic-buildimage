{% set prefix = DEFAULT_CONTAINER_REGISTRY %}
FROM {{ prefix }}ubuntu:24.04

{% set legacy = LEGACY_SONIC_MGMT_DOCKER %}

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y apt-transport-https \
                                         apt-utils \
                                         autoconf \
                                         build-essential \
                                         ca-certificates \
                                         cmake \
                                         conserver-client \
                                         curl \
                                         default-jre \
                                         git \
                                         gnupg \
                                         gnupg-agent \
                                         iproute2 \
                                         iputils-ping \
                                         isc-dhcp-client \
                                         libffi-dev \
                                         libprotobuf-dev \
                                         libprotoc-dev \
                                         libgrpc++-dev \
                                         libssl-dev \
                                         libxml2 \
                                         libtool \
                                         libxslt1-dev \
                                         lsb-release \
                                         jq \
                                         openssh-server \
                                         protobuf-compiler \
                                         protobuf-compiler-grpc \
                                         psmisc \
                                         python3 \
                                         python3-dev \
                                         python3-pip \
                                         python3-venv \
                                         python3-setuptools \
                                         python3-wheel \
                                         python3-cffi \
                                         python3-protobuf \
                                         pkg-config \
                                         rsyslog \
                                         shellcheck \
                                         snmp \
                                         software-properties-common \
                                         sshpass \
                                         sudo \
                                         tcpdump \
                                         telnet \
                                         vim \
                                         bats

RUN python3 -m pip install --upgrade pip setuptools wheel --break-system-packages --ignore-installed


RUN python3 -m pip install grpcio grpcio-tools --break-system-packages
RUN python3 -m pip install --break-system-packages --verbose \
                 aiohttp \
                 allure-pytest \
                 ansible \
                 azure-storage-blob \
                 azure-kusto-data \
                 azure-kusto-ingest \
                 defusedxml \
                 celery[redis] \
                 cffi \
                 contextlib2 \
                 cryptography \
                 ctypesgen \
                 dpkt \
                 dpugen \
                 future \
                 gitpython \
                 ipaddr \
                 ipython \
                 ixload \
                 ixnetwork-restpy \
                 ixnetwork-open-traffic-generator \
                 jinja2 \
                 jsonpatch \
                 lxml \
                 markupsafe \
                 mock \
                 msrest \
                 natsort \
                 ncclient \
                 netaddr \
                 netmiko \
                 pandas \
                 paramiko \
                 passlib \
                 pexpect \
                 prettytable \
                 psutil \
                 ptf \
                 pyasn1 \
                 pycryptodome \
                 pyfiglet \
                 pylint \
                 pyro4 \
                 pysnmp==4.4.12 \
                 pysubnettree \
                 pytest-ansible==4.0.0 \
                 pytest-html \
                 pytest-repeat \
                 pytest-xdist \
                 python-dateutil \
                 pytest \
                 pytest-stress \
                 PyYAML \
                 redis \
                 requests \
                 retry \
                 rpyc \
                 scandir \
                 scapy \
                 setuptools-rust \
                 six \
                 snappi \
                 snappi-convergence \
                 snappi-ixnetwork \
                 tabulate \
                 textfsm \
                 thrift \
                 virtualenv \
                 debugpy

RUN wget https://github.com/nanomsg/nanomsg/archive/1.2.tar.gz \
    && tar xvfz 1.2.tar.gz \
    && cd nanomsg-1.2      \
    && mkdir -p build      \
    && cd build            \
    && cmake ..            \
    && make install        \
    && ldconfig            \
    && cd ../..            \
    && rm -fr nanomsg-1.2  \
    && rm -f 1.2.tar.gz

RUN python3 -m pip install nnpy --break-system-packages

# Install docker-ce-cli
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -                                        \
    && add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"    \
    && apt-get update                                                                                              \
    && apt-get install -y docker-ce-cli

# Install Azure CLI, following https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-linux?pivots=apt#option-2-step-by-step-installation-instructions
RUN mkdir -p /etc/apt/keyrings \
    && curl -sLS https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | tee /etc/apt/keyrings/microsoft.gpg > /dev/null \
    && chmod go+r /etc/apt/keyrings/microsoft.gpg \
    && echo "deb [arch=`dpkg --print-architecture` signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ `lsb_release -cs` main" | tee /etc/apt/sources.list.d/azure-cli.list \
    && apt-get update && apt-get install -y azure-cli

## Copy and install sonic-mgmt docker dependencies
COPY debs/sonic-device-data_*.deb debs/libdashapi_*.deb debs/

RUN dpkg -i debs/sonic-device-data_*.deb debs/libdashapi_*.deb

# Install dash-pipeline-utils
COPY ["files/github_get.py", "/usr/bin"]
RUN cd /tmp \
    && python3 /usr/bin/github_get.py https://api.github.com/repos/sonic-net/DASH/contents/dash-pipeline/utils \
    && cd utils \
    && python3 setup.py bdist_wheel \
    && python3 -m pip install --break-system-packages dist/dash_pipeline_utils*.whl \
    && cd / \
    && rm -rf /tmp/utils

RUN mkdir /var/run/sshd
EXPOSE 22

# Add user
ARG user
ARG uid
ARG guid
ARG hostname

ENV BUILD_HOSTNAME $hostname
ENV USER $user
ENV CC=gcc CPP=cpp CXX=c++ LDSHARED="gcc -pthread -shared" PYMSSQL_BUILD_WITH_BUNDLED_FREETDS=1

RUN groupadd -f -r -g $guid g$user

RUN useradd $user -l -u $uid -g $guid -d /var/$user -m -s /bin/bash

COPY sonic-jenkins.pub /var/$user/.ssh/authorized_keys2

RUN echo "Host *\n\tStrictHostKeyChecking no\n" > /var/$user/.ssh/config
RUN chown $user /var/$user/.ssh -R
RUN chmod go= /var/$user/.ssh -R

# Add user to sudoers
RUN echo "$user ALL=(ALL) NOPASSWD:ALL" >>/etc/sudoers

# There is a non-root user ubuntu in ubuntu24.04, whose uid is also 1000
# To avoid conflict, we will delete this default user
RUN userdel ubuntu

USER $user
WORKDIR /var/$user

# Add az symlink for backwards compatibility
RUN mkdir bin && ln -s /usr/bin/az bin/az

USER root
WORKDIR /azp
COPY start.sh \
     0001-Fix-getattr-AttributeError-in-multi-thread-scenario.patch \
     0002-extend-dataplane-poll-method-to-support-multi-ptf-nn.patch \
     0003-add-dataplane-mask-counters-to-avoid-dataplane-noise.patch \
     ./
RUN chmod +x start.sh \
    && ln -sf /usr/bin/python3 /usr/bin/python \
    && ln -sf `which pip3` /usr/bin/pip \
    && ln -sf `which pip3` /usr/local/sbin/pip \
    && patch -u -b /usr/local/lib/python3.12/dist-packages/ptf/dataplane.py  -i /azp/0002-extend-dataplane-poll-method-to-support-multi-ptf-nn.patch \
    && patch -u -b /usr/local/lib/python3.12/dist-packages/ptf/dataplane.py  -i /azp/0003-add-dataplane-mask-counters-to-avoid-dataplane-noise.patch \
    && patch -u -b /usr/local/lib/python3.12/dist-packages/ansible/plugins/loader.py -i /azp/0001-Fix-getattr-AttributeError-in-multi-thread-scenario.patch

USER $user
WORKDIR /var/$user
