{% set prefix = DEFAULT_CONTAINER_REGISTRY %}
FROM {{ prefix }}ubuntu:24.04

ENV DEBIAN_FRONTEND=noninteractive

RUN sed -i '2i if [ "$EUID" -ne 0 ]; then\n  exec sudo "$0" "$@"\nfi\n' /usr/local/share/buildinfo/scripts/post_run_buildinfo
RUN sed -i '2i if [ "$EUID" -ne 0 ]; then\n  exec sudo "$0" "$@"\nfi\n' /usr/local/share/buildinfo/scripts/post_run_cleanup

RUN apt-get update && apt-get install -y \
    apt-transport-https \
    apt-utils \
    bats \
    build-essential \
    ca-certificates \
    cmake \
    conserver-client \
    curl \
    default-jre \
    git \
    gnupg \
    gnupg-agent \
    iproute2 \
    iputils-ping \
    isc-dhcp-client \
    libffi-dev \
    libssl-dev \
    libxml2 \
    libxslt1-dev \
    lsb-release \
    jq \
    openssh-server \
    psmisc \
    python3 \
    python3-dev \
    python3-pip \
    python3-venv \
    python-is-python3 \
    rsyslog \
    shellcheck \
    snmp \
    software-properties-common \
    sshpass \
    sudo \
    tcpdump \
    telnet \
    vim

RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

RUN pip install --no-cache-dir \
    aiohttp \
    allure-pytest \
    ansible \
    azure-storage-blob \
    azure-kusto-data \
    azure-kusto-ingest \
    defusedxml \
    celery[redis] \
    cffi \
    contextlib2 \
    cryptography \
    ctypesgen \
    debugpy \
    dpkt \
    dpugen \
    future \
    gitpython \
    ipython \
    ixload \
    ixnetwork-restpy \
    ixnetwork-open-traffic-generator \
    jinja2 \
    jsonpatch \
    lxml \
    markupsafe \
    mock \
    msrest \
    natsort \
    ncclient \
    netaddr \
    netmiko \
    pandas \
    paramiko \
    passlib \
    pexpect \
    prettytable \
    psutil \
    ptf \
    pyasn1 \
    pycryptodome \
    pyfiglet \
    pylint \
    pyro4 \
    pysnmp \
    pysubnettree \
    pytest \
    pytest-ansible \
    pytest-html \
    pytest-repeat \
    pytest-stress \
    pytest-xdist \
    python-dateutil \
    PyYAML \
    redis \
    requests \
    retry \
    rpyc \
    scandir \
    scapy \
    setuptools-rust \
    six \
    snappi \
    snappi-ixnetwork \
    tabulate \
    textfsm \
    thrift \
    && wget https://github.com/nanomsg/nanomsg/archive/refs/tags/1.2.1.tar.gz \
    && tar xvfz 1.2.1.tar.gz \
    && cd nanomsg-1.2.1      \
    && mkdir -p build      \
    && cd build            \
    && cmake ..            \
    && make install        \
    && ldconfig            \
    && cd ../..            \
    && rm -fr nanomsg-1.2.1  \
    && rm -f 1.2.1.tar.gz  \
    && python3 -m pip install --no-cache-dir nnpy

# Install docker-ce-cli, azure-cli
RUN install -m 0755 -d /etc/apt/keyrings \
    && curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc \
    && chmod a+r /etc/apt/keyrings/docker.asc \
    && echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
        tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt-get update  \
    && apt-get install -y docker-ce-cli \
    && curl -sL https://aka.ms/InstallAzureCLIDeb | bash

# Remove old python protobuf package if existing
# RUN python3 -m pip show protobuf && python3 -m pip uninstall -y protobuf
# Install protobuf 3.21.12 which is from https://deb.debian.org/debian/pool/main/p/protobuf/protobuf_3.21.12-3.dsc
# RUN mkdir -p /tmp/protobuf \
#     && cd /tmp/protobuf \
#     && wget https://packages.trafficmanager.net/public/ubuntu/20.04/libprotobuf-dev_3.21.12-3_amd64.deb \
#     && wget https://packages.trafficmanager.net/public/ubuntu/20.04/libprotobuf-lite32_3.21.12-3_amd64.deb \
#     && wget https://packages.trafficmanager.net/public/ubuntu/20.04/libprotobuf32_3.21.12-3_amd64.deb \
#     && wget https://packages.trafficmanager.net/public/ubuntu/20.04/libprotoc-dev_3.21.12-3_amd64.deb \
#     && wget https://packages.trafficmanager.net/public/ubuntu/20.04/libprotoc32_3.21.12-3_amd64.deb \
#     && wget https://packages.trafficmanager.net/public/ubuntu/20.04/protobuf-compiler_3.21.12-3_amd64.deb \
#     && wget https://packages.trafficmanager.net/public/ubuntu/20.04/python3-protobuf_3.21.12-3_amd64.deb \
#     && dpkg -i *.deb \
#     && rm -rf /tmp/protobuf

## Copy and install sonic-mgmt docker dependencies
COPY debs/sonic-device-data_*.deb debs/libdashapi_*.deb debs/

RUN dpkg -i debs/sonic-device-data_*.deb

# Install dash-pipeline-utils
COPY ["files/github_get.py", "/usr/bin"]
RUN cd /tmp \
    && python3 /usr/bin/github_get.py https://api.github.com/repos/sonic-net/DASH/contents/dash-pipeline/utils \
    && cd utils \
    && python3 setup.py bdist_wheel \
    && python3 -m pip install dist/dash_pipeline_utils*.whl \
    && cd / \
    && rm -rf /tmp/utils

# Apply patches to ansible and ptf
COPY \
    0001-Fix-getattr-AttributeError-in-multi-thread-scenario.patch \
    0002-extend-dataplane-poll-method-to-support-multi-ptf-nn.patch \
    0003-add-dataplane-mask-counters-to-avoid-dataplane-noise.patch \
    /tmp/
RUN patch -u -b /opt/venv/lib/python3.12/site-packages/ansible/plugins/loader.py -i /tmp/0001-Fix-getattr-AttributeError-in-multi-thread-scenario.patch \
    && patch -u -b /opt/venv/lib/python3.12/site-packages/ptf/dataplane.py  -i /tmp/0002-extend-dataplane-poll-method-to-support-multi-ptf-nn.patch \
    && patch -u -b /opt/venv/lib/python3.12/site-packages/ptf/dataplane.py  -i /tmp/0003-add-dataplane-mask-counters-to-avoid-dataplane-noise.patch

RUN mkdir /var/run/sshd
EXPOSE 22

# Make it ready to be used as azure pipeline agent
COPY start.sh /azp/
RUN chmod +x /azp/start.sh

# Add user
ENV USER sonicuser
ENV CC=gcc CPP=cpp CXX=c++ LDSHARED="gcc -pthread -shared" PYMSSQL_BUILD_WITH_BUNDLED_FREETDS=1

RUN groupadd -f -r g$USER \
    && useradd $USER -l -g g$USER -d /home/$USER -m -s /bin/bash \
    && mkdir -p /home/$USER/.ssh \
    && echo "Host *\n\tStrictHostKeyChecking no\n" > /home/$USER/.ssh/config \
    && chown $USER /home/$USER/.ssh -R \
    && chmod go= /home/$USER/.ssh -R \
    && echo "$USER ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/$USER \
    && chmod 0440 /etc/sudoers.d/$USER \
    && usermod -aG sudo "$USER"

USER $USER
WORKDIR /home/$USER
