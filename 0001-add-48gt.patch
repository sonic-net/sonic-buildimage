From 95ebc426a731ec805685ca9d6880330f6a5b0ffd Mon Sep 17 00:00:00 2001
From: philo <philo@micasnetworks.com>
Date: Thu, 11 Sep 2025 14:52:45 +0800
Subject: [PATCH] add 48gt

---
 .../M2-W6510-48GT4V/port_config.ini           |  53 +
 .../M2-W6510-48GT4V/sai.profile               |   1 +
 ...td3-m2-w6510-48gt4v-48x1G+4x25G.config.bcm | 251 +++++
 .../common_config_support                     |   0
 .../cust_fru.py                               | 135 +++
 .../custom_led.bin                            | Bin 0 -> 228 bytes
 .../default_sku                               |   1 +
 .../x86_64-micas_m2-w6510-48gt4v-r0/dev.xml   | 190 ++++
 .../dev_exhaust.xml                           | 190 ++++
 .../x86_64-micas_m2-w6510-48gt4v-r0/fru.py    | 961 ++++++++++++++++++
 .../installer.conf                            |   5 +
 .../led_proc_init.soc                         |   2 +
 .../media_settings.json                       |  56 +
 .../monitor.py                                | 457 +++++++++
 .../x86_64-micas_m2-w6510-48gt4v-r0/pcie.yaml | 166 +++
 .../platform.json                             | 195 ++++
 .../platform_asic                             |   1 +
 .../platform_components.json                  |  13 +
 .../platform_env.conf                         |   1 +
 .../plugins/sfputil.py                        | 249 +++++
 .../plugins/ssd_util.py                       | 112 ++
 .../pmon_daemon_control.json                  |   3 +
 .../postinit_cmd_file.soc                     |  29 +
 .../preinit_cmd_file.soc                      |   2 +
 .../system_health_monitoring_config.json      |  11 +
 platform/broadcom/one-image.mk                |   3 +-
 platform/broadcom/platform-modules-micas.mk   |   8 +
 .../debian/control                            |   6 +-
 ...form-modules-micas-m2-w6510-48gt4v.install |   1 +
 ...orm-modules-micas-m2-w6510-48gt4v.postinst |  10 +
 .../debian/rule.mk                            |   1 +
 .../m2-w6510-48gt4v/Makefile                  |  28 +
 .../x86_64_micas_m2_w6510_48gt4v_r0_config.py | 751 ++++++++++++++
 ...64_micas_m2_w6510_48gt4v_r0_port_config.py |  12 +
 .../x86_64_micas_m2_w6510_48gt4v_r0_device.py | 607 +++++++++++
 ...micas_m2_w6510_48gt4v_r0_exhaust_device.py | 607 +++++++++++
 ...icas_m2_w6510_48gt4v_r0_exhaust_monitor.py | 141 +++
 ...x86_64_micas_m2_w6510_48gt4v_r0_monitor.py | 141 +++
 .../m2-w6510-48gt4v/modules/driver/Makefile   |  10 +
 .../modules/driver/wb_i2c_dev_device.c        | 145 +++
 .../driver/wb_i2c_mux_pca954x_device.c        | 146 +++
 .../modules/driver/wb_io_dev_device.c         | 138 +++
 .../modules/driver/wb_lpc_drv_device.c        | 150 +++
 .../modules/driver/wb_wdt_device.c            | 130 +++
 .../plat_sysfs_cfg/WB_PLAT_CPLD.cfg           |  40 +
 .../plat_sysfs_cfg/WB_PLAT_FAN.cfg            | 112 ++
 .../plat_sysfs_cfg/WB_PLAT_PSU.cfg            |  64 ++
 .../plat_sysfs_cfg/WB_PLAT_SFF.cfg            |  54 +
 .../plat_sysfs_cfg/cfg_file_name              |   4 +
 .../service/set-eth-mac.service               |  14 +
 .../m2-w6510-48gt4v/setup.py                  |  39 +
 51 files changed, 6444 insertions(+), 2 deletions(-)
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/M2-W6510-48GT4V/port_config.ini
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/M2-W6510-48GT4V/sai.profile
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/M2-W6510-48GT4V/td3-m2-w6510-48gt4v-48x1G+4x25G.config.bcm
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/common_config_support
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/cust_fru.py
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/custom_led.bin
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/default_sku
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/dev.xml
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/dev_exhaust.xml
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/fru.py
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/installer.conf
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/led_proc_init.soc
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/media_settings.json
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/monitor.py
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/pcie.yaml
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform.json
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform_asic
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform_components.json
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform_env.conf
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/plugins/sfputil.py
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/plugins/ssd_util.py
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/pmon_daemon_control.json
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/postinit_cmd_file.soc
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/preinit_cmd_file.soc
 create mode 100644 device/micas/x86_64-micas_m2-w6510-48gt4v-r0/system_health_monitoring_config.json
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/debian/platform-modules-micas-m2-w6510-48gt4v.install
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/debian/platform-modules-micas-m2-w6510-48gt4v.postinst
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/Makefile
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/config/x86_64_micas_m2_w6510_48gt4v_r0_config.py
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/config/x86_64_micas_m2_w6510_48gt4v_r0_port_config.py
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_device.py
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_exhaust_device.py
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_exhaust_monitor.py
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_monitor.py
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/Makefile
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_i2c_dev_device.c
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_i2c_mux_pca954x_device.c
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_io_dev_device.c
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_lpc_drv_device.c
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_wdt_device.c
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_CPLD.cfg
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_FAN.cfg
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_PSU.cfg
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_SFF.cfg
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/cfg_file_name
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/service/set-eth-mac.service
 create mode 100644 platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/setup.py

diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/M2-W6510-48GT4V/port_config.ini b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/M2-W6510-48GT4V/port_config.ini
new file mode 100644
index 000000000..475104931
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/M2-W6510-48GT4V/port_config.ini
@@ -0,0 +1,53 @@
+# name          lanes                alias                     index      speed        autoneg        fec
+Ethernet1       26                  gigabitE0/1                 0          1000        on             none
+Ethernet2       25                  gigabitE0/2                 1          1000        on             none
+Ethernet3       28                  gigabitE0/3                 2          1000        on             none
+Ethernet4       27                  gigabitE0/4                 3          1000        on             none
+Ethernet5       30                  gigabitE0/5                 4          1000        on             none
+Ethernet6       29                  gigabitE0/6                 5          1000        on             none
+Ethernet7       32                  gigabitE0/7                 6          1000        on             none
+Ethernet8       31                  gigabitE0/8                 7          1000        on             none
+Ethernet9       34                  gigabitE0/9                 8          1000        on             none
+Ethernet10      33                  gigabitE0/10                9          1000        on             none
+Ethernet11      36                  gigabitE0/11                10         1000        on             none
+Ethernet12      35                  gigabitE0/12                11         1000        on             none
+Ethernet13      38                  gigabitE0/13                12         1000        on             none
+Ethernet14      37                  gigabitE0/14                13         1000        on             none
+Ethernet15      40                  gigabitE0/15                14         1000        on             none
+Ethernet16      39                  gigabitE0/16                15         1000        on             none
+Ethernet17      42                  gigabitE0/17                16         1000        on             none
+Ethernet18      41                  gigabitE0/18                17         1000        on             none
+Ethernet19      44                  gigabitE0/19                18         1000        on             none
+Ethernet20      43                  gigabitE0/20                19         1000        on             none
+Ethernet21      50                  gigabitE0/21                20         1000        on             none
+Ethernet22      49                  gigabitE0/22                21         1000        on             none
+Ethernet23      52                  gigabitE0/23                22         1000        on             none
+Ethernet24      51                  gigabitE0/24                23         1000        on             none
+Ethernet25      1                   gigabitE0/25                24         1000        on             none
+Ethernet26      2                   gigabitE0/26                25         1000        on             none
+Ethernet27      3                   gigabitE0/27                26         1000        on             none
+Ethernet28      4                   gigabitE0/28                27         1000        on             none
+Ethernet29      5                   gigabitE0/29                28         1000        on             none
+Ethernet30      6                   gigabitE0/30                29         1000        on             none
+Ethernet31      7                   gigabitE0/31                30         1000        on             none
+Ethernet32      8                   gigabitE0/32                31         1000        on             none
+Ethernet33      9                   gigabitE0/33                32         1000        on             none
+Ethernet34      10                  gigabitE0/34                33         1000        on             none
+Ethernet35      11                  gigabitE0/35                34         1000        on             none
+Ethernet36      12                  gigabitE0/36                35         1000        on             none
+Ethernet37      13                  gigabitE0/37                36         1000        on             none
+Ethernet38      14                  gigabitE0/38                37         1000        on             none
+Ethernet39      15                  gigabitE0/39                38         1000        on             none
+Ethernet40      16                  gigabitE0/40                39         1000        on             none
+Ethernet41      17                  gigabitE0/41                40         1000        on             none
+Ethernet42      18                  gigabitE0/42                41         1000        on             none
+Ethernet43      19                  gigabitE0/43                42         1000        on             none
+Ethernet44      20                  gigabitE0/44                43         1000        on             none
+Ethernet45      21                  gigabitE0/45                44         1000        on             none
+Ethernet46      22                  gigabitE0/46                45         1000        on             none
+Ethernet47      23                  gigabitE0/47                46         1000        on             none
+Ethernet48      24                  gigabitE0/48                47         1000        on             none
+Ethernet49      58               twentyfiveGigE0/1              48         25000       off            none
+Ethernet50      57               twentyfiveGigE0/2              49         25000       off            none
+Ethernet51      60               twentyfiveGigE0/3              50         25000       off            none
+Ethernet52      59               twentyfiveGigE0/4              51         25000       off            none
\ No newline at end of file
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/M2-W6510-48GT4V/sai.profile b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/M2-W6510-48GT4V/sai.profile
new file mode 100644
index 000000000..158552500
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/M2-W6510-48GT4V/sai.profile
@@ -0,0 +1 @@
+SAI_INIT_CONFIG_FILE=/usr/share/sonic/hwsku/td3-m2-w6510-48gt4v-48x1G+4x25G.config.bcm
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/M2-W6510-48GT4V/td3-m2-w6510-48gt4v-48x1G+4x25G.config.bcm b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/M2-W6510-48GT4V/td3-m2-w6510-48gt4v-48x1G+4x25G.config.bcm
new file mode 100644
index 000000000..9423645cf
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/M2-W6510-48GT4V/td3-m2-w6510-48gt4v-48x1G+4x25G.config.bcm
@@ -0,0 +1,251 @@
+sai_load_hw_config=/usr/share/sonic/platform/cancun/sdk6.5.24/
+sai_postinit_cmd_file=/usr/share/sonic/platform/postinit_cmd_file.soc
+sai_preinit_cmd_file=/usr/share/sonic/platform/preinit_cmd_file.soc 
+
+#Basic configuration
+cache_coherency_check=0
+core_clock_to_pm_clock_factor=1
+#core_clock_frequency=495
+core_clock_frequency=445
+flowtracker_ipfix_observation_domain_id=1
+flowtracker_num_unique_user_entry_keys=10
+ifp_inports_support_enable=1
+ipv6_lpm_128b_enable=0x1
+l2delete_chunks=4096
+l2_mem_entries=32768
+#L2MODE_POLL for L2X thread
+l2xmsg_mode=0
+l3_alpm_enable=2
+l3_max_ecmp_mode=1
+l3_mem_entries=16384
+os=unix
+port_flex_enable=1
+
+#fix  No resources for operation
+stable_size=200000000
+scache_filename=/var/warmboot/wbscache
+stable_location=3
+warmboot_knet_shutdown_mode=1
+
+#RDMA
+sai_pfc_defaults_disable=1
+sai_optimized_mmu=1
+
+#ACL wb count
+ctr_evict_enable=0
+
+#tcam optimization for svi
+sai_nbr_bcast_ifp_optimized=2
+svi_my_station_optimization=1
+
+#support rif stats
+sai_stats_support_mask=0x1
+
+pbmp_xport_xe=0x001FFFFFFFFFFFFE
+
+#GPORT0
+portmap_1.0=1:1
+phy_port_primary_and_offset_1=0x0100
+portmap_2.0=2:1
+phy_port_primary_and_offset_2=0x0101
+portmap_3.0=3:1
+phy_port_primary_and_offset_3=0x0102
+portmap_4.0=4:1
+phy_port_primary_and_offset_4=0x0103
+
+portmap_5.0=5:1
+phy_port_primary_and_offset_5=0x0500
+portmap_6.0=6:1
+phy_port_primary_and_offset_6=0x0501
+portmap_7.0=7:1
+phy_port_primary_and_offset_7=0x0502
+portmap_8.0=8:1
+phy_port_primary_and_offset_8=0x0503
+
+#GPORT1
+portmap_9.0=9:1
+phy_port_primary_and_offset_9=0x0900
+portmap_10.0=10:1
+phy_port_primary_and_offset_10=0x0901
+portmap_11.0=11:1
+phy_port_primary_and_offset_11=0x0902
+portmap_12.0=12:1
+phy_port_primary_and_offset_12=0x0903
+portmap_13.0=13:1
+phy_port_primary_and_offset_13=0x0d00
+portmap_14.0=14:1
+phy_port_primary_and_offset_14=0x0d01
+portmap_15.0=15:1
+phy_port_primary_and_offset_15=0x0d02
+portmap_16.0=16:1
+phy_port_primary_and_offset_16=0x0d03
+
+#GPORT2
+portmap_17.0=17:1
+phy_port_primary_and_offset_17=0x1100
+portmap_18.0=18:1
+phy_port_primary_and_offset_18=0x1101
+portmap_19.0=19:1
+phy_port_primary_and_offset_19=0x1102
+portmap_20.0=20:1
+phy_port_primary_and_offset_20=0x1103
+portmap_21.0=21:1
+phy_port_primary_and_offset_21=0x1500
+portmap_22.0=22:1
+phy_port_primary_and_offset_22=0x1501
+portmap_23.0=23:1
+phy_port_primary_and_offset_23=0x1502
+portmap_24.0=24:1
+phy_port_primary_and_offset_24=0x1503
+
+#PM4x10Q0
+
+port_phy_addr_25=0x21
+port_phy_addr_26=0x22
+port_phy_addr_27=0x23
+port_phy_addr_28=0x24
+port_phy_addr_29=0x25
+port_phy_addr_30=0x26
+port_phy_addr_31=0x27
+port_phy_addr_32=0x28
+
+port_phy_addr_33=0x2a
+port_phy_addr_34=0x2b
+port_phy_addr_35=0x2c
+port_phy_addr_36=0x2d
+port_phy_addr_37=0x2e
+port_phy_addr_38=0x2f
+port_phy_addr_39=0x30
+port_phy_addr_40=0x31
+
+port_phy_addr_41=0x33
+port_phy_addr_42=0x34
+port_phy_addr_43=0x35
+port_phy_addr_44=0x36
+port_phy_addr_45=0x37
+port_phy_addr_46=0x38
+port_phy_addr_47=0x39
+port_phy_addr_48=0x3a
+
+phy_port_primary_and_offset_25=0x0100
+phy_port_primary_and_offset_26=0x0101
+phy_port_primary_and_offset_27=0x0102
+phy_port_primary_and_offset_28=0x0103
+phy_port_primary_and_offset_29=0x0104
+phy_port_primary_and_offset_30=0x0105
+phy_port_primary_and_offset_31=0x0106
+phy_port_primary_and_offset_32=0x0107
+
+phy_port_primary_and_offset_33=0x0a00
+phy_port_primary_and_offset_34=0x0a01
+phy_port_primary_and_offset_35=0x0a02
+phy_port_primary_and_offset_36=0x0a03
+phy_port_primary_and_offset_37=0x0a04
+phy_port_primary_and_offset_38=0x0a05
+phy_port_primary_and_offset_39=0x0a06
+phy_port_primary_and_offset_40=0x0a07
+
+phy_port_primary_and_offset_41=0x1300
+phy_port_primary_and_offset_42=0x1301
+phy_port_primary_and_offset_43=0x1302
+phy_port_primary_and_offset_44=0x1303
+phy_port_primary_and_offset_45=0x1304
+phy_port_primary_and_offset_46=0x1305
+phy_port_primary_and_offset_47=0x1306
+phy_port_primary_and_offset_48=0x1307
+
+
+port_gmii_mode{25}=1
+portmap_25.0=25:1
+portmap_26.0=26:1
+portmap_27.0=27:1
+portmap_28.0=28:1
+portmap_29.0=29:1
+portmap_30.0=30:1
+portmap_31.0=31:1
+portmap_32.0=32:1
+portmap_33.0=33:1
+portmap_34.0=34:1
+portmap_35.0=35:1
+portmap_36.0=36:1
+portmap_37.0=37:1
+portmap_38.0=38:1
+portmap_39.0=39:1
+portmap_40.0=40:1
+
+#PM4x10Q1
+port_gmii_mode{41}=1
+portmap_41.0=41:1
+portmap_42.0=42:1
+portmap_43.0=43:1
+portmap_44.0=44:1
+portmap_45.0=49:1
+portmap_46.0=50:1
+portmap_47.0=51:1
+portmap_48.0=52:1
+
+#PM4x25
+portmap_49.0=57:25
+portmap_50.0=58:25
+portmap_51.0=59:25
+portmap_52.0=60:25
+
+#Gport0-5 gt
+dport_map_port_1=25
+dport_map_port_2=26
+dport_map_port_3=27
+dport_map_port_4=28
+dport_map_port_5=29
+dport_map_port_6=30
+dport_map_port_7=31
+dport_map_port_8=32
+dport_map_port_9=33
+dport_map_port_10=34
+dport_map_port_11=35
+dport_map_port_12=36
+dport_map_port_13=37
+dport_map_port_14=38
+dport_map_port_15=39
+dport_map_port_16=40
+dport_map_port_17=41
+dport_map_port_18=42
+dport_map_port_19=43
+dport_map_port_20=44
+dport_map_port_21=45
+dport_map_port_22=46
+dport_map_port_23=47
+dport_map_port_24=48
+
+#PM4x10Q0 gt
+dport_map_port_25=2
+dport_map_port_26=1
+dport_map_port_27=4
+dport_map_port_28=3
+dport_map_port_29=6
+dport_map_port_30=5
+dport_map_port_31=8
+dport_map_port_32=7
+dport_map_port_33=10
+dport_map_port_34=9
+dport_map_port_35=12
+dport_map_port_36=11
+dport_map_port_37=14
+dport_map_port_38=13
+dport_map_port_39=16
+dport_map_port_40=15
+
+#PM4x10Q1 gt
+dport_map_port_41=18
+dport_map_port_42=17
+dport_map_port_43=20
+dport_map_port_44=19
+dport_map_port_45=22
+dport_map_port_46=21
+dport_map_port_47=24
+dport_map_port_48=23
+
+#PM4x25 fiber
+dport_map_port_49=50
+dport_map_port_50=49
+dport_map_port_51=52
+dport_map_port_52=51
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/common_config_support b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/common_config_support
new file mode 100644
index 000000000..e69de29bb
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/cust_fru.py b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/cust_fru.py
new file mode 100644
index 000000000..940c722ce
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/cust_fru.py
@@ -0,0 +1,135 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+import sys
+import os
+
+
+class CustFruException(Exception):
+    def __init__(self, message='custfrueerror', code=-100):
+        err = 'errcode: {0} message:{1}'.format(code, message)
+        Exception.__init__(self, err)
+        self.code = code
+        self.message = message
+
+
+class CustFru():
+    MAGIC_HEAD_INFO = 0x7a
+
+    _CUST_MAGIC_OFFSET = 0
+    _CUST_MAGIC_LEN = 1
+    _CUST_VERSION_OFFSET = 1
+    _CUST_VERSION_LEN = 6
+    _CUST_CRC_OFFSET = 7
+    _CUST_CRC_LEN = 1
+    _CUST_PRODUCT_NAME_OFFSET = 10
+    _CUST_PRODUCT_NAME_LEN = 17
+    _CUST_MANUFACTURER_OFFSET = 27
+    _CUST_MANUFACTURER_LEN = 7
+    _CUST_SERIAL_NUMBER_OFFSET = 34
+    _CUST_SERIAL_NUMBER_LEN = 25
+    _CUST_INPUT_TYPE_OFFSET = 78
+    _CUST_INPUT_TYPE_LEN = 2
+    _CUST_INPUT_OFFSET = 86
+    _CUST_INPUT_LEN = 15
+    _CUST_OUTPUT_OFFSET = 108
+    _CUST_OUTPUT_LEN = 11
+    _CUST_POWER_OFFSET = 200
+    _CUST_POWER_LEN = 10
+    _CUST_MANUFACTURER_DATE_OFFSET = 210
+    _CUST_MANUFACTURER_DATE_LEN = 3
+
+    def __init__(self):
+        self.magic = ""
+        self.version = ""
+        self.crc = ""
+        self.product_name = ""
+        self.manufacturer = ""
+        self.serial_number = ""
+        self.input_type = ""
+        self.input = ""
+        self.output = ""
+        self.power = ""
+        self.manufacturer_date = ""
+
+    def checksum(self, v):
+        result = 0
+        for item in v:
+            result += ord(item)
+        return (result & 0xff)
+
+    def decode(self, e2):
+        # header
+        e2_index = 0
+        head = ord(e2[0])
+        if head != self.MAGIC_HEAD_INFO:
+            raise CustFruException("Customization fru eeprom head info error, head:0x%x" % head, -10)
+        self.magic = "0x%02x" % self.MAGIC_HEAD_INFO
+
+        # version
+        version = "%s" % (e2[self._CUST_VERSION_OFFSET:self._CUST_VERSION_OFFSET + self._CUST_VERSION_LEN])
+        self.version = version.replace("\xff", "").strip()
+
+        # crc
+        crc_calc = self.checksum(e2[0:self._CUST_CRC_OFFSET])
+        if crc_calc != ord(e2[self._CUST_CRC_OFFSET]):
+            raise CustFruException("Customization fru eeprom crc check error, calc: 0x%x, read: 0x%x" % (crc_calc, ord(e2[self._CUST_CRC_OFFSET])), -10)
+        self.crc = crc_calc
+
+        # Product Name
+        product_name = "%s" % (e2[self._CUST_PRODUCT_NAME_OFFSET:self._CUST_PRODUCT_NAME_OFFSET + self._CUST_PRODUCT_NAME_LEN])
+        self.product_name = product_name.replace("\xff", "").strip()
+
+        # manufacturer
+        manufacturer = "%s" % (e2[self._CUST_MANUFACTURER_OFFSET:self._CUST_MANUFACTURER_OFFSET + self._CUST_MANUFACTURER_LEN])
+        self.manufacturer = manufacturer.strip()
+
+        # serial_number
+        serial_number = "%s" % (e2[self._CUST_SERIAL_NUMBER_OFFSET:self._CUST_SERIAL_NUMBER_OFFSET + self._CUST_SERIAL_NUMBER_LEN])
+        self.serial_number = serial_number.strip()
+
+        # input_type
+        input_type = "%s" % (e2[self._CUST_INPUT_TYPE_OFFSET:self._CUST_INPUT_TYPE_OFFSET + self._CUST_INPUT_TYPE_LEN])
+        self.input_type = input_type.strip()
+
+        # input
+        input = "%s" % (e2[self._CUST_INPUT_OFFSET:self._CUST_INPUT_OFFSET + self._CUST_INPUT_LEN])
+        self.input = input.strip()
+
+        # output
+        output = "%s" % (e2[self._CUST_OUTPUT_OFFSET:self._CUST_OUTPUT_OFFSET + self._CUST_OUTPUT_LEN])
+        self.output = output.strip()
+
+        # power
+        power = "%s" % (e2[self._CUST_POWER_OFFSET:self._CUST_POWER_OFFSET + self._CUST_POWER_LEN])
+        self.power = power.replace("\xff", "").strip()
+
+        # manufacturer_date
+        manufacturer_year = ord(e2[self._CUST_MANUFACTURER_DATE_OFFSET]) + 2000
+        manufacturer_month = ord(e2[self._CUST_MANUFACTURER_DATE_OFFSET + 1])
+        manufacturer_day = ord(e2[self._CUST_MANUFACTURER_DATE_OFFSET + 2])
+        self.manufacturer_date = "%04d-%02d-%02d" % (manufacturer_year, manufacturer_month, manufacturer_day)
+
+        return
+
+
+    def __str__(self):
+        formatstr = "Version            : %s      \n" \
+                    "Product Name       : %s      \n" \
+                    "Manufacturer       : %s      \n" \
+                    "Serial Number      : %s      \n" \
+                    "AC/DC Power Module : %s      \n" \
+                    "INPUT              : %s      \n" \
+                    "OUTPUT             : %s      \n" \
+                    "POWER              : %s      \n" \
+                    "Manufacturer Date  : %s      \n"
+        str_tmp = formatstr % (self.version,
+                            self.product_name,
+                            self.manufacturer,
+                            self.serial_number,
+                            self.input_type,
+                            self.input,
+                            self.output,
+                            self.power,
+                            self.manufacturer_date)
+        return str_tmp.replace("\x00","")
+
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/custom_led.bin b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/custom_led.bin
new file mode 100644
index 0000000000000000000000000000000000000000..5cdcccbfdd88d2f34df2aa252659b7b051acf285
GIT binary patch
literal 228
zcmWN~yH3IY7=Y35FSV$Mh<GV-6-wozCbXCcH~>Qj2Ny;iXk7XZI2&Vp14wv>CXU8|
zl>yj@F>%t#gg7|sd4aQh4w1Z!;#Dye^Ndt0kRLj+2Wbxc5t{dUeeeC=kmocw6`K=v
zdh29b{Z79<@Ey<YDwbM%?0n87M?nnRln=4yemDK*Q_*H|Y3q|-*u8R}+@G(6jP>`P
zTK--vU+&H!&H)LMq)3w?%OSb{$e@795k*Rrsc=jc3!54Wf=U356;=td&Ketp*d)vr
U5w?l4LySFk(b=a#oeP@$0W(Z3djJ3c

literal 0
HcmV?d00001

diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/default_sku b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/default_sku
new file mode 100644
index 000000000..3987b2602
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/default_sku
@@ -0,0 +1 @@
+M2-W6510-48GT4V l2
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/dev.xml b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/dev.xml
new file mode 100644
index 000000000..20e53bc1f
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/dev.xml
@@ -0,0 +1,190 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+      ### type  1 result/1000
+          type  2 result/100
+          type  3 read bit
+     ### property need check must add int front
+-->
+<catalog>
+    <fans>
+        <fan id="fan1" >
+            <property name="present" location="/sys/wb_plat/fan/fan1/present"       type="4" decode="fanpresent" default="1"/>
+            <property name="status"  location="/sys/wb_plat/fan/fan1/motor0/status" type="4" decode="fanstatus"  default="1"/>
+            <property name="fru" e2type="fru"  location="/sys/bus/i2c/devices/8-0053/eeprom"/>
+            <property name="Speed" location="/sys/wb_plat/fan/fan1/motor0/speed"/>
+        </fan>
+        <fan id="fan2" >
+            <property name="present" location="/sys/wb_plat/fan/fan2/present"       type="4" decode="fanpresent" default="1"/>
+            <property name="status"  location="/sys/wb_plat/fan/fan2/motor0/status" type="4" decode="fanstatus"  default="1"/>
+            <property name="fru" e2type="fru"  location="/sys/bus/i2c/devices/9-0053/eeprom"/>
+            <property name="Speed" location="/sys/wb_plat/fan/fan2/motor0/speed"/>
+        </fan>
+    </fans>
+    <temps>
+        <temp id="INLET_TEMP" >
+            <property name="temp1_input" location="/sys/bus/i2c/devices/6-0049/hwmon/*/temp1_input" type="1" addend="-7"/>
+            <property name="temp1_max"   location="/sys/bus/i2c/devices/6-0049/hwmon/*/temp1_max" type="1" />
+            <property name="temp1_max_hyst"    location="/sys/bus/i2c/devices/6-0049/hwmon/*/temp1_max_hyst" type="1" />
+        </temp>
+        <temp id="OUTLET_TEMP" >
+            <property name="temp1_input" location="/sys/bus/i2c/devices/6-0048/hwmon/*/temp1_input" type="1"/>
+            <property name="temp1_max"   location="/sys/bus/i2c/devices/6-0048/hwmon/*/temp1_max" type="1" />
+            <property name="temp1_max_hyst"    location="/sys/bus/i2c/devices/6-0048/hwmon/*/temp1_max_hyst" type="1" />
+        </temp>
+    </temps>
+    <psus>
+        <custpsu id="psu1" >
+            <property name="present" location="/sys/wb_plat/psu/psu1/present" type="4" decode="psucheck"  default="1"/>
+            <property name="status"  location="/sys/wb_plat/psu/psu1/output"  type="4" decode="psustatus" default="1"/>
+            <property name="psu" e2type="custfru"  location="/sys/bus/i2c/devices/7-0056/eeprom"/>
+        </custpsu>
+        <custpsu id="psu2" >
+            <property name="present" location="/sys/wb_plat/psu/psu2/present" type="4" decode="psucheck"  default="1"/>
+            <property name="status"  location="/sys/wb_plat/psu/psu2/output"  type="4" decode="psustatus" default="1"/>
+            <property name="psu" e2type="custfru"  location="/sys/bus/i2c/devices/7-0057/eeprom"/>
+        </custpsu> 
+    </psus> 
+    <dcdcs>
+        <dcdc id="VDD_CORE_0.8V" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/17-0058/hwmon/hwmon*/in3_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="0.893" />
+            <property name="dcdc_min"   gettype="config" value="0.784" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="PVCCP" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/0-0068/hwmon/hwmon*/in3_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.364" />
+            <property name="dcdc_min"   gettype="config" value="0.468" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="PVNN" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/0-0068/hwmon/hwmon*/in4_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.364" />
+            <property name="dcdc_min"   gettype="config" value="0.585" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="P1V05" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/0-006e/hwmon/hwmon*/in3_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.155" />
+            <property name="dcdc_min"   gettype="config" value="0.945" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="VCCRAM" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/0-006e/hwmon/hwmon*/in4_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.320" />
+            <property name="dcdc_min"   gettype="config" value="0.675" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="P1V2_VDDQ" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/0-005e/hwmon/hwmon*/in3_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.320" />
+            <property name="dcdc_min"   gettype="config" value="1.080" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+
+        <dcdc id="CPU_VDD1.8V" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0040/hwmon/hwmon*/in1_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.980" />
+            <property name="dcdc_min"   gettype="config" value="1.620" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="P3V3_STBY" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0040/hwmon/hwmon*/in2_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="3.630" />
+            <property name="dcdc_min"   gettype="config" value="2.970" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="P5V_AUX" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0040/hwmon/hwmon*/in3_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="5.500" />
+            <property name="dcdc_min"   gettype="config" value="4.500" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="VDD1.2V" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0041/hwmon/hwmon*/in1_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.260" />
+            <property name="dcdc_min"   gettype="config" value="1.140" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="VDD1.8V" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0041/hwmon/hwmon*/in2_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.890" />
+            <property name="dcdc_min"   gettype="config" value="1.710" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="VDD3.3V" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0041/hwmon/hwmon*/in3_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="3.600" />
+            <property name="dcdc_min"   gettype="config" value="3.200" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="VDD1.0V" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0042/hwmon/hwmon*/in1_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.071" />
+            <property name="dcdc_min"   gettype="config" value="0.969" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="VDD3.3V_SFP" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0042/hwmon/hwmon*/in2_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="3.600" />
+            <property name="dcdc_min"   gettype="config" value="3.200" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="VAN_0.8V" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0042/hwmon/hwmon*/in3_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="0.893" />
+            <property name="dcdc_min"   gettype="config" value="0.784" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+    </dcdcs>
+    <mactemps>
+        <mactemp id="MAC_DIE_0" >
+            <property name="temp_input" location="/sys/bus/i2c/devices/18-0044/hwmon/hwmon*/temp1_input"  type="1"/>
+        </mactemp>
+        <mactemp id="MAC_DIE_1" >
+            <property name="temp_input" location="/sys/bus/i2c/devices/18-0044/hwmon/hwmon*/temp2_input"  type="1"/>
+        </mactemp>
+        <mactemp id="MAC_DIE_2" >
+            <property name="temp_input" location="/sys/bus/i2c/devices/18-0044/hwmon/hwmon*/temp3_input"  type="1"/>
+        </mactemp>
+        <mactemp id="MAC_DIE_3" >
+            <property name="temp_input" location="/sys/bus/i2c/devices/18-0044/hwmon/hwmon*/temp4_input"  type="1"/>
+        </mactemp>
+        <mactemp id="MAC_DIE_4" >
+            <property name="temp_input" location="/sys/bus/i2c/devices/18-0044/hwmon/hwmon*/temp5_input"  type="1"/>
+        </mactemp>
+        <mactemp id="MAC_DIE_5" >
+            <property name="temp_input" location="/sys/bus/i2c/devices/18-0044/hwmon/hwmon*/temp6_input"  type="1"/>
+        </mactemp>
+    </mactemps>
+    <cpus location="/sys/bus/platform/devices/coretemp.0/hwmon/hwmon*"/>
+    <decode>
+    <fanpresent>
+        <code key="1" value="PRESENT"/>
+        <code key="0" value="ABSENT"/>
+    </fanpresent>
+    <fanstatus>
+        <code key="1" value="OK"/>
+        <code key="0" value="NOT OK"/>
+    </fanstatus>
+    <psucheck>
+        <code key="1" value="PRESENT"/>
+        <code key="0" value="ABSENT"/>
+    </psucheck>
+    <psustatus>
+        <code key="1" value="OK"/>
+        <code key="0" value="NOT OK"/>
+    </psustatus>
+    <psutype>
+        <code key="PA150II-F" value="PA150II-F"/>
+        <code key="PD150II-F" value="PD150II-F"/>
+        <code key="PA150II-R" value="PA150II-R"/>
+        <code key="PD150II-R" value="PD150II-R"/>
+    </psutype>
+    <fan_display_name>
+        <code key="M1LFAN I-F" value="M1LFAN I-F"/>
+        <code key="M1LFAN I-R" value="M1LFAN I-R"/>
+    </fan_display_name>
+    </decode>
+</catalog>
+
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/dev_exhaust.xml b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/dev_exhaust.xml
new file mode 100644
index 000000000..a0939f5ba
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/dev_exhaust.xml
@@ -0,0 +1,190 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+      ### type  1 result/1000
+          type  2 result/100
+          type  3 read bit
+     ### property need check must add int front
+-->
+<catalog>
+    <fans>
+        <fan id="fan1" >
+            <property name="present" location="/sys/wb_plat/fan/fan1/present"       type="4" decode="fanpresent" default="1"/>
+            <property name="status"  location="/sys/wb_plat/fan/fan1/motor0/status" type="4" decode="fanstatus"  default="1"/>
+            <property name="fru" e2type="fru"  location="/sys/bus/i2c/devices/8-0053/eeprom"/>
+            <property name="Speed" location="/sys/wb_plat/fan/fan1/motor0/speed"/>
+        </fan>
+        <fan id="fan2" >
+            <property name="present" location="/sys/wb_plat/fan/fan2/present"       type="4" decode="fanpresent" default="1"/>
+            <property name="status"  location="/sys/wb_plat/fan/fan2/motor0/status" type="4" decode="fanstatus"  default="1"/>
+            <property name="fru" e2type="fru"  location="/sys/bus/i2c/devices/9-0053/eeprom"/>
+            <property name="Speed" location="/sys/wb_plat/fan/fan2/motor0/speed"/>
+        </fan>
+    </fans>
+    <temps>
+        <temp id="INLET_TEMP" >
+            <property name="temp1_input" location="/sys/bus/i2c/devices/6-0048/hwmon/*/temp1_input" type="1" addend="-7"/>
+            <property name="temp1_max"   location="/sys/bus/i2c/devices/6-0048/hwmon/*/temp1_max" type="1" />
+            <property name="temp1_max_hyst"    location="/sys/bus/i2c/devices/6-0048/hwmon/*/temp1_max_hyst" type="1" />
+        </temp>
+        <temp id="OUTLET_TEMP" >
+            <property name="temp1_input" location="/sys/bus/i2c/devices/6-0049/hwmon/*/temp1_input" type="1"/>
+            <property name="temp1_max"   location="/sys/bus/i2c/devices/6-0049/hwmon/*/temp1_max" type="1" />
+            <property name="temp1_max_hyst"    location="/sys/bus/i2c/devices/6-0049/hwmon/*/temp1_max_hyst" type="1" />
+        </temp>
+    </temps>
+    <psus>
+        <custpsu id="psu1" >
+            <property name="present" location="/sys/wb_plat/psu/psu1/present" type="4" decode="psucheck"  default="1"/>
+            <property name="status"  location="/sys/wb_plat/psu/psu1/output"  type="4" decode="psustatus" default="1"/>
+            <property name="psu" e2type="custfru"  location="/sys/bus/i2c/devices/7-0056/eeprom"/>
+        </custpsu>
+        <custpsu id="psu2" >
+            <property name="present" location="/sys/wb_plat/psu/psu2/present" type="4" decode="psucheck"  default="1"/>
+            <property name="status"  location="/sys/wb_plat/psu/psu2/output"  type="4" decode="psustatus" default="1"/>
+            <property name="psu" e2type="custfru"  location="/sys/bus/i2c/devices/7-0057/eeprom"/>
+        </custpsu> 
+    </psus> 
+    <dcdcs>
+        <dcdc id="VDD_CORE_0.8V" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/17-0058/hwmon/hwmon*/in3_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="0.893" />
+            <property name="dcdc_min"   gettype="config" value="0.784" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="PVCCP" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/0-0068/hwmon/hwmon*/in3_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.364" />
+            <property name="dcdc_min"   gettype="config" value="0.468" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="PVNN" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/0-0068/hwmon/hwmon*/in4_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.364" />
+            <property name="dcdc_min"   gettype="config" value="0.585" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="P1V05" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/0-006e/hwmon/hwmon*/in3_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.155" />
+            <property name="dcdc_min"   gettype="config" value="0.945" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="VCCRAM" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/0-006e/hwmon/hwmon*/in4_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.320" />
+            <property name="dcdc_min"   gettype="config" value="0.675" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="P1V2_VDDQ" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/0-005e/hwmon/hwmon*/in3_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.320" />
+            <property name="dcdc_min"   gettype="config" value="1.080" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+
+        <dcdc id="CPU_VDD1.8V" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0040/hwmon/hwmon*/in1_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.980" />
+            <property name="dcdc_min"   gettype="config" value="1.620" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="P3V3_STBY" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0040/hwmon/hwmon*/in2_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="3.630" />
+            <property name="dcdc_min"   gettype="config" value="2.970" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="P5V_AUX" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0040/hwmon/hwmon*/in3_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="5.500" />
+            <property name="dcdc_min"   gettype="config" value="4.500" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="VDD1.2V" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0041/hwmon/hwmon*/in1_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.260" />
+            <property name="dcdc_min"   gettype="config" value="1.140" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="VDD1.8V" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0041/hwmon/hwmon*/in2_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.890" />
+            <property name="dcdc_min"   gettype="config" value="1.710" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="VDD3.3V" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0041/hwmon/hwmon*/in3_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="3.600" />
+            <property name="dcdc_min"   gettype="config" value="3.200" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="VDD1.0V" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0042/hwmon/hwmon*/in1_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="1.071" />
+            <property name="dcdc_min"   gettype="config" value="0.969" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="VDD3.3V_SFP" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0042/hwmon/hwmon*/in2_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="3.600" />
+            <property name="dcdc_min"   gettype="config" value="3.200" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+        <dcdc id="VAN_0.8V" >
+            <property name="dcdc_input" location="/sys/bus/i2c/devices/3-0042/hwmon/hwmon*/in3_input" type="6" />
+            <property name="dcdc_max"   gettype="config" value="0.893" />
+            <property name="dcdc_min"   gettype="config" value="0.784" />
+            <property name="dcdc_unit"   gettype="config" value="V" />
+        </dcdc>
+    </dcdcs>
+    <mactemps>
+        <mactemp id="MAC_DIE_0" >
+            <property name="temp_input" location="/sys/bus/i2c/devices/18-0044/hwmon/hwmon*/temp1_input"  type="1"/>
+        </mactemp>
+        <mactemp id="MAC_DIE_1" >
+            <property name="temp_input" location="/sys/bus/i2c/devices/18-0044/hwmon/hwmon*/temp2_input"  type="1"/>
+        </mactemp>
+        <mactemp id="MAC_DIE_2" >
+            <property name="temp_input" location="/sys/bus/i2c/devices/18-0044/hwmon/hwmon*/temp3_input"  type="1"/>
+        </mactemp>
+        <mactemp id="MAC_DIE_3" >
+            <property name="temp_input" location="/sys/bus/i2c/devices/18-0044/hwmon/hwmon*/temp4_input"  type="1"/>
+        </mactemp>
+        <mactemp id="MAC_DIE_4" >
+            <property name="temp_input" location="/sys/bus/i2c/devices/18-0044/hwmon/hwmon*/temp5_input"  type="1"/>
+        </mactemp>
+        <mactemp id="MAC_DIE_5" >
+            <property name="temp_input" location="/sys/bus/i2c/devices/18-0044/hwmon/hwmon*/temp6_input"  type="1"/>
+        </mactemp>
+    </mactemps>
+    <cpus location="/sys/bus/platform/devices/coretemp.0/hwmon/hwmon*"/>
+    <decode>
+    <fanpresent>
+        <code key="1" value="PRESENT"/>
+        <code key="0" value="ABSENT"/>
+    </fanpresent>
+    <fanstatus>
+        <code key="1" value="OK"/>
+        <code key="0" value="NOT OK"/>
+    </fanstatus>
+    <psucheck>
+        <code key="1" value="PRESENT"/>
+        <code key="0" value="ABSENT"/>
+    </psucheck>
+    <psustatus>
+        <code key="1" value="OK"/>
+        <code key="0" value="NOT OK"/>
+    </psustatus>
+    <psutype>
+        <code key="PA150II-F" value="PA150II-F"/>
+        <code key="PD150II-F" value="PD150II-F"/>
+        <code key="PA150II-R" value="PA150II-R"/>
+        <code key="PD150II-R" value="PD150II-R"/>
+    </psutype>
+    <fan_display_name>
+        <code key="M1LFAN I-F" value="M1LFAN I-F"/>
+        <code key="M1LFAN I-R" value="M1LFAN I-R"/>
+    </fan_display_name>
+    </decode>
+</catalog>
+
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/fru.py b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/fru.py
new file mode 100644
index 000000000..f95164e03
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/fru.py
@@ -0,0 +1,961 @@
+#!/usr/bin/python3
+import collections
+from datetime import datetime, timedelta
+from bitarray import bitarray
+
+
+__DEBUG__ = "N"
+
+
+class FruException(Exception):
+    def __init__(self, message='fruerror', code=-100):
+        err = 'errcode: {0} message:{1}'.format(code, message)
+        Exception.__init__(self, err)
+        self.code = code
+        self.message = message
+
+
+def e_print(err):
+    print("ERROR: " + err)
+
+
+def d_print(debug_info):
+    if __DEBUG__ == "Y":
+        print(debug_info)
+
+
+class FruUtil():
+    @staticmethod
+    def decodeLength(value):
+        a = bitarray(8)
+        a.setall(True)
+        a[0:1] = 0
+        a[1:2] = 0
+        x = ord(a.tobytes())
+        return x & ord(value)
+
+    @staticmethod
+    def minToData():
+        starttime = datetime(1996, 1, 1, 0, 0, 0)
+        endtime = datetime.now()
+        seconds = (endtime - starttime).total_seconds()
+        mins = seconds // 60
+        m = int(round(mins))
+        return m
+
+    @staticmethod
+    def getTimeFormat():
+        return datetime.now().strftime('%Y-%m-%d')
+
+    @staticmethod
+    def getTypeLength(value):
+        if value is None or len(value) == 0:
+            return 0
+        a = bitarray(8)
+        a.setall(False)
+        a[0:1] = 1
+        a[1:2] = 1
+        x = ord(a.tobytes())
+        return x | len(value)
+
+    @staticmethod
+    def checksum(b):
+        result = 0
+        for item in b:
+            result += ord(item)
+        return (0x100 - (result & 0xff)) & 0xff
+
+
+class BaseArea(object):
+    SUGGESTED_SIZE_COMMON_HEADER = 8
+    SUGGESTED_SIZE_INTERNAL_USE_AREA = 72
+    SUGGESTED_SIZE_CHASSIS_INFO_AREA = 32
+    SUGGESTED_SIZE_BOARD_INFO_AREA = 80
+    SUGGESTED_SIZE_PRODUCT_INFO_AREA = 80
+
+    INITVALUE = b'\x00'
+    resultvalue = INITVALUE * 256
+    COMMON_HEAD_VERSION = b'\x01'
+    __childList = None
+
+    def __init__(self, name="", size=0, offset=0):
+        self.__childList = []
+        self._offset = offset
+        self.name = name
+        self._size = size
+        self._isPresent = False
+        self._data = b'\x00' * size
+
+    @property
+    def childList(self):
+        return self.__childList
+
+    @childList.setter
+    def childList(self, value):
+        self.__childList = value
+
+    @property
+    def offset(self):
+        return self._offset
+
+    @offset.setter
+    def offset(self, value):
+        self._offset = value
+
+    @property
+    def size(self):
+        return self._size
+
+    @size.setter
+    def size(self, value):
+        self._size = value
+
+    @property
+    def data(self):
+        return self._data
+
+    @data.setter
+    def data(self, value):
+        self._data = value
+
+    @property
+    def isPresent(self):
+        return self._isPresent
+
+    @isPresent.setter
+    def isPresent(self, value):
+        self._isPresent = value
+
+
+class InternalUseArea(BaseArea):
+    pass
+
+
+class ChassisInfoArea(BaseArea):
+    pass
+
+
+class BoardInfoArea(BaseArea):
+    _boardTime = None
+    _fields = None
+    _mfg_date = None
+    areaversion = None
+    _boardversion = None
+    _language = None
+
+    def __str__(self):
+        formatstr = "version             : %x\n" \
+                    "length              : %d \n" \
+                    "language            : %x \n" \
+                    "mfg_date            : %s \n" \
+                    "boardManufacturer   : %s \n" \
+                    "boardProductName    : %s \n" \
+                    "boardSerialNumber   : %s \n" \
+                    "boardPartNumber     : %s \n" \
+                    "fruFileId           : %s \n"
+
+        tmpstr = formatstr % (ord(self.boardversion), self.size,
+                              self.language, self.getMfgRealData(),
+                              self.boardManufacturer, self.boardProductName,
+                              self.boardSerialNumber, self.boardPartNumber,
+                              self.fruFileId)
+        for i in range(1, 11):
+            valtmp = "boardextra%d" % i
+            if hasattr(self, valtmp):
+                valtmpval = getattr(self, valtmp)
+                tmpstr += "boardextra%d         : %s \n" % (i, valtmpval)
+            else:
+                break
+
+        return tmpstr
+
+    def todict(self):
+        dic = collections.OrderedDict()
+        dic["boardversion"] = ord(self.boardversion)
+        dic["boardlength"] = self.size
+        dic["boardlanguage"] = self.language
+        dic["boardmfg_date"] = self.getMfgRealData()
+        dic["boardManufacturer"] = self.boardManufacturer
+        dic["boardProductName"] = self.boardProductName
+        dic["boardSerialNumber"] = self.boardSerialNumber
+        dic["boardPartNumber"] = self.boardPartNumber
+        dic["boardfruFileId"] = self.fruFileId
+        for i in range(1, 11):
+            valtmp = "boardextra%d" % i
+            if hasattr(self, valtmp):
+                valtmpval = getattr(self, valtmp)
+                dic[valtmp] = valtmpval
+            else:
+                break
+        return dic
+
+    def decodedata(self):
+        index = 0
+        self.areaversion = self.data[index]
+        index += 1
+        d_print("decode length :%d class size:%d" %
+                ((ord(self.data[index]) * 8), self.size))
+        index += 2
+
+        timetmp = self.data[index: index + 3]
+        self.mfg_date = ord(timetmp[0]) | (
+            ord(timetmp[1]) << 8) | (ord(timetmp[2]) << 16)
+        d_print("decode getMfgRealData :%s" % self.getMfgRealData())
+        index += 3
+
+        templen = FruUtil.decodeLength(self.data[index])
+        self.boardManufacturer = self.data[index + 1: index + templen + 1]
+        index += templen + 1
+        d_print("decode boardManufacturer:%s" % self.boardManufacturer)
+
+        templen = FruUtil.decodeLength(self.data[index])
+        self.boardProductName = self.data[index + 1: index + templen + 1]
+        index += templen + 1
+        d_print("decode boardProductName:%s" % self.boardProductName)
+
+        templen = FruUtil.decodeLength(self.data[index])
+        self.boardSerialNumber = self.data[index + 1: index + templen + 1]
+        index += templen + 1
+        d_print("decode boardSerialNumber:%s" % self.boardSerialNumber)
+
+        templen = FruUtil.decodeLength(self.data[index])
+        self.boardPartNumber = self.data[index + 1: index + templen + 1]
+        index += templen + 1
+        d_print("decode boardPartNumber:%s" % self.boardPartNumber)
+
+        templen = FruUtil.decodeLength(self.data[index])
+        self.fruFileId = self.data[index + 1: index + templen + 1]
+        index += templen + 1
+        d_print("decode fruFileId:%s" % self.fruFileId)
+
+        for i in range(1, 11):
+            valtmp = "boardextra%d" % i
+            if self.data[index] != chr(0xc1):
+                templen = FruUtil.decodeLength(self.data[index])
+                tmpval = self.data[index + 1: index + templen + 1]
+                setattr(self, valtmp, tmpval)
+                index += templen + 1
+                d_print("decode boardextra%d:%s" % (i, tmpval))
+            else:
+                break
+
+    def fruSetValue(self, field, value):
+        tmp_field = getattr(self, field, None)
+        if tmp_field is not None:
+            setattr(self, field, value)
+
+    def recalcute(self):
+        d_print("boardInfoArea version:%x" % ord(self.boardversion))
+        d_print("boardInfoArea length:%d" % self.size)
+        d_print("boardInfoArea language:%x" % self.language)
+        self.mfg_date = FruUtil.minToData()
+        d_print("boardInfoArea mfg_date:%x" % self.mfg_date)
+
+        self.data = chr(ord(self.boardversion)) + \
+            chr(self.size // 8) + chr(self.language)
+
+        self.data += chr(self.mfg_date & 0xFF)
+        self.data += chr((self.mfg_date >> 8) & 0xFF)
+        self.data += chr((self.mfg_date >> 16) & 0xFF)
+
+        d_print("boardInfoArea boardManufacturer:%s" % self.boardManufacturer)
+        typelength = FruUtil.getTypeLength(self.boardManufacturer)
+        self.data += chr(typelength)
+        self.data += self.boardManufacturer
+
+        d_print("boardInfoArea boardProductName:%s" % self.boardProductName)
+        self.data += chr(FruUtil.getTypeLength(self.boardProductName))
+        self.data += self.boardProductName
+
+        d_print("boardInfoArea boardSerialNumber:%s" % self.boardSerialNumber)
+        self.data += chr(FruUtil.getTypeLength(self.boardSerialNumber))
+        self.data += self.boardSerialNumber
+
+        d_print("boardInfoArea boardPartNumber:%s" % self.boardPartNumber)
+        self.data += chr(FruUtil.getTypeLength(self.boardPartNumber))
+        self.data += self.boardPartNumber
+
+        d_print("boardInfoArea fruFileId:%s" % self.fruFileId)
+        self.data += chr(FruUtil.getTypeLength(self.fruFileId))
+        self.data += self.fruFileId
+
+        for i in range(1, 11):
+            valtmp = "boardextra%d" % i
+            if hasattr(self, valtmp):
+                valtmpval = getattr(self, valtmp)
+                d_print("boardInfoArea boardextra%d:%s" % (i, valtmpval))
+                self.data += chr(FruUtil.getTypeLength(valtmpval))
+                if valtmpval is not None:
+                    self.data += valtmpval
+            else:
+                break
+
+        self.data += chr(0xc1)
+
+        if len(self.data) > (self.size - 1):
+            incr = (len(self.data) - self.size) // 8 + 1
+            self.size += incr * 8
+
+        self.data = self.data[0:1] + chr(self.size // 8) + self.data[2:]
+        d_print("self data:%d" % len(self.data))
+        d_print("self size:%d" % self.size)
+        d_print("adjust size:%d" % (self.size - len(self.data) - 1))
+        self.data = self.data.ljust((self.size - 1), chr(self.INITVALUE[0]))
+
+        # checksum
+        checksum = FruUtil.checksum(self.data)
+        d_print("board info checksum:%x" % checksum)
+        self.data += chr(checksum)
+
+    def getMfgRealData(self):
+        starttime = datetime(1996, 1, 1, 0, 0, 0)
+        mactime = starttime + timedelta(minutes=self.mfg_date)
+        return mactime
+
+    @property
+    def language(self):
+        self._language = 25
+        return self._language
+
+    @property
+    def mfg_date(self):
+        return self._mfg_date
+
+    @mfg_date.setter
+    def mfg_date(self, val):
+        self._mfg_date = val
+
+    @property
+    def boardversion(self):
+        self._boardversion = self.COMMON_HEAD_VERSION
+        return self._boardversion
+
+    @property
+    def fruFileId(self):
+        return self._FRUFileID
+
+    @fruFileId.setter
+    def fruFileId(self, val):
+        self._FRUFileID = val
+
+    @property
+    def boardPartNumber(self):
+        return self._boardPartNumber
+
+    @boardPartNumber.setter
+    def boardPartNumber(self, val):
+        self._boardPartNumber = val
+
+    @property
+    def boardSerialNumber(self):
+        return self._boardSerialNumber
+
+    @boardSerialNumber.setter
+    def boardSerialNumber(self, val):
+        self._boardSerialNumber = val
+
+    @property
+    def boardProductName(self):
+        return self._boradProductName
+
+    @boardProductName.setter
+    def boardProductName(self, val):
+        self._boradProductName = val
+
+    @property
+    def boardManufacturer(self):
+        return self._boardManufacturer
+
+    @boardManufacturer.setter
+    def boardManufacturer(self, val):
+        self._boardManufacturer = val
+
+    @property
+    def boardTime(self):
+        return self._boardTime
+
+    @boardTime.setter
+    def boardTime(self, val):
+        self._boardTime = val
+
+    @property
+    def fields(self):
+        return self._fields
+
+    @fields.setter
+    def fields(self, val):
+        self._fields = val
+
+
+class ProductInfoArea(BaseArea):
+    _productManufacturer = None
+    _productAssetTag = None
+    _FRUFileID = None
+    _language = None
+
+    def __str__(self):
+        formatstr = "version             : %x\n" \
+                    "length              : %d \n" \
+                    "language            : %x \n" \
+                    "productManufacturer : %s \n" \
+                    "productName         : %s \n" \
+                    "productPartModelName: %s \n" \
+                    "productVersion      : %s \n" \
+                    "productSerialNumber : %s \n" \
+                    "productAssetTag     : %s \n" \
+                    "fruFileId           : %s \n"
+
+        tmpstr = formatstr % (ord(self.areaversion), self.size,
+                              self.language, self.productManufacturer,
+                              self.productName, self.productPartModelName,
+                              self.productVersion, self.productSerialNumber,
+                              self.productAssetTag, self.fruFileId)
+
+        for i in range(1, 11):
+            valtmp = "productextra%d" % i
+            if hasattr(self, valtmp):
+                valtmpval = getattr(self, valtmp)
+                tmpstr += "productextra%d       : %s \n" % (i, valtmpval)
+            else:
+                break
+
+        return tmpstr
+
+    def todict(self):
+        dic = collections.OrderedDict()
+        dic["productversion"] = ord(self.areaversion)
+        dic["productlength"] = self.size
+        dic["productlanguage"] = self.language
+        dic["productManufacturer"] = self.productManufacturer
+        dic["productName"] = self.productName
+        dic["productPartModelName"] = self.productPartModelName
+        dic["productVersion"] = int(self.productVersion, 16)
+        dic["productSerialNumber"] = self.productSerialNumber
+        dic["productAssetTag"] = self.productAssetTag
+        dic["productfruFileId"] = self.fruFileId
+        for i in range(1, 11):
+            valtmp = "productextra%d" % i
+            if hasattr(self, valtmp):
+                valtmpval = getattr(self, valtmp)
+                dic[valtmp] = valtmpval
+            else:
+                break
+        return dic
+
+    def decodedata(self):
+        index = 0
+        self.areaversion = self.data[index]  # 0
+        index += 1
+        d_print("decode length %d" % (ord(self.data[index]) * 8))
+        d_print("class size %d" % self.size)
+        index += 2
+
+        templen = FruUtil.decodeLength(self.data[index])
+        self.productManufacturer = self.data[index + 1: index + templen + 1]
+        index += templen + 1
+        d_print("decode productManufacturer:%s" % self.productManufacturer)
+
+        templen = FruUtil.decodeLength(self.data[index])
+        self.productName = self.data[index + 1: index + templen + 1]
+        index += templen + 1
+        d_print("decode productName:%s" % self.productName)
+
+        templen = FruUtil.decodeLength(self.data[index])
+        self.productPartModelName = self.data[index + 1: index + templen + 1]
+        index += templen + 1
+        d_print("decode productPartModelName:%s" % self.productPartModelName)
+
+        templen = FruUtil.decodeLength(self.data[index])
+        self.productVersion = self.data[index + 1: index + templen + 1]
+        index += templen + 1
+        d_print("decode productVersion:%s" % self.productVersion)
+
+        templen = FruUtil.decodeLength(self.data[index])
+        self.productSerialNumber = self.data[index + 1: index + templen + 1]
+        index += templen + 1
+        d_print("decode productSerialNumber:%s" % self.productSerialNumber)
+
+        templen = FruUtil.decodeLength(self.data[index])
+        self.productAssetTag = self.data[index + 1: index + templen + 1]
+        index += templen + 1
+        d_print("decode productAssetTag:%s" % self.productAssetTag)
+
+        templen = FruUtil.decodeLength(self.data[index])
+        self.fruFileId = self.data[index + 1: index + templen + 1]
+        index += templen + 1
+        d_print("decode fruFileId:%s" % self.fruFileId)
+
+        for i in range(1, 11):
+            valtmp = "productextra%d" % i
+            if self.data[index] != chr(0xc1) and index < self.size - 1:
+                templen = FruUtil.decodeLength(self.data[index])
+                if templen == 0:
+                    break
+                tmpval = self.data[index + 1: index + templen + 1]
+                d_print("decode boardextra%d:%s" % (i, tmpval))
+                setattr(self, valtmp, tmpval)
+                index += templen + 1
+            else:
+                break
+
+    @property
+    def productVersion(self):
+        return self._productVersion
+
+    @productVersion.setter
+    def productVersion(self, name):
+        self._productVersion = name
+
+    @property
+    def areaversion(self):
+        self._areaversion = self.COMMON_HEAD_VERSION
+        return self._areaversion
+
+    @areaversion.setter
+    def areaversion(self, name):
+        self._areaversion = name
+
+    @property
+    def language(self):
+        self._language = 25
+        return self._language
+
+    @property
+    def productManufacturer(self):
+        return self._productManufacturer
+
+    @productManufacturer.setter
+    def productManufacturer(self, name):
+        self._productManufacturer = name
+
+    @property
+    def productName(self):
+        return self._productName
+
+    @productName.setter
+    def productName(self, name):
+        self._productName = name
+
+    @property
+    def productPartModelName(self):
+        return self._productPartModelName
+
+    @productPartModelName.setter
+    def productPartModelName(self, name):
+        self._productPartModelName = name
+
+    @property
+    def productSerialNumber(self):
+        return self._productSerialNumber
+
+    @productSerialNumber.setter
+    def productSerialNumber(self, name):
+        self._productSerialNumber = name
+
+    @property
+    def productAssetTag(self):
+        return self._productAssetTag
+
+    @productAssetTag.setter
+    def productAssetTag(self, name):
+        self._productAssetTag = name
+
+    @property
+    def fruFileId(self):
+        return self._FRUFileID
+
+    @fruFileId.setter
+    def fruFileId(self, name):
+        self._FRUFileID = name
+
+    def fruSetValue(self, field, value):
+        tmp_field = getattr(self, field, None)
+        if tmp_field is not None:
+            setattr(self, field, value)
+
+    def recalcute(self):
+        d_print("product version:%x" % ord(self.areaversion))
+        d_print("product length:%d" % self.size)
+        d_print("product language:%x" % self.language)
+        self.data = chr(ord(self.areaversion)) + \
+            chr(self.size // 8) + chr(self.language)
+
+        typelength = FruUtil.getTypeLength(self.productManufacturer)
+        self.data += chr(typelength)
+        self.data += self.productManufacturer
+
+        self.data += chr(FruUtil.getTypeLength(self.productName))
+        self.data += self.productName
+
+        self.data += chr(FruUtil.getTypeLength(self.productPartModelName))
+        self.data += self.productPartModelName
+
+        self.data += chr(FruUtil.getTypeLength(self.productVersion))
+        self.data += self.productVersion
+
+        self.data += chr(FruUtil.getTypeLength(self.productSerialNumber))
+        self.data += self.productSerialNumber
+
+        self.data += chr(FruUtil.getTypeLength(self.productAssetTag))
+        if self.productAssetTag is not None:
+            self.data += self.productAssetTag
+
+        self.data += chr(FruUtil.getTypeLength(self.fruFileId))
+        self.data += self.fruFileId
+
+        for i in range(1, 11):
+            valtmp = "productextra%d" % i
+            if hasattr(self, valtmp):
+                valtmpval = getattr(self, valtmp)
+                d_print("boardInfoArea productextra%d:%s" % (i, valtmpval))
+                self.data += chr(FruUtil.getTypeLength(valtmpval))
+                if valtmpval is not None:
+                    self.data += valtmpval
+            else:
+                break
+
+        self.data += chr(0xc1)
+        if len(self.data) > (self.size - 1):
+            incr = (len(self.data) - self.size) // 8 + 1
+            self.size += incr * 8
+        d_print("self.data:%d" % len(self.data))
+        d_print("self.size:%d" % self.size)
+
+        self.data = self.data[0:1] + chr(self.size // 8) + self.data[2:]
+        self.data = self.data.ljust((self.size - 1), chr(self.INITVALUE[0]))
+        checksum = FruUtil.checksum(self.data)
+        d_print("board info checksum:%x" % checksum)
+        self.data += chr(checksum)
+
+
+class MultiRecordArea(BaseArea):
+    pass
+
+
+class Field(object):
+
+    def __init__(self, fieldType="ASCII", fieldData=""):
+        self.fieldData = fieldData
+        self.fieldType = fieldType
+
+    @property
+    def fieldType(self):
+        return self.fieldType
+
+    @property
+    def fieldData(self):
+        return self.fieldData
+
+
+class ipmifru(BaseArea):
+    _BoardInfoArea = None
+    _ProductInfoArea = None
+    _InternalUseArea = None
+    _ChassisInfoArea = None
+    _multiRecordArea = None
+    _productinfoAreaOffset = BaseArea.INITVALUE
+    _boardInfoAreaOffset = BaseArea.INITVALUE
+    _internalUserAreaOffset = BaseArea.INITVALUE
+    _chassicInfoAreaOffset = BaseArea.INITVALUE
+    _multiRecordAreaOffset = BaseArea.INITVALUE
+    _bindata = None
+    _bodybin = None
+    _version = BaseArea.COMMON_HEAD_VERSION
+    _zeroCheckSum = None
+    _frusize = 256
+
+    def __str__(self):
+        tmpstr = ""
+        if self.boardInfoArea.isPresent:
+            tmpstr += "\nboardinfoarea: \n"
+            tmpstr += self.boardInfoArea.__str__()
+        if self.productInfoArea.isPresent:
+            tmpstr += "\nproductinfoarea: \n"
+            tmpstr += self.productInfoArea.__str__()
+        return tmpstr
+
+    def decodeBin(self, eeprom):
+        commonHead = eeprom[0:8]
+        d_print("decode version %x" % ord(commonHead[0]))
+        if ord(self.COMMON_HEAD_VERSION) != ord(commonHead[0]):
+            raise FruException("HEAD VERSION error,not Fru format!", -10)
+        if FruUtil.checksum(commonHead[0:7]) != ord(commonHead[7]):
+            strtemp = "check header checksum error [cal:%02x data:%02x]" % (
+                FruUtil.checksum(commonHead[0:7]), ord(commonHead[7]))
+            raise FruException(strtemp, -3)
+        if ord(commonHead[1]) != ord(self.INITVALUE):
+            d_print("Internal Use Area is present")
+            self.internalUseArea = InternalUseArea(
+                name="Internal Use Area", size=self.SUGGESTED_SIZE_INTERNAL_USE_AREA)
+            self.internalUseArea.isPresent = True
+            self.internalUserAreaOffset = ord(commonHead[1])
+            self.internalUseArea.data = eeprom[self.internalUserAreaOffset * 8: (
+                self.internalUserAreaOffset * 8 + self.internalUseArea.size)]
+        if ord(commonHead[2]) != ord(self.INITVALUE):
+            d_print("Chassis Info Area is present")
+            self.chassisInfoArea = ChassisInfoArea(
+                name="Chassis Info Area", size=self.SUGGESTED_SIZE_CHASSIS_INFO_AREA)
+            self.chassisInfoArea.isPresent = True
+            self.chassicInfoAreaOffset = ord(commonHead[2])
+            self.chassisInfoArea.data = eeprom[self.chassicInfoAreaOffset * 8: (
+                self.chassicInfoAreaOffset * 8 + self.chassisInfoArea.size)]
+        if ord(commonHead[3]) != ord(self.INITVALUE):
+            self.boardInfoArea = BoardInfoArea(
+                name="Board Info Area", size=self.SUGGESTED_SIZE_BOARD_INFO_AREA)
+            self.boardInfoArea.isPresent = True
+            self.boardInfoAreaOffset = ord(commonHead[3])
+            self.boardInfoArea.size = ord(
+                eeprom[self.boardInfoAreaOffset * 8 + 1]) * 8
+            d_print("Board Info Area is present size:%d" %
+                    (self.boardInfoArea.size))
+            self.boardInfoArea.data = eeprom[self.boardInfoAreaOffset * 8: (
+                self.boardInfoAreaOffset * 8 + self.boardInfoArea.size)]
+            if FruUtil.checksum(self.boardInfoArea.data[:-1]) != ord(self.boardInfoArea.data[-1:]):
+                strtmp = "check boardInfoArea checksum error[cal:%02x data:%02x]" %  \
+                    (FruUtil.checksum(
+                        self.boardInfoArea.data[:-1]), ord(self.boardInfoArea.data[-1:]))
+                raise FruException(strtmp, -3)
+            self.boardInfoArea.decodedata()
+        if ord(commonHead[4]) != ord(self.INITVALUE):
+            d_print("Product Info Area is present")
+            self.productInfoArea = ProductInfoArea(
+                name="Product Info Area ", size=self.SUGGESTED_SIZE_PRODUCT_INFO_AREA)
+            self.productInfoArea.isPresent = True
+            self.productinfoAreaOffset = ord(commonHead[4])
+            d_print("length offset value: %02x" %
+                    ord(eeprom[self.productinfoAreaOffset * 8 + 1]))
+            self.productInfoArea.size = ord(
+                eeprom[self.productinfoAreaOffset * 8 + 1]) * 8
+            d_print("Product Info Area is present size:%d" %
+                    (self.productInfoArea.size))
+
+            self.productInfoArea.data = eeprom[self.productinfoAreaOffset * 8: (
+                self.productinfoAreaOffset * 8 + self.productInfoArea.size)]
+            if FruUtil.checksum(self.productInfoArea.data[:-1]) != ord(self.productInfoArea.data[-1:]):
+                strtmp = "check productInfoArea checksum error [cal:%02x data:%02x]" % (
+                    FruUtil.checksum(self.productInfoArea.data[:-1]), ord(self.productInfoArea.data[-1:]))
+                raise FruException(strtmp, -3)
+            self.productInfoArea.decodedata()
+        if ord(commonHead[5]) != ord(self.INITVALUE):
+            self.multiRecordArea = MultiRecordArea(
+                name="MultiRecord record Area ")
+            d_print("MultiRecord record present")
+            self.multiRecordArea.isPresent = True
+            self.multiRecordAreaOffset = ord(commonHead[5])
+            self.multiRecordArea.data = eeprom[self.multiRecordAreaOffset * 8: (
+                self.multiRecordAreaOffset * 8 + self.multiRecordArea.size)]
+
+    def initDefault(self):
+        self.version = self.COMMON_HEAD_VERSION
+        self.internalUserAreaOffset = self.INITVALUE
+        self.chassicInfoAreaOffset = self.INITVALUE
+        self.boardInfoAreaOffset = self.INITVALUE
+        self.productinfoAreaOffset = self.INITVALUE
+        self.multiRecordAreaOffset = self.INITVALUE
+        self.zeroCheckSum = self.INITVALUE
+        self.offset = self.SUGGESTED_SIZE_COMMON_HEADER
+        self.productInfoArea = None
+        self.internalUseArea = None
+        self.boardInfoArea = None
+        self.chassisInfoArea = None
+        self.multiRecordArea = None
+        # self.recalcute()
+
+    @property
+    def version(self):
+        return self._version
+
+    @version.setter
+    def version(self, name):
+        self._version = name
+
+    @property
+    def internalUserAreaOffset(self):
+        return self._internalUserAreaOffset
+
+    @internalUserAreaOffset.setter
+    def internalUserAreaOffset(self, obj):
+        self._internalUserAreaOffset = obj
+
+    @property
+    def chassicInfoAreaOffset(self):
+        return self._chassicInfoAreaOffset
+
+    @chassicInfoAreaOffset.setter
+    def chassicInfoAreaOffset(self, obj):
+        self._chassicInfoAreaOffset = obj
+
+    @property
+    def productinfoAreaOffset(self):
+        return self._productinfoAreaOffset
+
+    @productinfoAreaOffset.setter
+    def productinfoAreaOffset(self, obj):
+        self._productinfoAreaOffset = obj
+
+    @property
+    def boardInfoAreaOffset(self):
+        return self._boardInfoAreaOffset
+
+    @boardInfoAreaOffset.setter
+    def boardInfoAreaOffset(self, obj):
+        self._boardInfoAreaOffset = obj
+
+    @property
+    def multiRecordAreaOffset(self):
+        return self._multiRecordAreaOffset
+
+    @multiRecordAreaOffset.setter
+    def multiRecordAreaOffset(self, obj):
+        self._multiRecordAreaOffset = obj
+
+    @property
+    def zeroCheckSum(self):
+        return self._zeroCheckSum
+
+    @zeroCheckSum.setter
+    def zeroCheckSum(self, obj):
+        self._zeroCheckSum = obj
+
+    @property
+    def productInfoArea(self):
+        return self._ProductInfoArea
+
+    @productInfoArea.setter
+    def productInfoArea(self, obj):
+        self._ProductInfoArea = obj
+
+    @property
+    def internalUseArea(self):
+        return self._InternalUseArea
+
+    @internalUseArea.setter
+    def internalUseArea(self, obj):
+        self.internalUseArea = obj
+
+    @property
+    def boardInfoArea(self):
+        return self._BoardInfoArea
+
+    @boardInfoArea.setter
+    def boardInfoArea(self, obj):
+        self._BoardInfoArea = obj
+
+    @property
+    def chassisInfoArea(self):
+        return self._ChassisInfoArea
+
+    @chassisInfoArea.setter
+    def chassisInfoArea(self, obj):
+        self._ChassisInfoArea = obj
+
+    @property
+    def multiRecordArea(self):
+        return self._multiRecordArea
+
+    @multiRecordArea.setter
+    def multiRecordArea(self, obj):
+        self._multiRecordArea = obj
+
+    @property
+    def bindata(self):
+        return self._bindata
+
+    @bindata.setter
+    def bindata(self, obj):
+        self._bindata = obj
+
+    @property
+    def bodybin(self):
+        return self._bodybin
+
+    @bodybin.setter
+    def bodybin(self, obj):
+        self._bodybin = obj
+
+    def recalcuteCommonHead(self):
+        self.bindata = ""
+        self.offset = self.SUGGESTED_SIZE_COMMON_HEADER
+        d_print("common Header %d" % self.offset)
+        d_print("fru eeprom size  %d" % self._frusize)
+        if self.internalUseArea is not None and self.internalUseArea.isPresent:
+            self.internalUserAreaOffset = self.offset // 8
+            self.offset += self.internalUseArea.size
+            d_print("internalUseArea is present offset:%d" % self.offset)
+
+        if self.chassisInfoArea is not None and self.chassisInfoArea.isPresent:
+            self.chassicInfoAreaOffset = self.offset // 8
+            self.offset += self.chassisInfoArea.size
+            d_print("chassisInfoArea is present offset:%d" % self.offset)
+
+        if self.boardInfoArea is not None and self.boardInfoArea.isPresent:
+            self.boardInfoAreaOffset = self.offset // 8
+            self.offset += self.boardInfoArea.size
+            d_print("boardInfoArea is present offset:%d" % self.offset)
+            d_print("boardInfoArea is present size:%d" %
+                    self.boardInfoArea.size)
+
+        if self.productInfoArea is not None and self.productInfoArea.isPresent:
+            self.productinfoAreaOffset = self.offset // 8
+            self.offset += self.productInfoArea.size
+            d_print("productInfoArea is present offset:%d" % self.offset)
+
+        if self.multiRecordArea is not None and self.multiRecordArea.isPresent:
+            self.multiRecordAreaOffset = self.offset // 8
+            d_print("multiRecordArea is present offset:%d" % self.offset)
+
+        if self.internalUserAreaOffset == self.INITVALUE:
+            self.internalUserAreaOffset = 0
+        if self.productinfoAreaOffset == self.INITVALUE:
+            self.productinfoAreaOffset = 0
+        if self.chassicInfoAreaOffset == self.INITVALUE:
+            self.chassicInfoAreaOffset = 0
+        if self.boardInfoAreaOffset == self.INITVALUE:
+            self.boardInfoAreaOffset = 0
+        if self.multiRecordAreaOffset == self.INITVALUE:
+            self.multiRecordAreaOffset = 0
+
+        self.zeroCheckSum = (0x100 - ord(self.version) - self.internalUserAreaOffset - self.chassicInfoAreaOffset - self.productinfoAreaOffset
+                             - self.boardInfoAreaOffset - self.multiRecordAreaOffset) & 0xff
+        d_print("zerochecksum:%x" % self.zeroCheckSum)
+        self.data = ""
+        self.data += chr(self.version[0]) + chr(self.internalUserAreaOffset) + chr(self.chassicInfoAreaOffset) + chr(
+            self.boardInfoAreaOffset) + chr(self.productinfoAreaOffset) + chr(self.multiRecordAreaOffset) + chr(self.INITVALUE[0]) + chr(self.zeroCheckSum)
+
+        self.bindata = self.data + self.bodybin
+        totallen = len(self.bindata)
+        d_print("totallen %d" % totallen)
+        if totallen < self._frusize:
+            self.bindata = self.bindata.ljust(self._frusize, chr(self.INITVALUE[0]))
+        else:
+            raise FruException('bin data more than %d' % self._frusize, -2)
+
+    def recalcutebin(self):
+        self.bodybin = ""
+        if self.internalUseArea is not None and self.internalUseArea.isPresent:
+            d_print("internalUseArea present")
+            self.bodybin += self.internalUseArea.data
+        if self.chassisInfoArea is not None and self.chassisInfoArea.isPresent:
+            d_print("chassisInfoArea present")
+            self.bodybin += self.chassisInfoArea.data
+        if self.boardInfoArea is not None and self.boardInfoArea.isPresent:
+            d_print("boardInfoArea present")
+            self.boardInfoArea.recalcute()
+            self.bodybin += self.boardInfoArea.data
+        if self.productInfoArea is not None and self.productInfoArea.isPresent:
+            d_print("productInfoAreapresent")
+            self.productInfoArea.recalcute()
+            self.bodybin += self.productInfoArea.data
+        if self.multiRecordArea is not None and self.multiRecordArea.isPresent:
+            d_print("multiRecordArea present")
+            self.bodybin += self.productInfoArea.data
+
+    def recalcute(self, fru_eeprom_size=256):
+        self._frusize = fru_eeprom_size
+        self.recalcutebin()
+        self.recalcuteCommonHead()
+
+    def setValue(self, area, field, value):
+        tmp_area = getattr(self, area, None)
+        if tmp_area is not None:
+            tmp_area.fruSetValue(field, value)
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/installer.conf b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/installer.conf
new file mode 100644
index 000000000..5e6fb414f
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/installer.conf
@@ -0,0 +1,5 @@
+CONSOLE_SPEED=115200
+ONIE_PLATFORM_EXTRA_CMDLINE_LINUX="intel_idle.max_cstate=0 idle=poll intel_iommu=on iommu=pt sdhci.debug_quirks2=0x1cc modprobe.blacklist=i2c_ismt,i2c_i801,r8169,spi_intel,spi_intel_platform,spi_intel_pci,pnd2_edac irqpoll"
+CONSOLE_PORT=0xe060
+CONSOLE_DEV=0
+ONIE_IMAGE_PART_SIZE=1048576
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/led_proc_init.soc b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/led_proc_init.soc
new file mode 100644
index 000000000..139597f9c
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/led_proc_init.soc
@@ -0,0 +1,2 @@
+
+
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/media_settings.json b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/media_settings.json
new file mode 100644
index 000000000..182cb3d69
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/media_settings.json
@@ -0,0 +1,56 @@
+{
+    "PORT_MEDIA_SETTINGS": {
+        "48": {
+            "Default": {
+                "pre1": {
+                    "lane0": "0x0000000A"
+                },
+                "main": {
+                    "lane0": "0x00000041"
+                },
+                "post1": {
+                    "lane0": "0x00000014"
+                }
+            }
+        },
+        "49": {
+            "Default": {
+                "pre1": {
+                    "lane0": "0x0000000A"
+                },
+                "main": {
+                    "lane0": "0x00000041"
+                },
+                "post1": {
+                    "lane0": "0x00000014"
+                }
+            }
+        },
+        "50": {
+            "Default": {
+                "pre1": {
+                    "lane0": "0x0000000A"
+                },
+                "main": {
+                    "lane0": "0x00000041"
+                },
+                "post1": {
+                    "lane0": "0x00000014"
+                }
+            }
+        },
+        "51": {
+            "Default": {
+                "pre1": {
+                    "lane0": "0x0000000A"
+                },
+                "main": {
+                    "lane0": "0x00000041"
+                },
+                "post1": {
+                    "lane0": "0x00000014"
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/monitor.py b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/monitor.py
new file mode 100644
index 000000000..37ed2168e
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/monitor.py
@@ -0,0 +1,457 @@
+#!/usr/bin/python3
+#   * onboard temperature sensors
+#   * FAN trays
+#   * PSU
+#
+import os
+import re
+from lxml import etree as ET
+import glob
+import json
+from decimal import Decimal
+from fru import ipmifru
+from cust_fru import CustFru
+
+
+MAILBOX_DIR = "/sys/bus/i2c/devices/"
+BOARD_ID_PATH = "/sys/module/platform_common/parameters/dfd_my_type"
+BOARD_AIRFLOW_PATH = "/etc/sonic/.airflow"
+
+
+CONFIG_NAME = "dev.xml"
+
+
+def byteTostr(val):
+    strtmp = ''
+    for value in val:
+        strtmp += chr(value)
+    return strtmp
+
+
+def typeTostr(val):
+    if isinstance(val, bytes):
+        strtmp = byteTostr(val)
+        return strtmp
+    return val
+
+
+def get_board_id():
+    if not os.path.exists(BOARD_ID_PATH):
+        return "NA"
+    with open(BOARD_ID_PATH) as fd:
+        id_str = fd.read().strip()
+    return "0x%x" % (int(id_str, 10))
+
+
+def getboardairflow():
+    if not os.path.exists(BOARD_AIRFLOW_PATH):
+        return "NA"
+    with open(BOARD_AIRFLOW_PATH) as fd:
+        airflow_str = fd.read().strip()
+    data = json.loads(airflow_str)
+    airflow = data.get("board", "NA")
+    return airflow
+
+
+boardid = get_board_id()
+boardairflow = getboardairflow()
+
+
+DEV_XML_FILE_LIST = [
+    "dev_" + boardid + "_" + boardairflow + ".xml",
+    "dev_" + boardid + ".xml",
+    "dev_" + boardairflow + ".xml",
+]
+
+
+def dev_file_read(path, offset, read_len):
+    retval = "ERR"
+    val_list = []
+    msg = ""
+    ret = ""
+    fd = -1
+
+    if not os.path.exists(path):
+        return False, "%s %s not found" % (retval, path)
+
+    try:
+        fd = os.open(path, os.O_RDONLY)
+        os.lseek(fd, offset, os.SEEK_SET)
+        ret = os.read(fd, read_len)
+        for item in ret:
+            val_list.append(item)
+    except Exception as e:
+        msg = str(e)
+        return False, "%s %s" % (retval, msg)
+    finally:
+        if fd > 0:
+            os.close(fd)
+    return True, val_list
+
+
+def getPMCreg(location):
+    retval = 'ERR'
+    if not os.path.isfile(location):
+        return "%s %s  notfound" % (retval, location)
+    try:
+        with open(location, 'r') as fd:
+            retval = fd.read()
+    except Exception as error:
+        return "ERR %s" % str(error)
+
+    retval = retval.rstrip('\r\n')
+    retval = retval.lstrip(" ")
+    return retval
+
+
+# Get a mailbox register
+def get_pmc_register(reg_name):
+    retval = 'ERR'
+    mb_reg_file = reg_name
+    filepath = glob.glob(mb_reg_file)
+    if len(filepath) == 0:
+        return "%s %s  notfound" % (retval, mb_reg_file)
+    mb_reg_file = filepath[0]
+    if not os.path.isfile(mb_reg_file):
+        # print mb_reg_file,  'not found !'
+        return "%s %s  notfound" % (retval, mb_reg_file)
+    try:
+        with open(mb_reg_file, 'rb') as fd:
+            retval = fd.read()
+        retval = typeTostr(retval)
+    except Exception as error:
+        retval = "%s %s read failed, msg: %s" % (retval, mb_reg_file, str(error))
+
+    retval = retval.rstrip('\r\n')
+    retval = retval.lstrip(" ")
+    return retval
+
+
+class checktype():
+    def __init__(self, test1):
+        self.test1 = test1
+
+    @staticmethod
+    def getValue(location, bit, data_type, coefficient=1, addend=0):
+        try:
+            value_t = get_pmc_register(location)
+            if value_t.startswith("ERR") or value_t.startswith("NA"):
+                return value_t
+            if data_type == 1:
+                return float('%.1f' % ((float(value_t) / 1000) + addend))
+            if data_type == 2:
+                return float('%.1f' % (float(value_t) / 100))
+            if data_type == 3:
+                psu_status = int(value_t, 16)
+                return (psu_status & (1 << bit)) >> bit
+            if data_type == 4:
+                return int(value_t, 10)
+            if data_type == 5:
+                return float('%.1f' % (float(value_t) / 1000 / 1000))
+            if data_type == 6:
+                return Decimal(float(value_t) * coefficient / 1000).quantize(Decimal('0.000'))
+            return value_t
+        except Exception as e:
+            value_t = "ERR %s" % str(e)
+            return value_t
+
+    # fanFRU
+    @staticmethod
+    def decodeBinByValue(retval):
+        fru = ipmifru()
+        fru.decodeBin(retval)
+        return fru
+
+    @staticmethod
+    def getfruValue(prob_t, root, val):
+        try:
+            ret, binval_bytes = dev_file_read(val, 0, 256)
+            if ret is False:
+                return binval_bytes
+            binval = byteTostr(binval_bytes)
+            fanpro = {}
+            ret = checktype.decodeBinByValue(binval)
+            fanpro['fan_type'] = ret.productInfoArea.productName
+            fanpro['hw_version'] = ret.productInfoArea.productVersion
+            fanpro['sn'] = ret.productInfoArea.productSerialNumber
+            fan_display_name_dict = status.getDecodValue(root, "fan_display_name")
+            fan_name = fanpro['fan_type'].strip()
+            if len(fan_display_name_dict) == 0:
+                return fanpro
+            if fan_name not in fan_display_name_dict:
+                prob_t['errcode'] = -1
+                prob_t['errmsg'] = '%s' % ("ERR fan name: %s not support" % fan_name)
+            else:
+                fanpro['fan_type'] = fan_display_name_dict[fan_name]
+            return fanpro
+        except Exception as error:
+            return "ERR " + str(error)
+
+    @staticmethod
+    def getslotfruValue(val):
+        try:
+            binval = checktype.getValue(val, 0, 0)
+            if binval.startswith("ERR"):
+                return binval
+            slotpro = {}
+            ret = checktype.decodeBinByValue(binval)
+            slotpro['slot_type'] = ret.boardInfoArea.boardProductName
+            slotpro['hw_version'] = ret.boardInfoArea.boardextra1
+            slotpro['sn'] = ret.boardInfoArea.boardSerialNumber
+            return slotpro
+        except Exception as error:
+            return "ERR " + str(error)
+
+    @staticmethod
+    def getpsufruValue(prob_t, root, val):
+        try:
+            psu_match = False
+            binval = checktype.getValue(val, 0, 0)
+            if binval.startswith("ERR"):
+                return binval
+            psupro = {}
+            ret = checktype.decodeBinByValue(binval)
+            psupro['type1'] = ret.productInfoArea.productPartModelName
+            psupro['sn'] = ret.productInfoArea.productSerialNumber
+            psupro['hw_version'] = ret.productInfoArea.productVersion
+            psu_dict = status.getDecodValue(root, "psutype")
+            psupro['type1'] = psupro['type1'].strip()
+            if len(psu_dict) == 0:
+                return psupro
+            for psu_name, display_name in psu_dict.items():
+                if psu_name.strip() == psupro['type1']:
+                    psupro['type1'] = display_name
+                    psu_match = True
+                    break
+            if psu_match is not True:
+                prob_t['errcode'] = -1
+                prob_t['errmsg'] = '%s' % ("ERR psu name: %s not support" % psupro['type1'])
+            return psupro
+        except Exception as error:
+            return "ERR " + str(error)
+
+    @staticmethod
+    def getpsucustfruValue(prob_t, root, val):
+        try:
+            psu_match = False
+            binval = checktype.getValue(val, 0, 0)
+            if binval.startswith("ERR"):
+                return binval
+            psupro = {}
+            custfru = CustFru()
+            custfru.decode(binval)
+            psupro['type1'] = custfru.product_name.strip()
+            psupro['sn'] = custfru.serial_number.strip().replace(chr(0), "")
+            psupro['hw_version'] = custfru.version.strip()
+            psu_dict = status.getDecodValue(root, "psutype")
+            psupro['type1'] = psupro['type1'].strip()
+            if len(psu_dict) == 0:
+                return psupro
+            for psu_name, display_name in psu_dict.items():
+                if psu_name.strip() == psupro['type1']:
+                    psupro['type1'] = display_name
+                    psu_match = True
+                    break
+            if psu_match is not True:
+                prob_t['errcode'] = -1
+                prob_t['errmsg'] = '%s' % ("ERR psu name: %s not support" % psupro['type1'])
+            return psupro
+        except Exception as error:
+            return "ERR " + str(error)
+
+
+class status():
+    def __init__(self, productname):
+        self.productname = productname
+
+    @staticmethod
+    def getETroot(filename):
+        tree = ET.parse(filename)
+        root = tree.getroot()
+        return root
+
+    @staticmethod
+    def getDecodValue(collection, decode):
+        decodes = collection.find('decode')
+        testdecode = decodes.find(decode)
+        test = {}
+        if testdecode is None:
+            return test
+        for neighbor in testdecode.iter('code'):
+            test[neighbor.attrib["key"]] = neighbor.attrib["value"]
+        return test
+
+    @staticmethod
+    def getfileValue(location):
+        return checktype.getValue(location, " ", " ")
+
+    @staticmethod
+    def getETValue(a, filename, tagname):
+        root = status.getETroot(filename)
+        for neighbor in root.iter(tagname):
+            prob_t = {}
+            prob_t.update(neighbor.attrib)
+            prob_t['errcode'] = 0
+            prob_t['errmsg'] = ''
+            for pros in neighbor.iter("property"):
+                ret = dict(list(neighbor.attrib.items()) + list(pros.attrib.items()))
+                if ret.get('e2type') == 'fru' and ret.get("name") == "fru":
+                    fruval = checktype.getfruValue(prob_t, root, ret["location"])
+                    if isinstance(fruval, str) and fruval.startswith("ERR"):
+                        prob_t['errcode'] = -1
+                        prob_t['errmsg'] = fruval
+                        break
+                    prob_t.update(fruval)
+                    continue
+
+                if ret.get("name") == "psu" and ret.get('e2type') == 'fru':
+                    psuval = checktype.getpsufruValue(prob_t, root, ret["location"])
+                    if isinstance(psuval, str) and psuval.startswith("ERR"):
+                        prob_t['errcode'] = -1
+                        prob_t['errmsg'] = psuval
+                        break
+                    prob_t.update(psuval)
+                    continue
+
+                if ret.get("name") == "psu" and ret.get('e2type') == 'custfru':
+                    psuval = checktype.getpsucustfruValue(prob_t, root, ret["location"])
+                    if isinstance(psuval, str) and psuval.startswith("ERR"):
+                        prob_t['errcode'] = -1
+                        prob_t['errmsg'] = psuval
+                        break
+                    prob_t.update(psuval)
+                    continue
+
+                if ret.get("gettype") == "config":
+                    prob_t[ret["name"]] = ret["value"]
+                    continue
+
+                if 'type' not in ret.keys():
+                    val = "0"
+                else:
+                    val = ret["type"]
+                if 'bit' not in ret.keys():
+                    bit = "0"
+                else:
+                    bit = ret["bit"]
+                if 'coefficient' not in ret.keys():
+                    coefficient = 1
+                else:
+                    coefficient = float(ret["coefficient"])
+                if 'addend' not in ret.keys():
+                    addend = 0
+                else:
+                    addend = float(ret["addend"])
+
+                s = checktype.getValue(ret["location"], int(bit), int(val), coefficient, addend)
+                if isinstance(s, str) and s.startswith("ERR"):
+                    prob_t['errcode'] = -1
+                    prob_t['errmsg'] = s
+                    break
+                if 'default' in ret.keys():
+                    rt = status.getDecodValue(root, ret['decode'])
+                    prob_t['errmsg'] = rt[str(s)]
+                    if str(s) != ret["default"]:
+                        prob_t['errcode'] = -1
+                        break
+                else:
+                    if 'decode' in ret.keys():
+                        rt = status.getDecodValue(root, ret['decode'])
+                        if (ret['decode'] == "psutype" and s.replace("\x00", "").rstrip() not in rt):
+                            prob_t['errcode'] = -1
+                            prob_t['errmsg'] = '%s' % ("ERR psu name: %s not support" %
+                                                       (s.replace("\x00", "").rstrip()))
+                        else:
+                            s = rt[str(s).replace("\x00", "").rstrip()]
+                name = ret["name"]
+                prob_t[name] = str(s)
+            a.append(prob_t)
+
+    @staticmethod
+    def getCPUValue(a, filename, tagname):
+        root = status.getETroot(filename)
+        for neighbor in root.iter(tagname):
+            location = neighbor.attrib["location"]
+
+        filepath = glob.glob(location)
+        if len(filepath) == 0:
+            return
+        location = filepath[0]
+        L = []
+        for dirpath, dirnames, filenames in os.walk(location):
+            for file in filenames:
+                if file.endswith("_input"):
+                    b = re.findall(r'temp(\d+)_input', file)
+                    idx = int(b[0])
+                    L.append(idx)
+            L = sorted(L)
+        for idx in L:
+            prob_t = {}
+            prob_t["name"] = getPMCreg("%s/temp%d_label" % (location, idx))
+            prob_t["temp"] = float(getPMCreg("%s/temp%d_input" % (location, idx))) / 1000
+            prob_t["alarm"] = float(getPMCreg("%s/temp%d_crit_alarm" % (location, idx))) / 1000
+            prob_t["crit"] = float(getPMCreg("%s/temp%d_crit" % (location, idx))) / 1000
+            prob_t["max"] = float(getPMCreg("%s/temp%d_max" % (location, idx))) / 1000
+            a.append(prob_t)
+
+    @staticmethod
+    def getFileName():
+        fpath = os.path.dirname(os.path.realpath(__file__))
+        for file in DEV_XML_FILE_LIST:
+            xml = fpath + "/" + file
+            if os.path.exists(xml):
+                return xml
+        return fpath + "/" + CONFIG_NAME
+
+    @staticmethod
+    def checkFan(ret):
+        _filename = status.getFileName()
+       # _filename = "/usr/local/bin/" + status.getFileName()
+        _tagname = "fan"
+        status.getETValue(ret, _filename, _tagname)
+
+    @staticmethod
+    def getTemp(ret):
+        _filename = status.getFileName()
+       # _filename = "/usr/local/bin/" + status.getFileName()
+        _tagname = "temp"
+        status.getETValue(ret, _filename, _tagname)
+
+    @staticmethod
+    def getPsu(ret):
+        _filename = status.getFileName()
+       # _filename = "/usr/local/bin/" + status.getFileName()
+        _tagname = "psu"
+        status.getETValue(ret, _filename, _tagname)
+
+    @staticmethod
+    def getCustPsu(ret):
+        _filename = status.getFileName()
+       # _filename = "/usr/local/bin/" + status.getFileName()
+        _tagname = "custpsu"
+        status.getETValue(ret, _filename, _tagname)
+
+
+    @staticmethod
+    def getcputemp(ret):
+        _filename = status.getFileName()
+        _tagname = "cpus"
+        status.getCPUValue(ret, _filename, _tagname)
+
+    @staticmethod
+    def getDcdc(ret):
+        _filename = status.getFileName()
+        _tagname = "dcdc"
+        status.getETValue(ret, _filename, _tagname)
+
+    @staticmethod
+    def getmactemp(ret):
+        _filename = status.getFileName()
+        _tagname = "mactemp"
+        status.getETValue(ret, _filename, _tagname)
+
+    @staticmethod
+    def getmacpower(ret):
+        _filename = status.getFileName()
+        _tagname = "macpower"
+        status.getETValue(ret, _filename, _tagname)
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/pcie.yaml b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/pcie.yaml
new file mode 100644
index 000000000..f236dba2b
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/pcie.yaml
@@ -0,0 +1,166 @@
+- bus: '00'
+  dev: '00'
+  fn: '0'
+  id: '1980'
+  name: 'Host bridge: Intel Corporation Atom Processor C3000 Series System Agent (rev
+    11)'
+- bus: '00'
+  dev: '04'
+  fn: '0'
+  id: 19a1
+  name: 'Host bridge: Intel Corporation Atom Processor C3000 Series Error Registers
+    (rev 11)'
+- bus: '00'
+  dev: '05'
+  fn: '0'
+  id: 19a2
+  name: 'Generic system peripheral [0807]: Intel Corporation Atom Processor C3000
+    Series Root Complex Event Collector (rev 11)'
+- bus: '00'
+  dev: '06'
+  fn: '0'
+  id: 19a3
+  name: 'PCI bridge: Intel Corporation Atom Processor C3000 Series Integrated QAT
+    Root Port (rev 11)'
+- bus: '00'
+  dev: 09
+  fn: '0'
+  id: 19a4
+  name: 'PCI bridge: Intel Corporation Atom Processor C3000 Series PCI Express Root
+    Port #0 (rev 11)'
+- bus: '00'
+  dev: 0a
+  fn: '0'
+  id: 19a5
+  name: 'PCI bridge: Intel Corporation Atom Processor C3000 Series PCI Express Root
+    Port #1 (rev 11)'
+- bus: '00'
+  dev: 0b
+  fn: '0'
+  id: 19a6
+  name: 'PCI bridge: Intel Corporation Atom Processor C3000 Series PCI Express Root
+    Port #2 (rev 11)'
+- bus: '00'
+  dev: 0e
+  fn: '0'
+  id: 19a8
+  name: 'PCI bridge: Intel Corporation Atom Processor C3000 Series PCI Express Root
+    Port #4 (rev 11)'
+- bus: '00'
+  dev: '12'
+  fn: '0'
+  id: 19ac
+  name: 'System peripheral: Intel Corporation Atom Processor C3000 Series SMBus Contoller
+    - Host (rev 11)'
+- bus: '00'
+  dev: '14'
+  fn: '0'
+  id: 19c2
+  name: 'SATA controller: Intel Corporation Atom Processor C3000 Series SATA Controller
+    1 (rev 11)'
+- bus: '00'
+  dev: '15'
+  fn: '0'
+  id: 19d0
+  name: 'USB controller: Intel Corporation Atom Processor C3000 Series USB 3.0 xHCI
+    Controller (rev 11)'
+- bus: '00'
+  dev: '16'
+  fn: '0'
+  id: 19d1
+  name: 'PCI bridge: Intel Corporation Atom Processor C3000 Series Integrated LAN
+    Root Port #0 (rev 11)'
+- bus: '00'
+  dev: '17'
+  fn: '0'
+  id: 19d2
+  name: 'PCI bridge: Intel Corporation Atom Processor C3000 Series Integrated LAN
+    Root Port #1 (rev 11)'
+- bus: '00'
+  dev: '18'
+  fn: '0'
+  id: 19d3
+  name: 'Communication controller: Intel Corporation Atom Processor C3000 Series ME
+    HECI 1 (rev 11)'
+- bus: '00'
+  dev: 1a
+  fn: '0'
+  id: 19d8
+  name: 'Serial controller: Intel Corporation Atom Processor C3000 Series HSUART Controller
+    (rev 11)'
+- bus: '00'
+  dev: 1a
+  fn: '1'
+  id: 19d8
+  name: 'Serial controller: Intel Corporation Atom Processor C3000 Series HSUART Controller
+    (rev 11)'
+- bus: '00'
+  dev: 1a
+  fn: '2'
+  id: 19d8
+  name: 'Serial controller: Intel Corporation Atom Processor C3000 Series HSUART Controller
+    (rev 11)'
+- bus: '00'
+  dev: 1c
+  fn: '0'
+  id: 19db
+  name: 'SD Host controller: Intel Corporation Device 19db (rev 11)'
+- bus: '00'
+  dev: 1f
+  fn: '0'
+  id: 19dc
+  name: 'ISA bridge: Intel Corporation Atom Processor C3000 Series LPC or eSPI (rev
+    11)'
+- bus: '00'
+  dev: 1f
+  fn: '2'
+  id: 19de
+  name: 'Memory controller: Intel Corporation Atom Processor C3000 Series Power Management
+    Controller (rev 11)'
+- bus: '00'
+  dev: 1f
+  fn: '4'
+  id: 19df
+  name: 'SMBus: Intel Corporation Atom Processor C3000 Series SMBus controller (rev
+    11)'
+- bus: '00'
+  dev: 1f
+  fn: '5'
+  id: 19e0
+  name: 'Serial bus controller [0c80]: Intel Corporation Atom Processor C3000 Series
+    SPI Controller (rev 11)'
+- bus: '01'
+  dev: '00'
+  fn: '0'
+  id: 19e2
+  name: 'Co-processor: Intel Corporation Atom Processor C3000 Series QuickAssist Technology
+    (rev 11)'
+- bus: '02'
+  dev: '00'
+  fn: '0'
+  id: b274
+  name: 'Ethernet controller: Broadcom Inc. and subsidiaries Device b274 (rev 02)'
+- bus: '06'
+  dev: '00'
+  fn: '0'
+  id: 15c6
+  name: 'Ethernet controller: Intel Corporation Ethernet Connection X553 1GbE (rev
+    11)'
+- bus: '06'
+  dev: '00'
+  fn: '1'
+  id: 15c6
+  name: 'Ethernet controller: Intel Corporation Ethernet Connection X553 1GbE (rev
+    11)'
+- bus: '07'
+  dev: '00'
+  fn: '0'
+  id: 15c7
+  name: 'Ethernet controller: Intel Corporation Ethernet Connection X553 1GbE (rev
+    11)'
+- bus: '07'
+  dev: '00'
+  fn: '1'
+  id: 15c7
+  name: 'Ethernet controller: Intel Corporation Ethernet Connection X553 1GbE (rev
+    11)'
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform.json b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform.json
new file mode 100644
index 000000000..a7920cf15
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform.json
@@ -0,0 +1,195 @@
+{
+    "chassis": {
+        "name": "M2-W6510-48GT4V",
+        "thermal_manager": false,
+        "status_led": {
+            "controllable": false,
+            "colors": ["green", "blinking_green", "amber", "blinking_amber"]
+        },
+        "components": [
+            {
+                "name": "CPU_CPLD"
+            },
+            {
+                "name": "CTRL_CPLD"
+            },
+            {
+                "name": "PORT_CPLD"
+            },
+            {
+                "name": "BIOS"
+            }
+        ],
+        "fans": [
+            {
+                "name": "Fantray1_1",
+                "speed": {
+                    "controllable": true,
+                    "minimum": 40,
+                    "maximum": 100
+                },
+                "status_led": {
+                    "available": false,
+                    "colors": ["off", "red", "amber", "green"]
+                }
+            },
+            {
+                "name": "Fantray2_1",
+                "speed": {
+                    "controllable": true,
+                    "minimum": 40,
+                    "maximum": 100
+                },
+                "status_led": {
+                    "available": false,
+                    "colors": ["off", "red", "amber", "green"]
+                }
+            }
+        ],
+        "fan_drawers":[
+            {
+                "name": "Fantray1",
+                "num_fans" : 1,
+                "status_led": {
+                    "controllable": false,
+                    "colors": ["amber", "green", "off"]
+                },
+                "fans": [
+                    {
+                        "name": "Fantray1_1",
+                        "speed": {
+                            "controllable": true,
+                            "minimum": 40,
+                            "maximum": 100
+                        },
+                        "status_led": {
+                            "available": false
+                        }
+                    }
+                ]
+            },
+            {
+                "name": "Fantray2",
+                "num_fans" : 1,
+                "status_led": {
+                    "controllable": false,
+                    "colors": ["amber", "green", "off"]
+                },
+                "fans": [
+                    {
+                        "name": "Fantray2_1",
+                        "speed": {
+                            "controllable": true,
+                            "minimum": 40,
+                            "maximum": 100
+                        },
+                        "status_led": {
+                            "available": false
+                        }
+                    }
+                ]
+            }
+        ],
+        "psus": [
+            {
+                "name": "Psu1",
+                "voltage": false,
+                "current": false,
+                "power": false,
+                "max_power": false,
+                "voltage_high_threshold": false,
+                "voltage_low_threshold": false,
+                "temperature": false,
+                "fans_target_speed": false,
+                "status_led": {
+                    "controllable": false
+                },
+                "fans": [
+                    {
+                        "name": "PSU1_FAN1",
+                        "speed": {
+                            "controllable": false,
+                            "minimum": 40,
+                            "maximum": 100
+                        },
+                        "status_led": {
+                            "available": false
+                        }
+                    }
+                ]
+            },
+            {
+                "name": "Psu2",
+                "voltage": false,
+                "current": false,
+                "power": false,
+                "max_power": false,
+                "voltage_high_threshold": false,
+                "voltage_low_threshold": false,
+                "temperature": false,
+                "fans_target_speed": false,
+                "status_led": {
+                    "controllable": false
+                },
+                "fans": [
+                    {
+                        "name": "PSU2_FAN1",
+                        "speed": {
+                            "controllable": false,
+                            "minimum": 40,
+                            "maximum": 100
+                        },
+                        "status_led": {
+                            "available": false
+                        }
+                    }
+                ]
+            }
+        ],
+        "thermals": [
+            {
+                "name": "ASIC_TEMP",
+                "controllable": false,
+                "low-crit-threshold": true,
+                "high-crit-threshold": true,
+                "low-threshold": true,
+                "high-threshold": true,
+                "minimum-recorded": true,
+                "maximum-recorded": true
+            },
+            {
+                "name": "CPU_TEMP",
+                "controllable": false,
+                "low-crit-threshold": true,
+                "high-crit-threshold": true,
+                "low-threshold": true,
+                "high-threshold": true,
+                "minimum-recorded": true,
+                "maximum-recorded": true
+            },
+            {
+                "name": "INLET_TEMP",
+                "controllable": false,
+                "low-crit-threshold": true,
+                "high-crit-threshold": true,
+                "low-threshold": true,
+                "high-threshold": true,
+                "minimum-recorded": true,
+                "maximum-recorded": true
+            },
+            {
+                "name": "OUTLET_TEMP",
+                "controllable": false,
+                "low-crit-threshold": true,
+                "high-crit-threshold": true,
+                "low-threshold": true,
+                "high-threshold": true,
+                "minimum-recorded": true,
+                "maximum-recorded": true
+            }
+        ],
+        "modules": [],
+        "sfps": []
+    },
+    "interfaces": {}
+}
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform_asic b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform_asic
new file mode 100644
index 000000000..960467652
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform_asic
@@ -0,0 +1 @@
+broadcom
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform_components.json b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform_components.json
new file mode 100644
index 000000000..1cb8ac113
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform_components.json
@@ -0,0 +1,13 @@
+{
+    "chassis": {
+        "M2-W6510-48GT4V": {
+            "component": {
+                "CPU_CPLD": { },
+                "CTRL_CPLD": { },
+                "PORT_CPLD": { },
+                "BIOS": { }
+            }
+        }
+    }
+}
+
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform_env.conf b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform_env.conf
new file mode 100644
index 000000000..283e1c0ce
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/platform_env.conf
@@ -0,0 +1 @@
+usemsi=1
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/plugins/sfputil.py b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/plugins/sfputil.py
new file mode 100644
index 000000000..f7e00bb93
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/plugins/sfputil.py
@@ -0,0 +1,249 @@
+# sfputil.py
+#
+# Platform-specific SFP transceiver interface for SONiC
+#
+
+try:
+    import time
+    import os
+    import traceback
+    from sonic_sfp.sfputilbase import SfpUtilBase
+except ImportError as e:
+    raise ImportError("%s - required module not found" % str(e))
+
+class SfpUtil(SfpUtilBase):
+    """Platform-specific SfpUtil class"""
+
+    PORT_START = 0
+    PORT_END = 51
+    PORTS_IN_BLOCK = 52
+
+    EEPROM_OFFSET = -36
+    SFP_DEVICE_TYPE = "optoe2"
+    QSFP_DEVICE_TYPE = "optoe1"
+    I2C_MAX_ATTEMPT = 3
+
+    _port_to_eeprom_mapping = {}
+    port_to_i2cbus_mapping ={}
+
+    @property
+    def port_start(self):
+        return self.PORT_START
+
+    @property
+    def port_end(self):
+        return self.PORT_END
+
+    @property
+    def qsfp_ports(self):
+        return []
+
+    @property
+    def port_to_eeprom_mapping(self):
+        return self._port_to_eeprom_mapping
+
+    def __init__(self):
+        for x in range(self.PORT_START, self.PORTS_IN_BLOCK):
+            self.port_to_i2cbus_mapping[x] = x + self.EEPROM_OFFSET - 1
+        self.port_to_i2cbus_mapping[48] = 12
+        self.port_to_i2cbus_mapping[49] = 11
+        self.port_to_i2cbus_mapping[50] = 14
+        self.port_to_i2cbus_mapping[51] = 13
+        SfpUtilBase.__init__(self)
+
+    def _sfp_read_file_path(self, file_path, offset, num_bytes):
+        attempts = 0
+        while attempts < self.I2C_MAX_ATTEMPT:
+            try:
+                file_path.seek(offset)
+                read_buf = file_path.read(num_bytes)
+            except Exception:
+                attempts += 1
+                time.sleep(0.05)
+            return True, read_buf
+        return False, None
+
+    def _sfp_eeprom_present(self, sysfs_sfp_i2c_client_eeprompath, offset):
+        """Tries to read the eeprom file to determine if the
+        device/sfp is present or not. If sfp present, the read returns
+        valid bytes. If not, read returns error 'Connection timed out"""
+
+        if not os.path.exists(sysfs_sfp_i2c_client_eeprompath):
+            return False
+        with open(sysfs_sfp_i2c_client_eeprompath, "rb", buffering=0) as sysfsfile:
+            rv, buf = self._sfp_read_file_path(sysfsfile, offset, 1)
+            return rv
+
+    def _add_new_sfp_device(self, sysfs_sfp_i2c_adapter_path, devaddr, devtype):
+        try:
+            sysfs_nd_path = "%s/new_device" % sysfs_sfp_i2c_adapter_path
+
+            # Write device address to new_device file
+            nd_str = "%s %s" % (devtype, hex(devaddr))
+            with open(sysfs_nd_path, "w") as nd_file:
+                nd_file.write(nd_str)
+
+        except Exception as err:
+            print("Error writing to new device file: %s" % str(err))
+            return 1
+        else:
+            return 0
+
+    def _get_port_eeprom_path(self, port_num, devid):
+        sysfs_i2c_adapter_base_path = ""
+
+        if port_num in self.port_to_eeprom_mapping:
+            sysfs_sfp_i2c_client_eeprom_path = self.port_to_eeprom_mapping[port_num]
+        else:
+            sysfs_i2c_adapter_base_path = "/sys/class/i2c-adapter"
+
+            i2c_adapter_id = self._get_port_i2c_adapter_id(port_num)
+            if i2c_adapter_id is None:
+                print("Error getting i2c bus num")
+                return None
+
+            # Get i2c virtual bus path for the sfp
+            sysfs_sfp_i2c_adapter_path = "%s/i2c-%s" % (sysfs_i2c_adapter_base_path,
+                                                        str(i2c_adapter_id))
+
+            # If i2c bus for port does not exist
+            if not os.path.exists(sysfs_sfp_i2c_adapter_path):
+                print("Could not find i2c bus %s. Driver not loaded?" % sysfs_sfp_i2c_adapter_path)
+                return None
+
+            sysfs_sfp_i2c_client_path = "%s/%s-00%s" % (sysfs_sfp_i2c_adapter_path,
+                                                        str(i2c_adapter_id),
+                                                        hex(devid)[-2:])
+
+            # If sfp device is not present on bus, Add it
+            if not os.path.exists(sysfs_sfp_i2c_client_path):
+                if port_num in self.qsfp_ports:
+                    ret = self._add_new_sfp_device(
+                            sysfs_sfp_i2c_adapter_path, devid, self.QSFP_DEVICE_TYPE)
+                else:
+                    ret = self._add_new_sfp_device(
+                            sysfs_sfp_i2c_adapter_path, devid, self.SFP_DEVICE_TYPE)
+                if ret != 0:
+                    print("Error adding sfp device")
+                    return None
+
+            sysfs_sfp_i2c_client_eeprom_path = "%s/eeprom" % sysfs_sfp_i2c_client_path
+
+        return sysfs_sfp_i2c_client_eeprom_path
+
+    def _read_eeprom_specific_bytes(self, sysfsfile_eeprom, offset, num_bytes):
+        eeprom_raw = []
+        for i in range(0, num_bytes):
+            eeprom_raw.append("0x00")
+
+        rv, raw = self._sfp_read_file_path(sysfsfile_eeprom, offset, num_bytes)
+        if rv is False:
+            return None
+
+        try:
+            for n in range(0, num_bytes):
+                if isinstance(raw[n], str):
+                    eeprom_raw[n] = hex(ord(raw[n]))[2:].zfill(2)
+                elif isinstance(raw[n], int):
+                    eeprom_raw[n] = hex(raw[n])[2:].zfill(2)
+        except Exception as e:
+            return None
+
+        return eeprom_raw
+
+    def get_eeprom_dom_raw(self, port_num):
+        if port_num in self.qsfp_ports:
+            # QSFP DOM EEPROM is also at addr 0x50 and thus also stored in eeprom_ifraw
+            return None
+        # Read dom eeprom at addr 0x51
+        return self._read_eeprom_devid(port_num, self.IDENTITY_EEPROM_ADDR, 256)
+
+    def get_presence(self, port_num):
+        # Check for invalid port_num
+        if port_num < self.port_start or port_num > self.port_end:
+            return False
+
+        presence_path = "/sys/wb_plat/sff/sff%d/present" % (port_num+1)
+
+        try:
+            with open(presence_path, "rb") as data:
+                presence_data = data.read(2)
+                if presence_data == "":
+                    return False
+                result = int(presence_data, 16)
+        except IOError:
+            return False
+
+        if result == 1:
+            return True
+        return False
+
+    def get_low_power_mode(self, port_num):
+        # Check for invalid port_num
+
+        return True
+
+    def set_low_power_mode(self, port_num, lpmode):
+        # Check for invalid port_num
+
+        return True
+
+    def reset(self, port_num):
+        # Check for invalid port_num
+        if port_num < self.port_start or port_num > self.port_end:
+            return False
+
+        return True
+
+    def get_transceiver_change_event(self, timeout=0):
+        return False, {}
+
+    def get_highest_temperature(self):
+        offset = 0
+        hightest_temperature = -9999
+
+        presence_flag = False
+        read_eeprom_flag = False
+        temperature_valid_flag = False
+
+        for port in range(48, self.PORTS_IN_BLOCK):
+            if self.get_presence(port) is False:
+                continue
+
+            presence_flag = True
+            if port in self.qsfp_ports:
+                offset = 22
+            else:
+                offset = 96
+            size = 2
+
+            eeprom_path = self._get_port_eeprom_path(port, 0x50)
+            try:
+                with open(eeprom_path, mode="rb", buffering=0) as eeprom:
+                    read_eeprom_flag = True
+                    eeprom_raw = self._read_eeprom_specific_bytes(eeprom, 0x100 + offset, size)
+                    msb = int(eeprom_raw[0], 16)
+                    lsb = int(eeprom_raw[1], 16)
+                    result = (msb << 8) | (lsb & 0xff)
+                    result = float(result / 256.0)
+                    if -50 <= result <= 200:
+                        temperature_valid_flag = True
+                        hightest_temperature = max(hightest_temperature, result)
+            except Exception:
+                print(traceback.format_exc())
+
+        # all port not presence
+        if presence_flag is False:
+            hightest_temperature = -10000
+
+        # all port read eeprom fail
+        elif read_eeprom_flag is False:
+            hightest_temperature = -9999
+
+        # all port temperature invalid
+        elif read_eeprom_flag is True and temperature_valid_flag is False:
+            hightest_temperature = -10000
+
+        hightest_temperature = round(hightest_temperature, 2)
+
+        return hightest_temperature
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/plugins/ssd_util.py b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/plugins/ssd_util.py
new file mode 100644
index 000000000..95ca23e8b
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/plugins/ssd_util.py
@@ -0,0 +1,112 @@
+#
+# ssd_util.py
+#
+# Generic implementation of the SSD health API
+# SSD models supported:
+#  - InnoDisk
+#  - StorFly
+#  - Virtium
+
+try:
+    import subprocess
+    from sonic_platform_base.sonic_ssd.ssd_base import SsdBase
+except ImportError as e:
+    raise ImportError (str(e) + "- required module not found")
+
+HEALTH_CMD = "cat /sys/kernel/debug/mmc0/mmc0:0001/ext_csd | cut -c 537-538"
+SERIAL_CMD = "cat /sys/bus/mmc/devices/mmc0\\:0001/serial"
+FIRMWARE_CMD = "cat /sys/kernel/debug/mmc0/mmc0:0001/ext_csd | cut -c 509-522"
+NOT_AVAILABLE = "N/A"
+
+class SsdUtil(SsdBase):
+    """
+    Generic implementation of the SSD health API
+    """
+    def __init__(self, diskdev):
+        self.model = "KLMCG4JETD-B041"
+        self.temperature = NOT_AVAILABLE
+        self.vendor_ssd_info = "====No vendor information===="
+        self.health_list = [100,90,80,70,60,50,40,30,20,10,0]
+        try:
+            life_time = self._execute_shell(HEALTH_CMD)
+            if int(life_time) in range(1,12):
+                self.health = self.health_list[int(life_time) - 1]
+            else:
+                self.health = NOT_AVAILABLE
+        except Exception as e:
+            self.health = NOT_AVAILABLE
+
+        try:
+            self.firmware = self._execute_shell(FIRMWARE_CMD)
+        except Exception as e:
+            self.firmware = NOT_AVAILABLE
+
+        try:
+            serial = self._execute_shell(SERIAL_CMD)
+            self.serial = serial.replace("0x",'')
+        except Exception as e:
+            self.serial = NOT_AVAILABLE
+
+    def _execute_shell(self, cmd):
+        status, output = subprocess.getstatusoutput(cmd)
+        if status:
+            return None
+
+        return output
+
+    def get_health(self):
+        """
+        Retrieves current disk health in percentages
+
+        Returns:
+            A float number of current ssd health
+            e.g. 83.5
+        """
+        return self.health
+
+    def get_temperature(self):
+        """
+        Retrieves current disk temperature in Celsius
+
+        Returns:
+            A float number of current temperature in Celsius
+            e.g. 40.1
+        """
+        return self.temperature
+
+    def get_model(self):
+        """
+        Retrieves model for the given disk device
+
+        Returns:
+            A string holding disk model as provided by the manufacturer
+        """
+        return self.model
+
+    def get_firmware(self):
+        """
+        Retrieves firmware version for the given disk device
+
+        Returns:
+            A string holding disk firmware version as provided by the manufacturer
+        """
+        return self.firmware
+
+    def get_serial(self):
+        """
+        Retrieves serial number for the given disk device
+
+        Returns:
+            A string holding disk serial number as provided by the manufacturer
+        """
+        return self.serial
+
+    def get_vendor_output(self):
+        """
+        Retrieves vendor specific data for the given disk device
+
+        Returns:
+            A string holding some vendor specific disk information
+        """
+        return self.vendor_ssd_info
+
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/pmon_daemon_control.json b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/pmon_daemon_control.json
new file mode 100644
index 000000000..94592fa8c
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/pmon_daemon_control.json
@@ -0,0 +1,3 @@
+{
+    "skip_ledd": true
+}
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/postinit_cmd_file.soc b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/postinit_cmd_file.soc
new file mode 100644
index 000000000..371d9a71e
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/postinit_cmd_file.soc
@@ -0,0 +1,29 @@
+phy ge1 0x17 0x0D19
+phy ge1 0x15 0x4801
+phy ge1 0x17 0x0D18
+phy ge1 0x15 0x0D07
+phy ge1 0x17 0x0D19
+phy ge1 0x15 0xC801
+init port
+sleep 0 200
+ 
+phy ge9 0x17 0x0D19
+phy ge9 0x15 0x4801
+phy ge9 0x17 0x0D18
+phy ge9 0x15 0x0D07
+phy ge9 0x17 0x0D19
+phy ge9 0x15 0xC801
+init port
+sleep 0 200
+ 
+phy ge17 0x17 0x0D19
+phy ge17 0x15 0x4801
+phy ge17 0x17 0x0D18
+phy ge17 0x15 0x0D07
+phy ge17 0x17 0x0D19
+phy ge17 0x15 0xC801
+init port
+sleep 0 200
+
+led auto on
+led start
\ No newline at end of file
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/preinit_cmd_file.soc b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/preinit_cmd_file.soc
new file mode 100644
index 000000000..5566f9f88
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/preinit_cmd_file.soc
@@ -0,0 +1,2 @@
+m0 load 0 0x0 /usr/share/sonic/platform/linkscan_led.bin
+m0 load 0 0x3800 /usr/share/sonic/platform/custom_led.bin
\ No newline at end of file
diff --git a/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/system_health_monitoring_config.json b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/system_health_monitoring_config.json
new file mode 100644
index 000000000..a864df64a
--- /dev/null
+++ b/device/micas/x86_64-micas_m2-w6510-48gt4v-r0/system_health_monitoring_config.json
@@ -0,0 +1,11 @@
+{
+    "services_to_ignore": [],
+    "devices_to_ignore": ["PSU2_FAN1","PSU1_FAN1","psu.power_threshold","psu.temperature","psu.voltage"],
+    "user_defined_checkers": [],
+    "polling_interval": 60,
+    "led_color": {
+        "fault"  : "blink_yellow",
+        "normal" : "green",
+        "booting": "blink_green"
+    }
+}
\ No newline at end of file
diff --git a/platform/broadcom/one-image.mk b/platform/broadcom/one-image.mk
index 111a45896..ac33a6f90 100755
--- a/platform/broadcom/one-image.mk
+++ b/platform/broadcom/one-image.mk
@@ -92,7 +92,8 @@ $(SONIC_ONE_IMAGE)_LAZY_INSTALLS += $(DELL_S6000_PLATFORM_MODULE) \
                                $(UFISPACE_S7801_54XS_PLATFORM_MODULE) \
                                $(UFISPACE_S6301_56ST_PLATFORM_MODULE) \
                                $(MICAS_M2_W6510_48V8C_PLATFORM_MODULE) \
-                               $(MICAS_M2_W6520_48C8QC_PLATFORM_MODULE)
+                               $(MICAS_M2_W6520_48C8QC_PLATFORM_MODULE) \
+                               $(MICAS_M2_W6510_48GT4V_PLATFORM_MODULE) 
 
 $(SONIC_ONE_IMAGE)_LAZY_BUILD_INSTALLS = $(BRCM_OPENNSL_KERNEL) $(BRCM_DNX_OPENNSL_KERNEL)
 ifeq ($(INSTALL_DEBUG_TOOLS),y)
diff --git a/platform/broadcom/platform-modules-micas.mk b/platform/broadcom/platform-modules-micas.mk
index d14ca7e09..704930cc0 100644
--- a/platform/broadcom/platform-modules-micas.mk
+++ b/platform/broadcom/platform-modules-micas.mk
@@ -16,3 +16,11 @@ export MICAS_M2_W6520_48C8QC_PLATFORM_MODULE_VERSION
 MICAS_M2_W6520_48C8QC_PLATFORM_MODULE = platform-modules-micas-m2-w6520-48c8qc_$(MICAS_M2_W6520_48C8QC_PLATFORM_MODULE_VERSION)_amd64.deb
 $(MICAS_M2_W6520_48C8QC_PLATFORM_MODULE)_PLATFORM = x86_64-micas_m2-w6520-48c8qc-r0
 $(eval $(call add_extra_package,$(MICAS_M2_W6510_48V8C_PLATFORM_MODULE),$(MICAS_M2_W6520_48C8QC_PLATFORM_MODULE)))
+
+## M2-W6510-48GT4V
+MICAS_M2_W6510_48GT4V_PLATFORM_MODULE_VERSION = 1.0
+export MICAS_M2_W6510_48GT4V_PLATFORM_MODULE_VERSION
+
+MICAS_M2_W6510_48GT4V_PLATFORM_MODULE = platform-modules-micas-m2-w6510-48gt4v_$(MICAS_M2_W6510_48GT4V_PLATFORM_MODULE_VERSION)_amd64.deb
+$(MICAS_M2_W6510_48GT4V_PLATFORM_MODULE)_PLATFORM = x86_64-micas_m2-w6510-48gt4v-r0
+$(eval $(call add_extra_package,$(MICAS_M2_W6510_48V8C_PLATFORM_MODULE),$(MICAS_M2_W6510_48GT4V_PLATFORM_MODULE)))
diff --git a/platform/broadcom/sonic-platform-modules-micas/debian/control b/platform/broadcom/sonic-platform-modules-micas/debian/control
index 2a7fac0aa..2a8f0534a 100644
--- a/platform/broadcom/sonic-platform-modules-micas/debian/control
+++ b/platform/broadcom/sonic-platform-modules-micas/debian/control
@@ -10,4 +10,8 @@ Description: kernel modules for platform devices such as fan, led, sfp
 
 Package: platform-modules-micas-m2-w6520-48c8qc
 Architecture: amd64
-Description: kernel modules for platform devices such as fan, led, sfp
\ No newline at end of file
+Description: kernel modules for platform devices such as fan, led, sfp
+
+Package: platform-modules-micas-m2-w6510-48gt4v
+Architecture: amd64
+Description: kernel modules for platform devices such as fan, led, sfp
diff --git a/platform/broadcom/sonic-platform-modules-micas/debian/platform-modules-micas-m2-w6510-48gt4v.install b/platform/broadcom/sonic-platform-modules-micas/debian/platform-modules-micas-m2-w6510-48gt4v.install
new file mode 100644
index 000000000..66df2662a
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/debian/platform-modules-micas-m2-w6510-48gt4v.install
@@ -0,0 +1 @@
+m2-w6510-48gt4v/modules/sonic_platform-1.0-py3-none-any.whl /usr/share/sonic/device/x86_64-micas_m2-w6510-48gt4v-r0
diff --git a/platform/broadcom/sonic-platform-modules-micas/debian/platform-modules-micas-m2-w6510-48gt4v.postinst b/platform/broadcom/sonic-platform-modules-micas/debian/platform-modules-micas-m2-w6510-48gt4v.postinst
new file mode 100644
index 000000000..a8132f4f6
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/debian/platform-modules-micas-m2-w6510-48gt4v.postinst
@@ -0,0 +1,10 @@
+#!/bin/sh
+# postinst
+
+kernel_version=$(uname -r)
+
+if [ -e /boot/System.map-${kernel_version} ]; then
+    depmod -a -F /boot/System.map-${kernel_version} ${kernel_version} || true
+fi
+
+#DEBHELPER#
diff --git a/platform/broadcom/sonic-platform-modules-micas/debian/rule.mk b/platform/broadcom/sonic-platform-modules-micas/debian/rule.mk
index b5e33f754..85404c5da 100644
--- a/platform/broadcom/sonic-platform-modules-micas/debian/rule.mk
+++ b/platform/broadcom/sonic-platform-modules-micas/debian/rule.mk
@@ -2,5 +2,6 @@ currentdir = $(shell pwd)
 
 MODULE_DIRS := m2-w6510-48v8c
 MODULE_DIRS += m2-w6520-48c8qc
+MODULE_DIRS += m2-w6510-48gt4v
 
 export MODULE_DIRS
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/Makefile b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/Makefile
new file mode 100644
index 000000000..a0c262841
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/Makefile
@@ -0,0 +1,28 @@
+PWD		= $(shell pwd)
+DIR_KERNEL_SRC = $(PWD)/modules/driver
+EXTRA_CFLAGS:= -I$(M)/include
+EXTRA_CFLAGS+= -Wall
+SUB_BUILD_DIR = $(PWD)/build
+INSTALL_DIR = $(SUB_BUILD_DIR)/$(KERNEL_SRC)/$(INSTALL_MOD_DIR)
+INSTALL_SCRIPT_DIR = $(SUB_BUILD_DIR)/usr/local/bin
+INSTALL_LIB_DIR = $(SUB_BUILD_DIR)/usr/lib/python3/dist-packages
+INSTALL_SYSFS_CFG_DIR = $(SUB_BUILD_DIR)/etc/plat_sysfs_cfg
+INSTALL_SERVICE_DIR = $(SUB_BUILD_DIR)/lib/systemd/system
+
+all:
+	$(MAKE) -C $(KBUILD_OUTPUT) M=$(DIR_KERNEL_SRC) modules
+	@if [ ! -d ${INSTALL_DIR} ]; then mkdir -p ${INSTALL_DIR} ;fi
+	cp -r $(DIR_KERNEL_SRC)/*.ko $(INSTALL_DIR)
+	@if [ ! -d ${INSTALL_SCRIPT_DIR} ]; then mkdir -p ${INSTALL_SCRIPT_DIR} ;fi
+	cp -r $(PWD)/config/*  $(INSTALL_SCRIPT_DIR)
+	@if [ ! -d ${INSTALL_LIB_DIR} ]; then mkdir -p ${INSTALL_LIB_DIR} ;fi
+	@if [ -d $(PWD)/hal-config/ ]; then cp -r $(PWD)/hal-config/* ${INSTALL_LIB_DIR} ;fi
+	@if [ ! -d ${INSTALL_SYSFS_CFG_DIR} ]; then mkdir -p ${INSTALL_SYSFS_CFG_DIR} ;fi
+	@if [ -d $(PWD)/plat_sysfs_cfg/ ]; then cp -r $(PWD)/plat_sysfs_cfg/* ${INSTALL_SYSFS_CFG_DIR} ;fi
+	@if [ ! -d ${INSTALL_SERVICE_DIR} ]; then mkdir -p ${INSTALL_SERVICE_DIR} ;fi
+	@if [ -d $(PWD)/service/ ]; then cp -r $(PWD)/service/* ${INSTALL_SERVICE_DIR} ;fi
+clean:
+	rm -f ${DIR_KERNEL_SRC}/*.o ${DIR_KERNEL_SRC}/*.ko ${DIR_KERNEL_SRC}/*.mod.c ${DIR_KERNEL_SRC}/.*.cmd
+	rm -f ${DIR_KERNEL_SRC}/Module.markers ${DIR_KERNEL_SRC}/Module.symvers ${DIR_KERNEL_SRC}/modules.order
+	rm -rf ${DIR_KERNEL_SRC}/.tmp_versions
+	rm -rf $(SUB_BUILD_DIR)
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/config/x86_64_micas_m2_w6510_48gt4v_r0_config.py b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/config/x86_64_micas_m2_w6510_48gt4v_r0_config.py
new file mode 100644
index 000000000..28c9a5f21
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/config/x86_64_micas_m2_w6510_48gt4v_r0_config.py
@@ -0,0 +1,751 @@
+#!/usr/bin/python
+#
+from platform_common import *
+
+STARTMODULE = {
+    "hal_fanctrl": 1,
+    "hal_ledctrl": 1,
+    "avscontrol": 0,
+    "dev_monitor": 1,
+    "reboot_cause": 1,
+    "pmon_syslog": 1,
+    "sff_temp_polling": 1,
+    "generate_airflow": 1,
+    "set_eth_mac": 1,
+    "drv_update": 0,
+}
+
+MANUINFO_CONF = {
+    "bios": {
+        "key": "BIOS",
+        "head": True,
+        "next": "onie"
+    },
+    "bios_vendor": {
+        "parent": "bios",
+        "key": "Vendor",
+        "cmd": "dmidecode -t 0 |grep Vendor",
+        "pattern": r".*Vendor",
+        "separator": ":",
+        "arrt_index": 1,
+    },
+    "bios_version": {
+        "parent": "bios",
+        "key": "Version",
+        "cmd": "dmidecode -t 0 |grep Version",
+        "pattern": r".*Version",
+        "separator": ":",
+        "arrt_index": 2,
+    },
+    "bios_date": {
+        "parent": "bios",
+        "key": "Release Date",
+        "cmd": "dmidecode -t 0 |grep Release",
+        "pattern": r".*Release Date",
+        "separator": ":",
+        "arrt_index": 3,
+    },
+    "onie": {
+        "key": "ONIE",
+        "next": "cpu"
+    },
+    "onie_date": {
+        "parent": "onie",
+        "key": "Build Date",
+        "file": "/host/machine.conf",
+        "pattern": r"^onie_build_date",
+        "separator": "=",
+        "arrt_index": 1,
+    },
+    "onie_version": {
+        "parent": "onie",
+        "key": "Version",
+        "file": "/host/machine.conf",
+        "pattern": r"^onie_version",
+        "separator": "=",
+        "arrt_index": 2,
+    },
+
+    "cpu": {
+        "key": "CPU",
+        "next": "cpld"
+    },
+    "cpu_vendor": {
+        "parent": "cpu",
+        "key": "Vendor",
+        "cmd": "dmidecode --type processor |grep Manufacturer",
+        "pattern": r".*Manufacturer",
+        "separator": ":",
+        "arrt_index": 1,
+    },
+    "cpu_model": {
+        "parent": "cpu",
+        "key": "Device Model",
+        "cmd": "dmidecode --type processor | grep Version",
+        "pattern": r".*Version",
+        "separator": ":",
+        "arrt_index": 2,
+    },
+    "cpu_core": {
+        "parent": "cpu",
+        "key": "Core Count",
+        "cmd": "dmidecode --type processor | grep \"Core Count\"",
+        "pattern": r".*Core Count",
+        "separator": ":",
+        "arrt_index": 3,
+    },
+    "cpu_thread": {
+        "parent": "cpu",
+        "key": "Thread Count",
+        "cmd": "dmidecode --type processor | grep \"Thread Count\"",
+        "pattern": r".*Thread Count",
+        "separator": ":",
+        "arrt_index": 4,
+    },
+    "cpld": {
+        "key": "CPLD",
+        "next": "psu"
+    },
+
+    "cpld1": {
+        "key": "CPLD1",
+        "parent": "cpld",
+        "arrt_index": 1,
+    },
+    "cpld1_model": {
+        "key": "Device Model",
+        "parent": "cpld1",
+        "config": "LCMXO3LF-6900C-5BG256C",
+        "arrt_index": 1,
+    },
+    "cpld1_vender": {
+        "key": "Vendor",
+        "parent": "cpld1",
+        "config": "LATTICE",
+        "arrt_index": 2,
+    },
+    "cpld1_desc": {
+        "key": "Description",
+        "parent": "cpld1",
+        "config": "CPU_CPLD",
+        "arrt_index": 3,
+    },
+    "cpld1_version": {
+        "key": "Firmware Version",
+        "parent": "cpld1",
+        "reg": {
+            "loc": "/dev/port",
+            "offset": 0x700,
+            "size": 4
+        },
+        "callback": "cpld_format",
+        "arrt_index": 4,
+    },
+
+    "cpld2": {
+        "key": "CPLD2",
+        "parent": "cpld",
+        "arrt_index": 2,
+    },
+    "cpld2_model": {
+        "key": "Device Model",
+        "parent": "cpld2",
+        "config": "LCMXO3LF-2100C-5BG256C",
+        "arrt_index": 1,
+    },
+    "cpld2_vender": {
+        "key": "Vendor",
+        "parent": "cpld2",
+        "config": "LATTICE",
+        "arrt_index": 2,
+    },
+    "cpld2_desc": {
+        "key": "Description",
+        "parent": "cpld2",
+        "config": "CTRL_CPLD",
+        "arrt_index": 3,
+    },
+    "cpld2_version": {
+        "key": "Firmware Version",
+        "parent": "cpld2",
+        "reg": {
+            "loc": "/dev/port",
+            "offset": 0x900,
+            "size": 4
+        },
+        "callback": "cpld_format",
+        "arrt_index": 4,
+    },
+
+    "cpld3": {
+        "key": "CPLD3",
+        "parent": "cpld",
+        "arrt_index": 3,
+    },
+    "cpld3_model": {
+        "key": "Device Model",
+        "parent": "cpld3",
+        "config": "LCMXO3LF-2100C-5BG256C",
+        "arrt_index": 1,
+    },
+    "cpld3_vender": {
+        "key": "Vendor",
+        "parent": "cpld3",
+        "config": "LATTICE",
+        "arrt_index": 2,
+    },
+    "cpld3_desc": {
+        "key": "Description",
+        "parent": "cpld3",
+        "config": "PORT_CPLD",
+        "arrt_index": 3,
+    },
+    "cpld3_version": {
+        "key": "Firmware Version",
+        "parent": "cpld3",
+        "reg": {
+            "loc": "/dev/port",
+            "offset": 0xb00,
+            "size": 4
+        },
+        "callback": "cpld_format",
+        "arrt_index": 4,
+    },
+
+    "psu": {
+        "key": "PSU",
+        "next": "fan"
+    },
+
+    "psu1": {
+        "parent": "psu",
+        "key": "PSU1",
+        "arrt_index": 1,
+    },
+    "psu1_hw_version": {
+        "key": "Hardware Version",
+        "parent": "psu1",
+        "extra": {
+            "funcname": "getCustPsu",
+            "id": "psu1",
+            "key": "hw_version"
+        },
+        "arrt_index": 1,
+    },
+    "psu1_fw_version": {
+        "key": "Firmware Version",
+        "parent": "psu1",
+        "config": "NA",
+        "arrt_index": 2,
+    },
+
+    "psu2": {
+        "parent": "psu",
+        "key": "PSU2",
+        "arrt_index": 2,
+    },
+    "psu2_hw_version": {
+        "key": "Hardware Version",
+        "parent": "psu2",
+        "extra": {
+            "funcname": "getCustPsu",
+            "id": "psu2",
+            "key": "hw_version"
+        },
+        "arrt_index": 1,
+    },
+    "psu2_fw_version": {
+        "key": "Firmware Version",
+        "parent": "psu2",
+        "config": "NA",
+        "arrt_index": 2,
+    },
+
+    "fan": {
+        "key": "FAN",
+    },
+
+    "fan1": {
+        "key": "FAN1",
+        "parent": "fan",
+        "arrt_index": 1,
+    },
+    "fan1_hw_version": {
+        "key": "Hardware Version",
+        "parent": "fan1",
+        "extra": {
+            "funcname": "checkFan",
+            "id": "fan1",
+            "key": "hw_version"
+        },
+        "arrt_index": 1,
+    },
+    "fan1_fw_version": {
+        "key": "Firmware Version",
+        "parent": "fan1",
+        "config": "NA",
+        "arrt_index": 2,
+    },
+
+    "fan2": {
+        "key": "FAN2",
+        "parent": "fan",
+        "arrt_index": 2,
+    },
+    "fan2_hw_version": {
+        "key": "Hardware Version",
+        "parent": "fan2",
+        "extra": {
+            "funcname": "checkFan",
+            "id": "fan2",
+            "key": "hw_version"
+        },
+        "arrt_index": 1,
+    },
+    "fan2_fw_version": {
+        "key": "Firmware Version",
+        "parent": "fan2",
+        "config": "NA",
+        "arrt_index": 2,
+    },
+}
+
+PMON_SYSLOG_STATUS = {
+    "polling_time": 3,
+    "sffs": {
+        "present": {"path": ["/sys/wb_plat/sff/*/present"], "ABSENT": 0},
+        "nochangedmsgflag": 0,
+        "nochangedmsgtime": 60,
+        "noprintfirsttimeflag": 1,
+        "alias": {
+            "sff49": "Ethernet49",
+            "sff50": "Ethernet50",
+            "sff51": "Ethernet51",
+            "sff52": "Ethernet52"
+        }
+    },
+    "fans": {
+        "present": {"path": ["/sys/wb_plat/fan/*/present"], "ABSENT": 0},
+        "status": [
+            {"path": "/sys/wb_plat/fan/%s/motor0/status", 'okval': 1},
+        ],
+        "nochangedmsgflag": 1,
+        "nochangedmsgtime": 60,
+        "noprintfirsttimeflag": 0,
+        "alias": {
+            "fan1": "FAN1",
+            "fan2": "FAN2"
+        }
+    },
+    "psus": {
+        "present": {"path": ["/sys/wb_plat/psu/*/present"], "ABSENT": 0},
+        "status": [
+            {"path": "/sys/wb_plat/psu/%s/output", "okval": 1},
+            {"path": "/sys/wb_plat/psu/%s/alert", "okval": 0},
+        ],
+        "nochangedmsgflag": 1,
+        "nochangedmsgtime": 60,
+        "noprintfirsttimeflag": 0,
+        "alias": {
+            "psu1": "PSU1",
+            "psu2": "PSU2"
+        }
+    }
+}
+
+##################### MAC Voltage adjust####################################
+MAC_DEFAULT_PARAM = [
+    {
+        "name": "mac_core",              # AVS name
+        "type": 0,                       # 1: used default value, if rov value not in range. 0: do nothing, if rov value not in range
+        "default": 0x01,                 # default value, if rov value not in range
+        "rov_source": 0,                 # 0: get rov value from cpld, 1: get rov value from SDK
+        "cpld_avs": {"io_addr": 0x956, "gettype": "io"},
+        "set_avs": {
+            "loc": "/sys/bus/i2c/devices/17-0058/hwmon/hwmon*/avs0_vout",
+            "gettype": "sysfs", "formula": "int((%f)*1000000)"
+        },
+        "mac_avs_param": {
+            0x08: 0.875,
+            0x04: 0.850,
+            0x02: 0.825,
+            0x01: 0.800
+        }
+    }
+]
+
+
+DRIVERLISTS = [
+    {"name": "i2c_ismt", "delay": 0},
+    {"name": "i2c_i801", "delay": 0},
+    {"name": "i2c_dev", "delay": 0},
+    {"name": "i2c_algo_bit", "delay": 0},
+    {"name": "i2c_gpio", "delay": 0},
+    {"name": "i2c_mux", "delay": 0},
+    {"name": "wb_i2c_gpio_device gpio_sda=31 gpio_scl=32 gpio_chip_name=INTC3000:00", "delay": 0},
+    {"name": "mdio_bitbang", "delay": 0},
+    {"name": "mdio_gpio", "delay": 0},
+    {"name": "wb_mdio_gpio_device gpio_mdc=33 gpio_mdio=34 gpio_chip_name=INTC3000:00", "delay": 0},
+    {"name": "platform_common dfd_my_type=0x40b2", "delay": 0},
+    {"name": "wb_pcie_dev", "delay": 0},
+    {"name": "wb_lpc_drv", "delay": 0},
+    {"name": "wb_lpc_drv_device", "delay": 0},
+    {"name": "wb_io_dev", "delay": 0},
+    {"name": "wb_io_dev_device", "delay": 0},
+    {"name": "wb_i2c_dev", "delay": 0},
+    {"name": "wb_i2c_mux_pca9641", "delay": 0},
+    {"name": "wb_i2c_mux_pca954x", "delay": 0},
+    {"name": "wb_i2c_mux_pca954x_device", "delay": 0},
+    {"name": "wb_i2c_dev_device", "delay": 0},
+    {"name": "lm75", "delay": 0},
+    {"name": "optoe", "delay": 0},
+    {"name": "at24", "delay": 0},
+    {"name": "wb_mac_bsc", "delay": 0},
+    {"name": "pmbus_core", "delay": 0},
+    {"name": "xdpe12284", "delay": 0},
+    {"name": "ina3221", "delay": 0},
+    {"name": "wb_wdt", "delay": 0},
+    {"name": "wb_wdt_device", "delay": 0},
+    {"name": "plat_dfd", "delay": 0},
+    {"name": "plat_switch", "delay": 0},
+    {"name": "plat_fan", "delay": 0},
+    {"name": "plat_psu", "delay": 0},
+    {"name": "plat_sff", "delay": 0},
+    {"name": "hw_test", "delay": 0},
+]
+
+DEVICE = [
+    {"name": "24c02", "bus": 2, "loc": 0x56},
+    {"name": "wb_mac_bsc_td3_x2", "bus": 18, "loc": 0x44},
+    # fan
+    {"name": "24c02", "bus": 8, "loc": 0x53},
+    {"name": "24c02", "bus": 9, "loc": 0x53},
+
+    # psu
+    {"name": "24c02", "bus": 7, "loc": 0x56},
+    {"name": "24c02", "bus": 7, "loc": 0x57},
+    # temp
+    {"name": "tmp275", "bus": 6, "loc": 0x48},
+    {"name": "tmp275", "bus": 6, "loc": 0x49},
+    # dcdc
+    {"name": "xdpe12284", "bus": 0, "loc": 0x5e},
+    {"name": "xdpe12284", "bus": 0, "loc": 0x68},
+    {"name": "xdpe12284", "bus": 0, "loc": 0x6e},
+    {"name": "xdpe12284", "bus": 17, "loc": 0x58},
+    {"name": "ina3221", "bus": 3, "loc": 0x40},
+    {"name": "ina3221", "bus": 3, "loc": 0x41},
+    {"name": "ina3221", "bus": 3, "loc": 0x42},
+    # port
+    {"name": "optoe2", "bus": 11, "loc": 0x50},
+    {"name": "optoe2", "bus": 12, "loc": 0x50},
+    {"name": "optoe2", "bus": 13, "loc": 0x50},
+    {"name": "optoe2", "bus": 14, "loc": 0x50},
+]
+
+REBOOT_CTRL_PARAM = {
+    "cpu": {"io_addr": 0x910, "rst_val": 0x10, "rst_delay": 0, "gettype": "io"},
+    "mac": {"io_addr": 0x930, "rst_val": 0xbf, "rst_delay": 1, "unlock_rst_val": 0xff, "unlock_rst_delay": 1, "gettype": "io"},
+    "phy": {"io_addr": 0x930, "rst_val": 0xf7, "rst_delay": 1, "unlock_rst_val": 0xff, "unlock_rst_delay": 1, "gettype": "io"},
+}
+
+DEV_MONITOR_PARAM = {
+    "polling_time": 10,
+    "psus": [
+        {
+            "name": "psu1",
+            "present": {"gettype": "io", "io_addr": 0xb10, "presentbit": 0, "okval": 0},
+            "device": [
+                {"id": "psu1frue2", "name": "24c02", "bus": 7, "loc": 0x56, "attr": "eeprom"},
+            ],
+        },
+        {
+            "name": "psu2",
+            "present": {"gettype": "io", "io_addr": 0xb10, "presentbit": 1, "okval": 0},
+            "device": [
+                {"id": "psu2frue2", "name": "24c02", "bus": 7, "loc": 0x57, "attr": "eeprom"},
+            ],
+        },
+    ],
+    "fans": [
+        {
+            "name": "fan1",
+            "present": {"gettype": "io", "io_addr": 0x994, "presentbit": 0, "okval": 0},
+            "device": [
+                {"id": "fan1frue2", "name": "24c02", "bus": 8, "loc": 0x53, "attr": "eeprom"},
+            ],
+        },
+        {
+            "name": "fan2",
+            "present": {"gettype": "io", "io_addr": 0x994, "presentbit": 1, "okval": 0},
+            "device": [
+                {"id": "fan2frue2", "name": "24c02", "bus": 9, "loc": 0x53, "attr": "eeprom"},
+            ],
+        },
+    ],
+    "others": [
+        {
+            "name": "eeprom",
+            "device": [
+                {"id": "eeprom_1", "name": "24c02", "bus": 2, "loc": 0x56, "attr": "eeprom"},
+            ],
+        },
+        {
+            "name": "tmp275",
+            "device": [
+                {"id": "tmp275_1", "name": "tmp275", "bus": 6, "loc": 0x48, "attr": "hwmon"},
+                {"id": "tmp275_2", "name": "tmp275", "bus": 6, "loc": 0x49, "attr": "hwmon"},
+            ],
+        },
+        {
+            "name": "mac_bsc",
+            "device": [
+                {"id": "mac_bsc_1", "name": "wb_mac_bsc_td3_x2", "bus": 18, "loc": 0x44, "attr": "hwmon"},
+            ],
+        },
+        {
+            "name": "ina3221",
+            "device": [
+                {"id": "ina3221_1", "name": "ina3221", "bus": 3, "loc": 0x40, "attr": "hwmon"},
+                {"id": "ina3221_2", "name": "ina3221", "bus": 3, "loc": 0x41, "attr": "hwmon"},
+                {"id": "ina3221_3", "name": "ina3221", "bus": 3, "loc": 0x42, "attr": "hwmon"},
+            ],
+        },
+        {
+            "name": "xdpe12284",
+            "device": [
+                {"id": "xdpe12284_1", "name": "xdpe12284", "bus": 0, "loc": 0x68, "attr": "hwmon"},
+                {"id": "xdpe12284_2", "name": "xdpe12284", "bus": 0, "loc": 0x6e, "attr": "hwmon"},
+                {"id": "xdpe12284_2", "name": "xdpe12284", "bus": 0, "loc": 0x5e, "attr": "hwmon"},
+                {"id": "xdpe12284_2", "name": "xdpe12284", "bus": 17, "loc": 0x58, "attr": "hwmon"},
+            ],
+        },
+    ],
+}
+
+# INIT_PARAM_PRE = [
+#     {"loc": "17-0058/hwmon/hwmon*/avs0_vout_max", "value": "875000"},
+#     {"loc": "17-0058/hwmon/hwmon*/avs0_vout_min", "value": "800000"},
+# ]
+INIT_COMMAND_PRE = [
+    # close tx_disable
+    "dfd_debug io_wr 0xb0e 0x59",
+    "dfd_debug io_wr 0xb90 0x00",
+    "dfd_debug io_wr 0xb0e 0x4e",
+]
+
+INIT_PARAM = []
+
+INIT_COMMAND = []
+
+REBOOT_CAUSE_PARA = {
+    "reboot_cause_list": [
+        {
+            "name": "wdt_reboot",
+            "monitor_point": {"gettype": "io", "io_addr": 0x76b, "okval": 1},
+            "record": [
+                {"record_type": "file", "mode": "cover", "log": "Watchdog, ",
+                    "path": "/etc/sonic/.reboot/.previous-reboot-cause.txt"},
+                {"record_type": "file", "mode": "add", "log": "Watchdog, ", 
+                    "path": "/etc/sonic/.reboot/.history-reboot-cause.txt", "file_max_size":1*1024*1024}
+            ],
+            "finish_operation": [
+                {"gettype": "io", "io_addr": 0x76b, "value": 0x00},
+            ]
+        },
+        {
+            "name": "otp_switch_reboot",
+            "monitor_point": {"gettype": "file_exist", "judge_file": "/etc/.otp_switch_reboot_flag", "okval": True},
+            "record": [
+                {"record_type": "file", "mode": "cover", "log": "Thermal Overload: ASIC, ",
+                    "path": "/etc/sonic/.reboot/.previous-reboot-cause.txt"},
+                {"record_type": "file", "mode": "add", "log": "Thermal Overload: ASIC, ",
+                    "path": "/etc/sonic/.reboot/.history-reboot-cause.txt", "file_max_size": 1 * 1024 * 1024}
+            ],
+            "finish_operation": [
+                {"gettype": "cmd", "cmd": "rm -rf /etc/.otp_switch_reboot_flag"},
+            ]
+        },
+        {
+            "name": "otp_other_reboot",
+            "monitor_point": {"gettype": "file_exist", "judge_file": "/etc/.otp_other_reboot_flag", "okval": True},
+            "record": [
+                {"record_type": "file", "mode": "cover", "log": "Thermal Overload: Other, ",
+                    "path": "/etc/sonic/.reboot/.previous-reboot-cause.txt"},
+                {"record_type": "file", "mode": "add", "log": "Thermal Overload: Other, ",
+                    "path": "/etc/sonic/.reboot/.history-reboot-cause.txt", "file_max_size": 1 * 1024 * 1024}
+            ],
+            "finish_operation": [
+                {"gettype": "cmd", "cmd": "rm -rf /etc/.otp_other_reboot_flag"},
+            ]
+        },
+    ],
+    "other_reboot_cause_record": [
+        {"record_type": "file", "mode": "cover", "log": "Other, ", "path": "/etc/sonic/.reboot/.previous-reboot-cause.txt"},
+        {"record_type": "file", "mode": "add", "log": "Other, ", "path": "/etc/sonic/.reboot/.history-reboot-cause.txt"}
+    ],
+}
+
+
+WARM_UPGRADE_PARAM = {
+    "slot0": {
+        "VME": {
+            "chain1": [
+                {"name": "CPU_CPLD",
+                    "refresh_file_judge_flag": 1,
+                    "refresh_file": "/etc/.cpld_refresh/refresh_cpu_cpld_header.vme",
+                    "init_cmd": [
+                        {"cmd": "echo 98 > /sys/class/gpio/export", "gettype": "cmd"},
+                        {"cmd": "echo high > /sys/class/gpio/gpio98/direction", "gettype": "cmd"},
+                        {"io_addr": 0x7a5, "value": 0, "gettype": "io"},
+                    ],
+                    "rw_recover_reg": [
+                        {"io_addr": 0x721, "value": None, "gettype": "io"},
+                        {"io_addr": 0x765, "value": None, "gettype": "io"},
+                        {"io_addr": 0x766, "value": None, "gettype": "io"},
+                        {"io_addr": 0x768, "value": None, "gettype": "io"},
+                    ],
+                    "after_upgrade_delay": 1,
+                    "after_upgrade_delay_timeout": 30,
+                    "refresh_finish_flag_check": {"io_addr":0x7a5, "value":0x01, "gettype":"io"},
+                    "access_check_reg": {"io_addr": 0x705, "value": 0x5a, "gettype": "io"},
+                    "finish_cmd": [
+                        {"cmd": "echo 0 > /sys/class/gpio/gpio98/value", "gettype": "cmd"},
+                        {"cmd": "echo 98 > /sys/class/gpio/unexport", "gettype": "cmd"},
+                    ],
+                },
+            ],
+        },
+    },
+    "stop_services_cmd": [
+        "/usr/local/bin/platform_process.py stop",
+    ],
+    "start_services_cmd": [
+        "/usr/local/bin/platform_process.py start",
+    ],
+}
+
+UPGRADE_SUMMARY = {
+    "devtype": 0x40b2,
+
+    "slot0": {
+        "subtype": 0,
+        "VME": {
+            "chain1": {
+                "name": "CPU_CPLD",
+                "is_support_warm_upg": 1,
+            },
+            "chain2": {
+                "name": "CTRL_CPLD",
+                "is_support_warm_upg": 0,
+            },
+            "chain3": {
+                "name": "PORT_CPLD",
+                "is_support_warm_upg": 0,
+            },
+        },
+
+        "MTD": {
+            "chain1": {
+                "name": "BIOS",
+                "is_support_warm_upg": 0,
+                "filesizecheck": 10240,  # bios check file size, Unit: K
+                "init_cmd": [
+                    {"io_addr": 0x722, "value": 0x02, "gettype": "io"},
+                    {"cmd": "modprobe mtd", "gettype": "cmd"},
+                    {"cmd": "modprobe spi_nor", "gettype": "cmd"},
+                    {"cmd": "modprobe ofpart", "gettype": "cmd"},
+                    {"cmd": "modprobe intel_spi writeable=1", "gettype": "cmd"},
+                    {"cmd": "modprobe intel_spi_pci", "gettype": "cmd"},
+                ],
+                "finish_cmd": [
+                    {"cmd": "rmmod intel_spi_pci", "gettype": "cmd"},
+                    {"cmd": "rmmod intel_spi", "gettype": "cmd"},
+                    {"cmd": "rmmod ofpart", "gettype": "cmd"},
+                    {"cmd": "rmmod spi_nor", "gettype": "cmd"},
+                    {"cmd": "rmmod mtd", "gettype": "cmd"},
+                ],
+            },
+        },
+
+        "TEST": {
+            "cpld": [
+                {"chain": 1, "file": "/etc/.upgrade_test/cpu_cpld_test_header.vme", "display_name": "CPU_CPLD"},
+                {"chain": 2, "file": "/etc/.upgrade_test/ctrl_cpld_test_header.vme", "display_name": "CTRL_CPLD"},
+                {"chain": 3, "file": "/etc/.upgrade_test/port_cpld_test_header.vme", "display_name": "PORT_CPLD"},
+            ],
+        },
+    },
+}
+
+
+PLATFORM_E2_CONF = {
+    "fan": [
+        {"name": "fan1", "e2_type": "fru", "e2_path": "/sys/bus/i2c/devices/8-0053/eeprom"},
+        {"name": "fan2", "e2_type": "fru", "e2_path": "/sys/bus/i2c/devices/9-0053/eeprom"},
+    ],
+    "psu": [
+        {"name": "psu1", "e2_type": "custfru", "e2_path": "/sys/bus/i2c/devices/7-0056/eeprom"},
+        {"name": "psu2", "e2_type": "custfru", "e2_path": "/sys/bus/i2c/devices/7-0057/eeprom"},
+    ],
+    "syseeprom": [
+        {"name": "syseeprom", "e2_type": "onie_tlv", "e2_path": "/sys/bus/i2c/devices/2-0056/eeprom"},
+    ],
+}
+
+AIR_FLOW_CONF = {
+    "psu_fan_airflow": {
+        "intake": ['PA150II-F', 'PD150II-F'],
+        "exhaust": ['PA150II-R', 'PD150II-R']
+    },
+
+    "fanairflow": {
+        "intake": ['M1LFAN I-F'],
+        "exhaust": ['M1LFAN I-R']
+    },
+
+    "fans": [
+        {
+            "name": "FAN1", "e2_type": "fru", "e2_path": "/sys/bus/i2c/devices/8-0053/eeprom",
+            "area": "productInfoArea", "field": "productName", "decode": "fanairflow"
+        },
+        {
+            "name": "FAN2", "e2_type": "fru", "e2_path": "/sys/bus/i2c/devices/9-0053/eeprom",
+            "area": "productInfoArea", "field": "productName", "decode": "fanairflow"
+        },
+    ],
+
+    "psus": [
+        {
+            "name": "PSU1", "e2_type": "custfru", "e2_path": "/sys/bus/i2c/devices/7-0056/eeprom",
+            "field": "product_name", "decode": "psu_fan_airflow"
+        },
+        {
+            "name": "PSU2", "e2_type": "custfru", "e2_path": "/sys/bus/i2c/devices/7-0057/eeprom",
+            "field": "product_name", "decode": "psu_fan_airflow"
+        }
+    ]
+}
+
+SET_MAC_CONF = [
+    {
+        "eth_name": "eth0",
+        "e2_name": "syseeprom",
+        "e2_type": "onie_tlv",
+        "e2_path": "/sys/bus/i2c/devices/2-0056/eeprom",
+        "mac_location": {"field": "Base MAC Address"},
+        "ifcfg": {
+            "ifcfg_file_path": "/etc/network/interfaces.d/ifcfg-eth0-mac", "file_mode": "add",
+        }
+    }
+]
+
+DRVIER_UPDATE_CONF = {
+    "reboot_flag": 1,
+    "drv_list": [
+        {
+            "source": "extra/sdhci_pci.ko",
+            "target": "kernel/drivers/mmc/host/sdhci-pci.ko",
+            "judge_flag": "/sys/module/sdhci_pci/parameters/wb_sdhci_pci"
+        },
+    ]
+}
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/config/x86_64_micas_m2_w6510_48gt4v_r0_port_config.py b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/config/x86_64_micas_m2_w6510_48gt4v_r0_port_config.py
new file mode 100644
index 000000000..2e30ca213
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/config/x86_64_micas_m2_w6510_48gt4v_r0_port_config.py
@@ -0,0 +1,12 @@
+#!/usr/bin/python3
+#
+
+PLATFORM_INTF_OPTOE = {
+    "port_num": 52,
+    "port_bus_map": {
+        49: 12,
+        50: 11,
+        51: 14,
+        52: 13
+    }
+}
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_device.py b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_device.py
new file mode 100644
index 000000000..0c5568884
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_device.py
@@ -0,0 +1,607 @@
+#!/usr/bin/python3
+
+
+psu_fan_airflow = {
+    "intake": ['PA150II-F', 'PD150II-F'],
+    "exhaust": ['PA150II-R', 'PD150II-R']
+}
+
+fanairflow = {
+    "intake": ['M1LFAN I-F'],
+    "exhaust": ['M1LFAN I-R']
+}
+
+psu_display_name = {
+    "PA150II-F": ['PA150II-F'],
+    "PA150II-R": ['PA150II-R'],
+    "PD150II-F": ['PD150II-F'],
+    "PD150II-R": ['PD150II-R']
+}
+
+psutypedecode = {
+    "AC": ["PA150II-F", "PA150II-R"],
+    "DC": ["PD150II-F", "PD150II-R"],
+}
+
+
+class Unit:
+    Temperature = "C"
+    Voltage = "V"
+    Current = "A"
+    Power = "W"
+    Speed = "RPM"
+
+
+class threshold:
+    FAN_SPEED_MAX = 19800
+    FAN_SPEED_MIN = 4860
+
+
+class Description:
+    CPLD = "Used for managing IO modules, SFP+ modules and system LEDs"
+    BIOS = "Performs initialization of hardware components during booting"
+    FPGA = "Platform management controller for on-board temperature monitoring, in-chassis power"
+
+
+devices = {
+    "onie_e2": [
+        {
+            "name": "ONIE_E2",
+            "e2loc": {"loc": "/sys/bus/i2c/devices/2-0056/eeprom", "way": "sysfs"},
+            "airflow": "intake"
+        },
+    ],
+    "psus": [
+        {
+            "e2loc": {"loc": "/sys/bus/i2c/devices/7-0056/eeprom", "way": "sysfs"},
+            "e2_type": "custfru",
+            "present": {"loc": "/sys/wb_plat/psu/psu1/present", "way": "sysfs", "mask": 0x01, "okval": 1},
+            "name": "PSU1",
+            "psu_display_name": psu_display_name,
+            "airflow": psu_fan_airflow,
+            "psu_fan_tolerance": 40,
+            "InputsType": {"gettype": "fru", 'psutypedecode': psutypedecode},
+            "OutputsStatus": {"loc": "/sys/wb_plat/psu/psu1/output", "way": "sysfs", "mask": 0x01, "okval": 1},
+            "Temperature": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Temperature
+            },
+            "FanSpeed": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Speed
+            },
+            "InputsVoltage": {
+                'AC': {
+                    "value": {"value": None, "way": "config"},
+                    "Unit": Unit.Voltage
+
+                },
+                'DC': {
+                    "value": {"value": None, "way": "config"},
+                    "Unit": Unit.Voltage
+                },
+                'other': {
+                    "value": {"value": None, "way": "config"},
+                    "Unit": Unit.Voltage
+                }
+            },
+            "InputsCurrent": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Current
+            },
+            "InputsPower": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Power
+            },
+            "OutputsVoltage": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Voltage
+            },
+            "OutputsCurrent": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Current
+            },
+            "OutputsPower": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Power
+            },
+        },
+        {
+            "e2loc": {"loc": "/sys/bus/i2c/devices/7-0057/eeprom", "way": "sysfs"},
+            "e2_type": "custfru",
+            "present": {"loc": "/sys/wb_plat/psu/psu2/present", "way": "sysfs", "mask": 0x01, "okval": 1},
+            "name": "PSU2",
+            "psu_display_name": psu_display_name,
+            "airflow": psu_fan_airflow,
+            "psu_fan_tolerance": 40,
+            "InputsType": {"gettype": "fru", 'psutypedecode': psutypedecode},
+            "OutputsStatus": {"loc": "/sys/wb_plat/psu/psu2/output", "way": "sysfs", "mask": 0x01, "okval": 1},
+            "Temperature": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Temperature
+            },
+            "FanSpeed": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Speed
+            },
+            "InputsVoltage": {
+                'AC': {
+                    "value": {"value": None, "way": "config"},
+                    "Unit": Unit.Voltage
+
+                },
+                'DC': {
+                    "value": {"value": None, "way": "config"},
+                    "Unit": Unit.Voltage
+                },
+                'other': {
+                    "value": {"value": None, "way": "config"},
+                    "Unit": Unit.Voltage
+                }
+            },
+            "InputsCurrent": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Current
+            },
+            "InputsPower": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Power
+            },
+            "OutputsVoltage": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Voltage
+            },
+            "OutputsCurrent": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Current
+            },
+            "OutputsPower": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Power
+            },
+        }
+    ],
+    "temps": [
+        {
+            "name": "SWITCH_TEMP",
+            "temp_id": "TEMP1",
+            "api_name": "ASIC_TEMP",
+            "Temperature": {
+                "value": {"loc": "/sys/bus/i2c/devices/18-0044/hwmon/hwmon*/temp99_input", "way": "sysfs"},
+                "Min": 2000,
+                "Low": 10000,
+                "High": 105000,
+                "Max": 110000,
+                "Unit": Unit.Temperature,
+                "format": "float(float(%s)/1000)"
+            }
+        },
+        {
+            "name": "CPU_TEMP",
+            "temp_id": "TEMP2",
+            "Temperature": {
+                "value": {"loc": "/sys/bus/platform/devices/coretemp.0/hwmon/hwmon*/temp1_input", "way": "sysfs"},
+                "Min": 2000,
+                "Low": 10000,
+                "High": 85000,
+                "Max": 91000,
+                "Unit": Unit.Temperature,
+                "format": "float(float(%s)/1000)"
+            }
+        },
+        {
+            "name": "INLET_TEMP",
+            "temp_id": "TEMP3",
+            "Temperature": {
+                "value": [
+                    {"loc": "/sys/bus/i2c/devices/6-0049/hwmon/hwmon*/temp1_input", "way": "sysfs"},
+                ],
+                "Min": -10000,
+                "Low": 0,
+                "High": 55000,
+                "Max": 60000,
+                "Unit": Unit.Temperature,
+                "format": "float(float(%s)/1000)"
+            },
+            "fix_value": {
+                "fix_type": "config",
+                "addend": -7,
+            }
+        },
+        {
+            "name": "OUTLET_TEMP",
+            "temp_id": "TEMP4",
+            "Temperature": {
+                "value": {"loc": "/sys/bus/i2c/devices/6-0048/hwmon/hwmon*/temp1_input", "way": "sysfs"},
+                "Min": -10000,
+                "Low": 0,
+                "High": 70000,
+                "Max": 75000,
+                "Unit": Unit.Temperature,
+                "format": "float(float(%s)/1000)"
+            }
+        },
+        {
+            "name": "SFF_TEMP",
+            "Temperature": {
+                "value": {"loc": "/tmp/highest_sff_temp", "way": "sysfs", "flock_path": "/tmp/highest_sff_temp"},
+                "Min": -30000,
+                "Low": 0,
+                "High": 90000,
+                "Max": 100000,
+                "Unit": Unit.Temperature,
+                "format": "float(float(%s)/1000)"
+            },
+            "invalid": -10000,
+            "error": -9999,
+        }
+    ],
+    "leds": [
+        {
+            "name": "FRONT_SYS_LED",
+            "led_type": "SYS_LED",
+            "led": {"loc": "/dev/cpld1", "offset": 0x50, "len": 1, "way": "devfile"},
+            "led_attrs": {
+                "off": 0x10, "red_flash": 0x11, "red": 0x12,
+                "green_flash": 0x13, "green": 0x14, "amber_flash": 0x15,
+                "amber": 0x16, "mask": 0x17
+            },
+        },
+        {
+            "name": "FRONT_PSU_LED",
+            "led_type": "PSU_LED",
+            "led": {"loc": "/dev/cpld1", "offset": 0x51, "len": 1, "way": "devfile"},
+            "led_attrs": {
+                "off": 0x10, "red_flash": 0x11, "red": 0x12,
+                "green_flash": 0x13, "green": 0x14, "amber_flash": 0x15,
+                "amber": 0x16, "mask": 0x17
+            },
+        },
+        {
+            "name": "FRONT_FAN_LED",
+            "led_type": "FAN_LED",
+            "led": {"loc": "/dev/cpld1", "offset": 0x52, "len": 1, "way": "devfile"},
+            "led_attrs": {
+                "off": 0x10, "red_flash": 0x11, "red": 0x12,
+                "green_flash": 0x13, "green": 0x14, "amber_flash": 0x15,
+                "amber": 0x16, "mask": 0x17
+            },
+        },
+    ],
+    "fans": [
+        {
+            "name": "FAN1",
+            "airflow": fanairflow,
+            "e2loc": {'loc': '/sys/bus/i2c/devices/8-0053/eeprom', 'way': 'sysfs'},
+            "present": {"loc": "/sys/wb_plat/fan/fan1/present", "way": "sysfs", "mask": 0x01, "okval": 1},
+            "SpeedMin": threshold.FAN_SPEED_MIN,
+            "SpeedMax": threshold.FAN_SPEED_MAX,
+            "led": {"loc": "/dev/cpld1", "offset": 0x92, "len": 1, "way": "devfile"},
+            "led_attrs": {
+                "off": 0x00, "red_flash": 0x01, "red": 0x02,
+                "green_flash": 0x03, "green": 0x04, "amber_flash": 0x05,
+                "amber": 0x06, "mask": 0x07
+            },
+            "PowerMax": 6.6,
+            "Rotor": {
+                "Rotor1_config": {
+                    "name": "Rotor1",
+                    "Set_speed": {"loc": "/dev/cpld1", "offset": 0x90, "len": 1, "way": "devfile"},
+                    "Running": {"loc": "/sys/wb_plat/fan/fan1/motor0/status", "way": "sysfs", "mask": 0x01, "is_runing": 1},
+                    "HwAlarm": {"loc": "/sys/wb_plat/fan/fan1/motor0/status", "way": "sysfs", "mask": 0x01, "no_alarm": 1},
+                    "SpeedMin": threshold.FAN_SPEED_MIN,
+                    "SpeedMax": threshold.FAN_SPEED_MAX,
+                    "Speed": {
+                        "value": {"loc": "/sys/wb_plat/fan/fan1/motor0/speed", "way": "sysfs"},
+                        "Min": threshold.FAN_SPEED_MIN,
+                        "Max": threshold.FAN_SPEED_MAX,
+                        "Unit": Unit.Speed,
+                    },
+                },
+            },
+        },
+        {
+            "name": "FAN2",
+            "airflow": fanairflow,
+            "e2loc": {'loc': '/sys/bus/i2c/devices/9-0053/eeprom', 'way': 'sysfs'},
+            "present": {"loc": "/sys/wb_plat/fan/fan2/present", "way": "sysfs", "mask": 0x01, "okval": 1},
+            "SpeedMin": threshold.FAN_SPEED_MIN,
+            "SpeedMax": threshold.FAN_SPEED_MAX,
+            "led": {"loc": "/dev/cpld1", "offset": 0x93, "len": 1, "way": "devfile"},
+            "led_attrs": {
+                "off": 0x00, "red_flash": 0x01, "red": 0x02,
+                "green_flash": 0x03, "green": 0x04, "amber_flash": 0x05,
+                "amber": 0x06, "mask": 0x07
+            },
+            "PowerMax": 6.6,
+            "Rotor": {
+                "Rotor1_config": {
+                    "name": "Rotor1",
+                    "Set_speed": {"loc": "/dev/cpld1", "offset": 0x91, "len": 1, "way": "devfile"},
+                    "Running": {"loc": "/sys/wb_plat/fan/fan2/motor0/status", "way": "sysfs", "mask": 0x01, "is_runing": 1},
+                    "HwAlarm": {"loc": "/sys/wb_plat/fan/fan2/motor0/status", "way": "sysfs", "mask": 0x01, "no_alarm": 1},
+                    "SpeedMin": threshold.FAN_SPEED_MIN,
+                    "SpeedMax": threshold.FAN_SPEED_MAX,
+                    "Speed": {
+                        "value": {"loc": "/sys/wb_plat/fan/fan2/motor0/speed", "way": "sysfs"},
+                        "Min": threshold.FAN_SPEED_MIN,
+                        "Max": threshold.FAN_SPEED_MAX,
+                        "Unit": Unit.Speed,
+                    },
+                },
+            },
+        },
+
+
+    ],
+    "cplds": [
+        {
+            "name": "CPU_CPLD",
+            "cpld_id": "CPLD1",
+            "VersionFile": {"loc": "/dev/cpld0", "offset": 0, "len": 4, "way": "devfile_ascii"},
+            "desc": "Used for system power",
+            "slot": 0,
+            "warm": 0,
+        },
+        {
+            "name": "CTRL_CPLD",
+            "cpld_id": "CPLD2",
+            "VersionFile": {"loc": "/dev/cpld1", "offset": 0, "len": 4, "way": "devfile_ascii"},
+            "desc": "Used for base functions",
+            "slot": 0,
+            "warm": 0,
+        },
+        {
+            "name": "PORT_CPLD",
+            "cpld_id": "CPLD3",
+            "VersionFile": {"loc": "/dev/cpld2", "offset": 0, "len": 4, "way": "devfile_ascii"},
+            "desc": "Used for sff modules",
+            "slot": 0,
+            "warm": 0,
+        },
+        {
+            "name": "BIOS",
+            "cpld_id": "CPLD4",
+            "VersionFile": {"cmd": "dmidecode -s bios-version", "way": "cmd"},
+            "desc": "Performs initialization of hardware components during booting",
+            "slot": 0,
+            "type": "str",
+            "warm": 0,
+        }
+    ],
+    "dcdc": [
+        {
+            "name": "VDD_CORE_0.8V",
+            "dcdc_id": "DCDC1",
+            "Min": 784,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/17-0058/hwmon/hwmon*/in3_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 893,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "PVCCP",
+            "dcdc_id": "DCDC2",
+            "Min": 468,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/0-0068/hwmon/hwmon*/in3_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1364,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "PVNN",
+            "dcdc_id": "DCDC3",
+            "Min": 585,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/0-0068/hwmon/hwmon*/in4_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1364,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "P1V05",
+            "dcdc_id": "DCDC4",
+            "Min": 945,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/0-006e/hwmon/hwmon*/in3_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1155,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "VCCRAM",
+            "dcdc_id": "DCDC5",
+            "Min": 675,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/0-006e/hwmon/hwmon*/in4_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1320,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "P1V2_VDDQ",
+            "dcdc_id": "DCDC6",
+            "Min": 1080,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/0-005e/hwmon/hwmon*/in3_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1320,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "CPU_VDD1.8V",
+            "dcdc_id": "DCDC7",
+            "Min": 1620,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0040/hwmon/hwmon*/in1_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1980,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "P3V3_STBY",
+            "dcdc_id": "DCDC8",
+            "Min": 2970,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0040/hwmon/hwmon*/in2_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 3630,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "P5V_AUX",
+            "dcdc_id": "DCDC9",
+            "Min": 4500,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0040/hwmon/hwmon*/in3_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 5500,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "VDD1.2V",
+            "dcdc_id": "DCDC10",
+            "Min": 1140,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0041/hwmon/hwmon*/in1_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1260,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "VDD1.8V",
+            "dcdc_id": "DCDC11",
+            "Min": 1710,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0041/hwmon/hwmon*/in2_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1890,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "VDD3.3V",
+            "dcdc_id": "DCDC12",
+            "Min": 3200,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0041/hwmon/hwmon*/in3_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 3600,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "VDD1.0V",
+            "dcdc_id": "DCDC13",
+            "Min": 969,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0042/hwmon/hwmon*/in1_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1071,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "VDD3.3V_SFP",
+            "dcdc_id": "DCDC14",
+            "Min": 3200,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0042/hwmon/hwmon*/in2_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 3600,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "VAN_0.8V",
+            "dcdc_id": "DCDC15",
+            "Min": 784,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0042/hwmon/hwmon*/in3_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 893,
+            "format": "float(float(%s)/1000)",
+        },
+    ],
+    "cpu": [
+        {
+            "name": "cpu",
+            "reboot_cause_path": "/etc/sonic/.reboot/.previous-reboot-cause.txt"
+        }
+    ],
+    "sfps": {
+        "ver": '1.0',
+        "port_index_start": 0,
+        "port_num": 52,
+        "log_level": 2,
+        "eeprom_retry_times": 5,
+        "eeprom_retry_break_sec": 0.2,
+        "presence_cpld": {
+            "dev_id": {
+                5: {
+                    "offset": {
+                        0x30: "50,49,52,51",
+                    },
+                },
+            },
+        },
+        "presence_val_is_present": 0,
+        "eeprom_path": "/sys/bus/i2c/devices/i2c-%d/%d-0050/eeprom",
+        "eeprom_path_key": [11]*48 + list(range(11, 15)),
+        "optoe_driver_path": "/sys/bus/i2c/devices/i2c-%d/%d-0050/dev_class",
+        "optoe_driver_key": list(range(11, 15)),
+        "txdis_cpld": {
+            "dev_id": {
+                5: {
+                    "offset": {
+                        0x90: "50,49,52,51",
+                    },
+                },
+            },
+        },
+        "txdisable_val_is_on": 1,
+    }
+}
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_exhaust_device.py b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_exhaust_device.py
new file mode 100644
index 000000000..4ed0f5ab2
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_exhaust_device.py
@@ -0,0 +1,607 @@
+#!/usr/bin/python3
+
+
+psu_fan_airflow = {
+    "intake": ['PA150II-F', 'PD150II-F'],
+    "exhaust": ['PA150II-R', 'PD150II-R']
+}
+
+fanairflow = {
+    "intake": ['M1LFAN I-F'],
+    "exhaust": ['M1LFAN I-R']
+}
+
+psu_display_name = {
+    "PA150II-F": ['PA150II-F'],
+    "PA150II-R": ['PA150II-R'],
+    "PD150II-F": ['PD150II-F'],
+    "PD150II-R": ['PD150II-R']
+}
+
+psutypedecode = {
+    "AC": ["PA150II-F", "PA150II-R"],
+    "DC": ["PD150II-F", "PD150II-R"],
+}
+
+
+class Unit:
+    Temperature = "C"
+    Voltage = "V"
+    Current = "A"
+    Power = "W"
+    Speed = "RPM"
+
+
+class threshold:
+    FAN_SPEED_MAX = 19800
+    FAN_SPEED_MIN = 4860
+
+
+class Description:
+    CPLD = "Used for managing IO modules, SFP+ modules and system LEDs"
+    BIOS = "Performs initialization of hardware components during booting"
+    FPGA = "Platform management controller for on-board temperature monitoring, in-chassis power"
+
+
+devices = {
+    "onie_e2": [
+        {
+            "name": "ONIE_E2",
+            "e2loc": {"loc": "/sys/bus/i2c/devices/2-0056/eeprom", "way": "sysfs"},
+            "airflow": "exhaust"
+        },
+    ],
+    "psus": [
+        {
+            "e2loc": {"loc": "/sys/bus/i2c/devices/7-0056/eeprom", "way": "sysfs"},
+            "e2_type": "custfru",
+            "present": {"loc": "/sys/wb_plat/psu/psu1/present", "way": "sysfs", "mask": 0x01, "okval": 1},
+            "name": "PSU1",
+            "psu_display_name": psu_display_name,
+            "airflow": psu_fan_airflow,
+            "psu_fan_tolerance": 40,
+            "InputsType": {"gettype": "fru", 'psutypedecode': psutypedecode},
+            "OutputsStatus": {"loc": "/sys/wb_plat/psu/psu1/output", "way": "sysfs", "mask": 0x01, "okval": 1},
+            "Temperature": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Temperature
+            },
+            "FanSpeed": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Speed
+            },
+            "InputsVoltage": {
+                'AC': {
+                    "value": {"value": None, "way": "config"},
+                    "Unit": Unit.Voltage
+
+                },
+                'DC': {
+                    "value": {"value": None, "way": "config"},
+                    "Unit": Unit.Voltage
+                },
+                'other': {
+                    "value": {"value": None, "way": "config"},
+                    "Unit": Unit.Voltage
+                }
+            },
+            "InputsCurrent": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Current
+            },
+            "InputsPower": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Power
+            },
+            "OutputsVoltage": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Voltage
+            },
+            "OutputsCurrent": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Current
+            },
+            "OutputsPower": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Power
+            },
+        },
+        {
+            "e2loc": {"loc": "/sys/bus/i2c/devices/7-0057/eeprom", "way": "sysfs"},
+            "e2_type": "custfru",
+            "present": {"loc": "/sys/wb_plat/psu/psu2/present", "way": "sysfs", "mask": 0x01, "okval": 1},
+            "name": "PSU2",
+            "psu_display_name": psu_display_name,
+            "airflow": psu_fan_airflow,
+            "psu_fan_tolerance": 40,
+            "InputsType": {"gettype": "fru", 'psutypedecode': psutypedecode},
+            "OutputsStatus": {"loc": "/sys/wb_plat/psu/psu2/output", "way": "sysfs", "mask": 0x01, "okval": 1},
+            "Temperature": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Temperature
+            },
+            "FanSpeed": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Speed
+            },
+            "InputsVoltage": {
+                'AC': {
+                    "value": {"value": None, "way": "config"},
+                    "Unit": Unit.Voltage
+
+                },
+                'DC': {
+                    "value": {"value": None, "way": "config"},
+                    "Unit": Unit.Voltage
+                },
+                'other': {
+                    "value": {"value": None, "way": "config"},
+                    "Unit": Unit.Voltage
+                }
+            },
+            "InputsCurrent": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Current
+            },
+            "InputsPower": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Power
+            },
+            "OutputsVoltage": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Voltage
+            },
+            "OutputsCurrent": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Current
+            },
+            "OutputsPower": {
+                "value": {"value": None, "way": "config"},
+                "Unit": Unit.Power
+            },
+        }
+    ],
+    "temps": [
+        {
+            "name": "SWITCH_TEMP",
+            "temp_id": "TEMP1",
+            "api_name": "ASIC_TEMP",
+            "Temperature": {
+                "value": {"loc": "/sys/bus/i2c/devices/18-0044/hwmon/hwmon*/temp99_input", "way": "sysfs"},
+                "Min": 2000,
+                "Low": 10000,
+                "High": 105000,
+                "Max": 110000,
+                "Unit": Unit.Temperature,
+                "format": "float(float(%s)/1000)"
+            }
+        },
+        {
+            "name": "CPU_TEMP",
+            "temp_id": "TEMP2",
+            "Temperature": {
+                "value": {"loc": "/sys/bus/platform/devices/coretemp.0/hwmon/hwmon*/temp1_input", "way": "sysfs"},
+                "Min": 2000,
+                "Low": 10000,
+                "High": 85000,
+                "Max": 91000,
+                "Unit": Unit.Temperature,
+                "format": "float(float(%s)/1000)"
+            }
+        },
+        {
+            "name": "INLET_TEMP",
+            "temp_id": "TEMP3",
+            "Temperature": {
+                "value": [
+                    {"loc": "/sys/bus/i2c/devices/6-0048/hwmon/hwmon*/temp1_input", "way": "sysfs"},
+                ],
+                "Min": -10000,
+                "Low": 0,
+                "High": 55000,
+                "Max": 60000,
+                "Unit": Unit.Temperature,
+                "format": "float(float(%s)/1000)"
+            },
+            "fix_value": {
+                "fix_type": "config",
+                "addend": -7,
+            }
+        },
+        {
+            "name": "OUTLET_TEMP",
+            "temp_id": "TEMP4",
+            "Temperature": {
+                "value": {"loc": "/sys/bus/i2c/devices/6-0049/hwmon/hwmon*/temp1_input", "way": "sysfs"},
+                "Min": -10000,
+                "Low": 0,
+                "High": 70000,
+                "Max": 75000,
+                "Unit": Unit.Temperature,
+                "format": "float(float(%s)/1000)"
+            }
+        },
+        {
+            "name": "SFF_TEMP",
+            "Temperature": {
+                "value": {"loc": "/tmp/highest_sff_temp", "way": "sysfs", "flock_path": "/tmp/highest_sff_temp"},
+                "Min": -30000,
+                "Low": 0,
+                "High": 90000,
+                "Max": 100000,
+                "Unit": Unit.Temperature,
+                "format": "float(float(%s)/1000)"
+            },
+            "invalid": -10000,
+            "error": -9999,
+        }
+    ],
+    "leds": [
+        {
+            "name": "FRONT_SYS_LED",
+            "led_type": "SYS_LED",
+            "led": {"loc": "/dev/cpld1", "offset": 0x50, "len": 1, "way": "devfile"},
+            "led_attrs": {
+                "off": 0x10, "red_flash": 0x11, "red": 0x12,
+                "green_flash": 0x13, "green": 0x14, "amber_flash": 0x15,
+                "amber": 0x16, "mask": 0x17
+            },
+        },
+        {
+            "name": "FRONT_PSU_LED",
+            "led_type": "PSU_LED",
+            "led": {"loc": "/dev/cpld1", "offset": 0x51, "len": 1, "way": "devfile"},
+            "led_attrs": {
+                "off": 0x10, "red_flash": 0x11, "red": 0x12,
+                "green_flash": 0x13, "green": 0x14, "amber_flash": 0x15,
+                "amber": 0x16, "mask": 0x17
+            },
+        },
+        {
+            "name": "FRONT_FAN_LED",
+            "led_type": "FAN_LED",
+            "led": {"loc": "/dev/cpld1", "offset": 0x52, "len": 1, "way": "devfile"},
+            "led_attrs": {
+                "off": 0x10, "red_flash": 0x11, "red": 0x12,
+                "green_flash": 0x13, "green": 0x14, "amber_flash": 0x15,
+                "amber": 0x16, "mask": 0x17
+            },
+        },
+    ],
+    "fans": [
+        {
+            "name": "FAN1",
+            "airflow": fanairflow,
+            "e2loc": {'loc': '/sys/bus/i2c/devices/8-0053/eeprom', 'way': 'sysfs'},
+            "present": {"loc": "/sys/wb_plat/fan/fan1/present", "way": "sysfs", "mask": 0x01, "okval": 1},
+            "SpeedMin": threshold.FAN_SPEED_MIN,
+            "SpeedMax": threshold.FAN_SPEED_MAX,
+            "led": {"loc": "/dev/cpld1", "offset": 0x92, "len": 1, "way": "devfile"},
+            "led_attrs": {
+                "off": 0x00, "red_flash": 0x01, "red": 0x02,
+                "green_flash": 0x03, "green": 0x04, "amber_flash": 0x05,
+                "amber": 0x06, "mask": 0x07
+            },
+            "PowerMax": 6.6,
+            "Rotor": {
+                "Rotor1_config": {
+                    "name": "Rotor1",
+                    "Set_speed": {"loc": "/dev/cpld1", "offset": 0x90, "len": 1, "way": "devfile"},
+                    "Running": {"loc": "/sys/wb_plat/fan/fan1/motor0/status", "way": "sysfs", "mask": 0x01, "is_runing": 1},
+                    "HwAlarm": {"loc": "/sys/wb_plat/fan/fan1/motor0/status", "way": "sysfs", "mask": 0x01, "no_alarm": 1},
+                    "SpeedMin": threshold.FAN_SPEED_MIN,
+                    "SpeedMax": threshold.FAN_SPEED_MAX,
+                    "Speed": {
+                        "value": {"loc": "/sys/wb_plat/fan/fan1/motor0/speed", "way": "sysfs"},
+                        "Min": threshold.FAN_SPEED_MIN,
+                        "Max": threshold.FAN_SPEED_MAX,
+                        "Unit": Unit.Speed,
+                    },
+                },
+            },
+        },
+        {
+            "name": "FAN2",
+            "airflow": fanairflow,
+            "e2loc": {'loc': '/sys/bus/i2c/devices/9-0053/eeprom', 'way': 'sysfs'},
+            "present": {"loc": "/sys/wb_plat/fan/fan2/present", "way": "sysfs", "mask": 0x01, "okval": 1},
+            "SpeedMin": threshold.FAN_SPEED_MIN,
+            "SpeedMax": threshold.FAN_SPEED_MAX,
+            "led": {"loc": "/dev/cpld1", "offset": 0x93, "len": 1, "way": "devfile"},
+            "led_attrs": {
+                "off": 0x00, "red_flash": 0x01, "red": 0x02,
+                "green_flash": 0x03, "green": 0x04, "amber_flash": 0x05,
+                "amber": 0x06, "mask": 0x07
+            },
+            "PowerMax": 6.6,
+            "Rotor": {
+                "Rotor1_config": {
+                    "name": "Rotor1",
+                    "Set_speed": {"loc": "/dev/cpld1", "offset": 0x91, "len": 1, "way": "devfile"},
+                    "Running": {"loc": "/sys/wb_plat/fan/fan2/motor0/status", "way": "sysfs", "mask": 0x01, "is_runing": 1},
+                    "HwAlarm": {"loc": "/sys/wb_plat/fan/fan2/motor0/status", "way": "sysfs", "mask": 0x01, "no_alarm": 1},
+                    "SpeedMin": threshold.FAN_SPEED_MIN,
+                    "SpeedMax": threshold.FAN_SPEED_MAX,
+                    "Speed": {
+                        "value": {"loc": "/sys/wb_plat/fan/fan2/motor0/speed", "way": "sysfs"},
+                        "Min": threshold.FAN_SPEED_MIN,
+                        "Max": threshold.FAN_SPEED_MAX,
+                        "Unit": Unit.Speed,
+                    },
+                },
+            },
+        },
+
+
+    ],
+    "cplds": [
+        {
+            "name": "CPU_CPLD",
+            "cpld_id": "CPLD1",
+            "VersionFile": {"loc": "/dev/cpld0", "offset": 0, "len": 4, "way": "devfile_ascii"},
+            "desc": "Used for system power",
+            "slot": 0,
+            "warm": 0,
+        },
+        {
+            "name": "CTRL_CPLD",
+            "cpld_id": "CPLD2",
+            "VersionFile": {"loc": "/dev/cpld1", "offset": 0, "len": 4, "way": "devfile_ascii"},
+            "desc": "Used for base functions",
+            "slot": 0,
+            "warm": 0,
+        },
+        {
+            "name": "PORT_CPLD",
+            "cpld_id": "CPLD3",
+            "VersionFile": {"loc": "/dev/cpld2", "offset": 0, "len": 4, "way": "devfile_ascii"},
+            "desc": "Used for sff modules",
+            "slot": 0,
+            "warm": 0,
+        },
+        {
+            "name": "BIOS",
+            "cpld_id": "CPLD4",
+            "VersionFile": {"cmd": "dmidecode -s bios-version", "way": "cmd"},
+            "desc": "Performs initialization of hardware components during booting",
+            "slot": 0,
+            "type": "str",
+            "warm": 0,
+        }
+    ],
+    "dcdc": [
+        {
+            "name": "VDD_CORE_0.8V",
+            "dcdc_id": "DCDC1",
+            "Min": 784,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/17-0058/hwmon/hwmon*/in3_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 893,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "PVCCP",
+            "dcdc_id": "DCDC2",
+            "Min": 468,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/0-0068/hwmon/hwmon*/in3_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1364,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "PVNN",
+            "dcdc_id": "DCDC3",
+            "Min": 585,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/0-0068/hwmon/hwmon*/in4_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1364,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "P1V05",
+            "dcdc_id": "DCDC4",
+            "Min": 945,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/0-006e/hwmon/hwmon*/in3_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1155,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "VCCRAM",
+            "dcdc_id": "DCDC5",
+            "Min": 675,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/0-006e/hwmon/hwmon*/in4_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1320,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "P1V2_VDDQ",
+            "dcdc_id": "DCDC6",
+            "Min": 1080,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/0-005e/hwmon/hwmon*/in3_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1320,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "CPU_VDD1.8V",
+            "dcdc_id": "DCDC7",
+            "Min": 1620,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0040/hwmon/hwmon*/in1_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1980,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "P3V3_STBY",
+            "dcdc_id": "DCDC8",
+            "Min": 2970,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0040/hwmon/hwmon*/in2_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 3630,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "P5V_AUX",
+            "dcdc_id": "DCDC9",
+            "Min": 4500,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0040/hwmon/hwmon*/in3_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 5500,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "VDD1.2V",
+            "dcdc_id": "DCDC10",
+            "Min": 1140,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0041/hwmon/hwmon*/in1_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1260,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "VDD1.8V",
+            "dcdc_id": "DCDC11",
+            "Min": 1710,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0041/hwmon/hwmon*/in2_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1890,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "VDD3.3V",
+            "dcdc_id": "DCDC12",
+            "Min": 3200,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0041/hwmon/hwmon*/in3_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 3600,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "VDD1.0V",
+            "dcdc_id": "DCDC13",
+            "Min": 969,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0042/hwmon/hwmon*/in1_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 1071,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "VDD3.3V_SFP",
+            "dcdc_id": "DCDC14",
+            "Min": 3200,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0042/hwmon/hwmon*/in2_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 3600,
+            "format": "float(float(%s)/1000)",
+        },
+        {
+            "name": "VAN_0.8V",
+            "dcdc_id": "DCDC15",
+            "Min": 784,
+            "value": {
+                "loc": "/sys/bus/i2c/devices/3-0042/hwmon/hwmon*/in3_input",
+                "way": "sysfs",
+            },
+            "read_times": 5,
+            "Unit": "V",
+            "Max": 893,
+            "format": "float(float(%s)/1000)",
+        },
+    ],
+    "cpu": [
+        {
+            "name": "cpu",
+            "reboot_cause_path": "/etc/sonic/.reboot/.previous-reboot-cause.txt"
+        }
+    ],
+    "sfps": {
+        "ver": '1.0',
+        "port_index_start": 0,
+        "port_num": 52,
+        "log_level": 2,
+        "eeprom_retry_times": 5,
+        "eeprom_retry_break_sec": 0.2,
+        "presence_cpld": {
+            "dev_id": {
+                5: {
+                    "offset": {
+                        0x30: "50,49,52,51",
+                    },
+                },
+            },
+        },
+        "presence_val_is_present": 0,
+        "eeprom_path": "/sys/bus/i2c/devices/i2c-%d/%d-0050/eeprom",
+        "eeprom_path_key": [11]*48 + list(range(11, 15)),
+        "optoe_driver_path": "/sys/bus/i2c/devices/i2c-%d/%d-0050/dev_class",
+        "optoe_driver_key": list(range(11, 15)),
+        "txdis_cpld": {
+            "dev_id": {
+                5: {
+                    "offset": {
+                        0x90: "50,49,52,51",
+                    },
+                },
+            },
+        },
+        "txdisable_val_is_on": 1,
+    }
+}
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_exhaust_monitor.py b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_exhaust_monitor.py
new file mode 100644
index 000000000..8642d8c19
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_exhaust_monitor.py
@@ -0,0 +1,141 @@
+# coding:utf-8
+
+
+monitor = {
+    "openloop": {
+        "linear": {
+            "name": "linear",
+            "flag": 0,
+            "pwm_min": 0x55,
+            "pwm_max": 0xff,
+            "K": 11,
+            "tin_min": 38,
+        },
+        "curve": {
+            "name": "curve",
+            "flag": 1,
+            "pwm_min": 0x55,
+            "pwm_max": 0xff,
+            "a": -0.05,
+            "b": 11.32,
+            "c": -166,
+            "tin_min": 25,
+        },
+    },
+
+    "pid": {
+        "CPU_TEMP": {
+            "name": "CPU_TEMP",
+            "flag": 1,
+            "type": "duty",
+            "pwm_min": 0x55,
+            "pwm_max": 0xff,
+            "Kp": 1,
+            "Ki": 0.4,
+            "Kd": 0,
+            "target": 80,
+            "value": [None, None, None],
+        },
+        "SWITCH_TEMP": {
+            "name": "SWITCH_TEMP",
+            "flag": 1,
+            "type": "duty",
+            "pwm_min": 0x55,
+            "pwm_max": 0xff,
+            "Kp": 1,
+            "Ki": 0.4,
+            "Kd": 0.3,
+            "target": 90,
+            "value": [None, None, None],
+        },
+        "OUTLET_TEMP": {
+            "name": "OUTLET_TEMP",
+            "flag": 1,
+            "type": "duty",
+            "pwm_min": 0x55,
+            "pwm_max": 0xff,
+            "Kp": 2,
+            "Ki": 0.4,
+            "Kd": 0.3,
+            "target": 60,
+            "value": [None, None, None],
+        },
+        "SFF_TEMP": {
+            "name": "SFF_TEMP",
+            "flag": 1,
+            "type": "duty",
+            "pwm_min": 0x55,
+            "pwm_max": 0xff,
+            "Kp": 2,
+            "Ki": 0.4,
+            "Kd": 0,
+            "target": 65,
+            "value": [None, None, None],
+        },
+    },
+
+    "temps_threshold": {
+        "SWITCH_TEMP": {"name": "SWITCH_TEMP", "warning": 105, "critical": 110},
+        "INLET_TEMP": {"name": "INLET_TEMP", "warning": 55, "critical": 60},
+        "OUTLET_TEMP": {"name": "OUTLET_TEMP", "warning": 70, "critical": 75},
+        "CPU_TEMP": {"name": "CPU_TEMP", "warning": 85, "critical": 91},
+        "SFF_TEMP": {"name": "SFF_TEMP", "warning": 999, "critical": 1000, "ignore_threshold": 1, "invalid": -10000, "error": -9999},
+    },
+
+    "fancontrol_para": {
+        "interval": 5,
+        "fan_air_flow_monitor": 1,
+        "psu_air_flow_monitor": 1,
+        "max_pwm": 0xff,
+        "min_pwm": 0x55,
+        "abnormal_pwm": 0xff,
+        "warning_pwm": 0xff,
+        "temp_invalid_pid_pwm": 0x55,
+        "temp_error_pid_pwm": 0x55,
+        "temp_fail_num": 3,
+        "check_temp_fail": [
+            {"temp_name": "INLET_TEMP"},
+            {"temp_name": "SWITCH_TEMP"},
+            {"temp_name": "CPU_TEMP"},
+        ],
+        "temp_warning_num": 3,  # temp over warning 3 times continuously
+        "temp_critical_num": 3,  # temp over critical 3 times continuously
+        "temp_warning_countdown": 60,  # 5 min warning speed after not warning
+        "temp_critical_countdown": 60,  # 5 min full speed after not critical
+        "rotor_error_count": 6,  # fan rotor error 6 times continuously
+        "inlet_mac_diff": 999,
+        "check_crit_reboot_flag": 1,
+        "check_crit_reboot_num": 3,
+        "check_crit_sleep_time": 20,
+        "psu_absent_fullspeed_num": 1,
+        "fan_absent_fullspeed_num": 1,
+        "rotor_error_fullspeed_num": 1,
+        "psu_fan_control": 0,
+    },
+
+    "ledcontrol_para": {
+        "interval": 5,
+        "checkpsu": 0,  # 0: sys led don't follow psu led
+        "checkfan": 0,  # 0: sys led don't follow fan led
+        "psu_amber_num": 1,
+        "fan_amber_num": 1,
+        "board_sys_led": [
+            {"led_name": "FRONT_SYS_LED"},
+        ],
+        "board_psu_led": [
+            {"led_name": "FRONT_PSU_LED"},
+        ],
+        "board_fan_led": [
+            {"led_name": "FRONT_FAN_LED"},
+        ],
+        "psu_air_flow_monitor": 1,
+        "fan_air_flow_monitor": 1,
+        "psu_air_flow_amber_num": 1,
+        "fan_air_flow_amber_num": 1,
+    },
+
+    "otp_reboot_judge_file": {
+        "otp_switch_reboot_judge_file": "/etc/.otp_switch_reboot_flag",
+        "otp_other_reboot_judge_file": "/etc/.otp_other_reboot_flag",
+    },
+}
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_monitor.py b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_monitor.py
new file mode 100644
index 000000000..12704226a
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/hal-config/x86_64_micas_m2_w6510_48gt4v_r0_monitor.py
@@ -0,0 +1,141 @@
+# coding:utf-8
+
+
+monitor = {
+    "openloop": {
+        "linear": {
+            "name": "linear",
+            "flag": 0,
+            "pwm_min": 0x55,
+            "pwm_max": 0xff,
+            "K": 11,
+            "tin_min": 38,
+        },
+        "curve": {
+            "name": "curve",
+            "flag": 1,
+            "pwm_min": 0x55,
+            "pwm_max": 0xff,
+            "a": -0.05,
+            "b": 11.32,
+            "c": -166,
+            "tin_min": 25,
+        },
+    },
+
+    "pid": {
+        "CPU_TEMP": {
+            "name": "CPU_TEMP",
+            "flag": 1,
+            "type": "duty",
+            "pwm_min": 0x55,
+            "pwm_max": 0xff,
+            "Kp": 1,
+            "Ki": 0.4,
+            "Kd": 0,
+            "target": 80,
+            "value": [None, None, None],
+        },
+        "SWITCH_TEMP": {
+            "name": "SWITCH_TEMP",
+            "flag": 1,
+            "type": "duty",
+            "pwm_min": 0x55,
+            "pwm_max": 0xff,
+            "Kp": 1,
+            "Ki": 0.4,
+            "Kd": 0.3,
+            "target": 90,
+            "value": [None, None, None],
+        },
+        "OUTLET_TEMP": {
+            "name": "OUTLET_TEMP",
+            "flag": 1,
+            "type": "duty",
+            "pwm_min": 0x55,
+            "pwm_max": 0xff,
+            "Kp": 2,
+            "Ki": 0.4,
+            "Kd": 0.3,
+            "target": 60,
+            "value": [None, None, None],
+        },
+        "SFF_TEMP": {
+            "name": "SFF_TEMP",
+            "flag": 1,
+            "type": "duty",
+            "pwm_min": 0x55,
+            "pwm_max": 0xff,
+            "Kp": 1,
+            "Ki": 1,
+            "Kd": 0.3,
+            "target": 65,
+            "value": [None, None, None],
+        },
+    },
+
+    "temps_threshold": {
+        "SWITCH_TEMP": {"name": "SWITCH_TEMP", "warning": 105, "critical": 110},
+        "INLET_TEMP": {"name": "INLET_TEMP", "warning": 55, "critical": 60},
+        "OUTLET_TEMP": {"name": "OUTLET_TEMP", "warning": 70, "critical": 75},
+        "CPU_TEMP": {"name": "CPU_TEMP", "warning": 85, "critical": 91},
+        "SFF_TEMP": {"name": "SFF_TEMP", "warning": 999, "critical": 1000, "ignore_threshold": 1, "invalid": -10000, "error": -9999},
+    },
+
+    "fancontrol_para": {
+        "interval": 5,
+        "fan_air_flow_monitor": 1,
+        "psu_air_flow_monitor": 1,
+        "max_pwm": 0xff,
+        "min_pwm": 0x55,
+        "abnormal_pwm": 0xff,
+        "warning_pwm": 0xff,
+        "temp_invalid_pid_pwm": 0x55,
+        "temp_error_pid_pwm": 0x55,
+        "temp_fail_num": 3,
+        "check_temp_fail": [
+            {"temp_name": "INLET_TEMP"},
+            {"temp_name": "SWITCH_TEMP"},
+            {"temp_name": "CPU_TEMP"},
+        ],
+        "temp_warning_num": 3,  # temp over warning 3 times continuously
+        "temp_critical_num": 3,  # temp over critical 3 times continuously
+        "temp_warning_countdown": 60,  # 5 min warning speed after not warning
+        "temp_critical_countdown": 60,  # 5 min full speed after not critical
+        "rotor_error_count": 6,  # fan rotor error 6 times continuously
+        "inlet_mac_diff": 999,
+        "check_crit_reboot_flag": 1,
+        "check_crit_reboot_num": 3,
+        "check_crit_sleep_time": 20,
+        "psu_absent_fullspeed_num": 1,
+        "fan_absent_fullspeed_num": 1,
+        "rotor_error_fullspeed_num": 1,
+        "psu_fan_control": 0,
+    },
+
+    "ledcontrol_para": {
+        "interval": 5,
+        "checkpsu": 0,  # 0: sys led don't follow psu led
+        "checkfan": 0,  # 0: sys led don't follow fan led
+        "psu_amber_num": 1,
+        "fan_amber_num": 1,
+        "board_sys_led": [
+            {"led_name": "FRONT_SYS_LED"},
+        ],
+        "board_psu_led": [
+            {"led_name": "FRONT_PSU_LED"},
+        ],
+        "board_fan_led": [
+            {"led_name": "FRONT_FAN_LED"},
+        ],
+        "psu_air_flow_monitor": 1,
+        "fan_air_flow_monitor": 1,
+        "psu_air_flow_amber_num": 1,
+        "fan_air_flow_amber_num": 1,
+    },
+
+    "otp_reboot_judge_file": {
+        "otp_switch_reboot_judge_file": "/etc/.otp_switch_reboot_flag",
+        "otp_other_reboot_judge_file": "/etc/.otp_other_reboot_flag",
+    },
+}
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/Makefile b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/Makefile
new file mode 100644
index 000000000..beabc653c
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/Makefile
@@ -0,0 +1,10 @@
+MAKEFILE_FILE_PATH = $(abspath $(lastword $(MAKEFILE_LIST)))
+MODULES_DIR = $(abspath $(MAKEFILE_FILE_PATH)/../../../../common/modules)
+
+EXTRA_CFLAGS+= -I$(MODULES_DIR)
+
+obj-m += wb_i2c_mux_pca954x_device.o
+obj-m += wb_lpc_drv_device.o
+obj-m += wb_i2c_dev_device.o
+obj-m += wb_io_dev_device.o
+obj-m += wb_wdt_device.o
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_i2c_dev_device.c b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_i2c_dev_device.c
new file mode 100644
index 000000000..6e187eae9
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_i2c_dev_device.c
@@ -0,0 +1,145 @@
+/*
+ * An wb_i2c_dev_device driver for i2c device function
+ *
+ * Copyright (C) 2024 Micas Networks Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/module.h>
+#include <linux/io.h>
+#include <linux/i2c.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+
+#include <wb_i2c_dev.h>
+
+static int g_wb_i2c_dev_device_debug = 0;
+static int g_wb_i2c_dev_device_error = 0;
+
+module_param(g_wb_i2c_dev_device_debug, int, S_IRUGO | S_IWUSR);
+module_param(g_wb_i2c_dev_device_error, int, S_IRUGO | S_IWUSR);
+
+#define WB_I2C_DEV_DEVICE_DEBUG_VERBOSE(fmt, args...) do {                                        \
+    if (g_wb_i2c_dev_device_debug) { \
+        printk(KERN_INFO "[WB_I2C_DEV_DEVICE][VER][func:%s line:%d]\r\n"fmt, __func__, __LINE__, ## args); \
+    } \
+} while (0)
+
+#define WB_I2C_DEV_DEVICE_DEBUG_ERROR(fmt, args...) do {                                        \
+    if (g_wb_i2c_dev_device_error) { \
+        printk(KERN_ERR "[WB_I2C_DEV_DEVICE][ERR][func:%s line:%d]\r\n"fmt, __func__, __LINE__, ## args); \
+    } \
+} while (0)
+
+static i2c_dev_device_t i2c_dev_device_data0 = {
+    .i2c_bus = 0,
+    .i2c_addr = 0x0d,
+    .i2c_name = "cpld3",
+    .data_bus_width = 1,
+    .addr_bus_width = 1,
+    .per_rd_len = 256,
+    .per_wr_len = 256,
+    .i2c_len = 256,
+};
+
+static i2c_dev_device_t i2c_dev_device_data1 = {
+    .i2c_bus = 15,
+    .i2c_addr = 0x51,
+    .i2c_name = "cpld4",
+    .data_bus_width = 1,
+    .addr_bus_width = 1,
+    .per_rd_len = 256,
+    .per_wr_len = 256,
+    .i2c_len = 256,
+};
+
+static i2c_dev_device_t i2c_dev_device_data2 = {
+    .i2c_bus = 16,
+    .i2c_addr = 0x52,
+    .i2c_name = "cpld5",
+    .data_bus_width = 1,
+    .addr_bus_width = 1,
+    .per_rd_len = 256,
+    .per_wr_len = 256,
+    .i2c_len = 256,
+};
+
+struct i2c_board_info i2c_dev_device_info[] = {
+    {
+        .type = "wb-i2c-dev",
+        .platform_data = &i2c_dev_device_data0,
+    },
+    {
+        .type = "wb-i2c-dev",
+        .platform_data = &i2c_dev_device_data1,
+    },
+    {
+        .type = "wb-i2c-dev",
+        .platform_data = &i2c_dev_device_data2,
+    },
+};
+
+static int __init wb_i2c_dev_device_init(void)
+{
+    int i;
+    struct i2c_adapter *adap;
+    struct i2c_client *client;
+    i2c_dev_device_t *i2c_dev_device_data;
+
+    WB_I2C_DEV_DEVICE_DEBUG_VERBOSE("enter!\n");
+    for (i = 0; i < ARRAY_SIZE(i2c_dev_device_info); i++) {
+        i2c_dev_device_data = i2c_dev_device_info[i].platform_data;
+        i2c_dev_device_info[i].addr = i2c_dev_device_data->i2c_addr;
+        adap = i2c_get_adapter(i2c_dev_device_data->i2c_bus);
+        if (adap == NULL) {
+            i2c_dev_device_data->client = NULL;
+            printk(KERN_ERR "get i2c bus %d adapter fail.\n", i2c_dev_device_data->i2c_bus);
+            continue;
+        }
+        client = i2c_new_client_device(adap, &i2c_dev_device_info[i]);
+        if (!client) {
+            i2c_dev_device_data->client = NULL;
+            printk(KERN_ERR "Failed to register i2c dev device %d at bus %d!\n",
+                i2c_dev_device_data->i2c_addr, i2c_dev_device_data->i2c_bus);
+        } else {
+            i2c_dev_device_data->client = client;
+        }
+        i2c_put_adapter(adap);
+    }
+    return 0;
+}
+
+static void __exit wb_i2c_dev_device_exit(void)
+{
+    int i;
+    i2c_dev_device_t *i2c_dev_device_data;
+
+    WB_I2C_DEV_DEVICE_DEBUG_VERBOSE("enter!\n");
+    for (i = ARRAY_SIZE(i2c_dev_device_info) - 1; i >= 0; i--) {
+        i2c_dev_device_data = i2c_dev_device_info[i].platform_data;
+        if (i2c_dev_device_data->client) {
+            i2c_unregister_device(i2c_dev_device_data->client);
+            i2c_dev_device_data->client = NULL;
+        }
+    }
+}
+
+module_init(wb_i2c_dev_device_init);
+module_exit(wb_i2c_dev_device_exit);
+MODULE_DESCRIPTION("I2C DEV Devices");
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("support");
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_i2c_mux_pca954x_device.c b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_i2c_mux_pca954x_device.c
new file mode 100644
index 000000000..387ad5b22
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_i2c_mux_pca954x_device.c
@@ -0,0 +1,146 @@
+/*
+ * An wb_i2c_mux_pca954x_device driver for pca954x i2c load device function
+ *
+ * Copyright (C) 2024 Micas Networks Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+ 
+#include <linux/module.h>
+#include <linux/io.h>
+#include <linux/i2c.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+
+#include <wb_i2c_mux_pca954x.h>
+
+static int g_wb_i2c_mux_pca954x_device_debug = 0;
+static int g_wb_i2c_mux_pca954x_device_error = 0;
+
+module_param(g_wb_i2c_mux_pca954x_device_debug, int, S_IRUGO | S_IWUSR);
+module_param(g_wb_i2c_mux_pca954x_device_error, int, S_IRUGO | S_IWUSR);
+
+#define WB_I2C_MUX_PCA954X_DEVICE_DEBUG_VERBOSE(fmt, args...) do {                                        \
+    if (g_wb_i2c_mux_pca954x_device_debug) { \
+        printk(KERN_INFO "[WB_I2C_MUX_PCA954X_DEVICE][VER][func:%s line:%d]\r\n"fmt, __func__, __LINE__, ## args); \
+    } \
+} while (0)
+
+#define WB_I2C_MUX_PCA954X_DEVICE_DEBUG_ERROR(fmt, args...) do {                                        \
+    if (g_wb_i2c_mux_pca954x_device_error) { \
+        printk(KERN_ERR "[WB_I2C_MUX_PCA954X_DEVICE][ERR][func:%s line:%d]\r\n"fmt, __func__, __LINE__, ## args); \
+    } \
+} while (0)
+
+static i2c_mux_pca954x_device_t i2c_mux_pca954x_device_data0 = {
+    .i2c_bus                        = 0,
+    .i2c_addr                       = 0x70,
+    .probe_disable                  = 1,
+    .select_chan_check              = 0,
+    .close_chan_force_reset         = 1,
+    .pca9548_base_nr                = 3,
+    .pca9548_reset_type             = PCA9548_RESET_IO,
+    .rst_delay_b                    = 0,
+    .rst_delay                      = 1000,
+    .rst_delay_a                    = 1000,
+    .attr = {
+        .io_attr.io_addr            = 0x93b,
+        .io_attr.mask               = 0x01,
+        .io_attr.reset_on           = 0,
+        .io_attr.reset_off          = 0x01,
+    },
+};
+
+static i2c_mux_pca954x_device_t i2c_mux_pca954x_device_data1 = {
+    .i2c_bus                        = 2,
+    .i2c_addr                       = 0x74,
+    .probe_disable                  = 1,
+    .select_chan_check              = 0,
+    .close_chan_force_reset         = 1,
+    .pca9548_base_nr                = 11,
+    .pca9548_reset_type             = PCA9548_RESET_IO,
+    .rst_delay_b                    = 0,
+    .rst_delay                      = 1000,
+    .rst_delay_a                    = 1000,
+    .attr = {
+        .io_attr.io_addr            = 0x935,
+        .io_attr.mask               = 0x40,
+        .io_attr.reset_on           = 0,
+        .io_attr.reset_off          = 0x40,
+    },
+};
+
+struct i2c_board_info i2c_mux_pca954x_device_info[] = {
+    {
+        .type = "wb_pca9548",
+        .platform_data = &i2c_mux_pca954x_device_data0,
+    },
+    {
+        .type = "wb_pca9548",
+        .platform_data = &i2c_mux_pca954x_device_data1,
+    },
+};
+
+static int __init wb_i2c_mux_pca954x_device_init(void)
+{
+    int i;
+    struct i2c_adapter *adap;
+    struct i2c_client *client;
+    i2c_mux_pca954x_device_t *i2c_mux_pca954x_device_data;
+
+    WB_I2C_MUX_PCA954X_DEVICE_DEBUG_VERBOSE("enter!\n");
+    for (i = 0; i < ARRAY_SIZE(i2c_mux_pca954x_device_info); i++) {
+        i2c_mux_pca954x_device_data = i2c_mux_pca954x_device_info[i].platform_data;
+        i2c_mux_pca954x_device_info[i].addr = i2c_mux_pca954x_device_data->i2c_addr;
+        adap = i2c_get_adapter(i2c_mux_pca954x_device_data->i2c_bus);
+        if (adap == NULL) {
+            i2c_mux_pca954x_device_data->client = NULL;
+            printk(KERN_ERR "get i2c bus %d adapter fail.\n", i2c_mux_pca954x_device_data->i2c_bus);
+            continue;
+        }
+        client = i2c_new_client_device(adap, &i2c_mux_pca954x_device_info[i]);
+        if (!client) {
+            i2c_mux_pca954x_device_data->client = NULL;
+            printk(KERN_ERR "Failed to register pca954x device %d at bus %d!\n",
+                i2c_mux_pca954x_device_data->i2c_addr, i2c_mux_pca954x_device_data->i2c_bus);
+        } else {
+            i2c_mux_pca954x_device_data->client = client;
+        }
+        i2c_put_adapter(adap);
+    }
+    return 0;
+}
+
+static void __exit wb_i2c_mux_pca954x_device_exit(void)
+{
+    int i;
+    i2c_mux_pca954x_device_t *i2c_mux_pca954x_device_data;
+
+    WB_I2C_MUX_PCA954X_DEVICE_DEBUG_VERBOSE("enter!\n");
+    for (i = ARRAY_SIZE(i2c_mux_pca954x_device_info) - 1; i >= 0; i--) {
+        i2c_mux_pca954x_device_data = i2c_mux_pca954x_device_info[i].platform_data;
+        if (i2c_mux_pca954x_device_data->client) {
+            i2c_unregister_device(i2c_mux_pca954x_device_data->client);
+            i2c_mux_pca954x_device_data->client = NULL;
+        }
+    }
+}
+
+module_init(wb_i2c_mux_pca954x_device_init);
+module_exit(wb_i2c_mux_pca954x_device_exit);
+MODULE_DESCRIPTION("I2C MUX PCA954X Devices");
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("support");
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_io_dev_device.c b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_io_dev_device.c
new file mode 100644
index 000000000..62cc4c459
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_io_dev_device.c
@@ -0,0 +1,138 @@
+/*
+ * An wb_i2c_dev_device driver for i2c io device function
+ *
+ * Copyright (C) 2024 Micas Networks Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+ 
+#include <linux/module.h>
+#include <linux/io.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+
+#include <wb_io_dev.h>
+
+static int g_wb_io_dev_device_debug = 0;
+static int g_wb_io_dev_device_error = 0;
+
+module_param(g_wb_io_dev_device_debug, int, S_IRUGO | S_IWUSR);
+module_param(g_wb_io_dev_device_error, int, S_IRUGO | S_IWUSR);
+
+#define WB_IO_DEV_DEVICE_DEBUG_VERBOSE(fmt, args...) do {                                        \
+    if (g_wb_io_dev_device_debug) { \
+        printk(KERN_INFO "[WB_IO_DEV_DEVICE][VER][func:%s line:%d]\r\n"fmt, __func__, __LINE__, ## args); \
+    } \
+} while (0)
+
+#define WB_IO_DEV_DEVICE_DEBUG_ERROR(fmt, args...) do {                                        \
+    if (g_wb_io_dev_device_error) { \
+        printk(KERN_ERR "[WB_IO_DEV_DEVICE][ERR][func:%s line:%d]\r\n"fmt, __func__, __LINE__, ## args); \
+    } \
+} while (0)
+
+static io_dev_device_t io_dev_device_data0 = {
+    .io_dev_name = "cpld0",
+    .io_base = 0x700,
+    .io_len = 0x100,
+    .indirect_addr = 0,
+};
+
+static io_dev_device_t io_dev_device_data1 = {
+    .io_dev_name = "cpld1",
+    .io_base = 0x900,
+    .io_len = 0x100,
+    .indirect_addr = 0,
+};
+
+static io_dev_device_t io_dev_device_data2 = {
+    .io_dev_name = "cpld2",
+    .io_base = 0xb00,
+    .io_len = 0x100,
+    .indirect_addr = 0,
+};
+
+static void wb_io_dev_device_release(struct device *dev)
+{
+    return;
+}
+
+static struct platform_device io_dev_device[] = {
+    {
+        .name   = "wb-io-dev",
+        .id = 1,
+        .dev    = {
+            .platform_data  = &io_dev_device_data0,
+            .release = wb_io_dev_device_release,
+        },
+    },
+    {
+        .name   = "wb-io-dev",
+        .id = 2,
+        .dev    = {
+            .platform_data  = &io_dev_device_data1,
+            .release = wb_io_dev_device_release,
+        },
+    },
+    {
+        .name   = "wb-io-dev",
+        .id = 3,
+        .dev    = {
+            .platform_data  = &io_dev_device_data2,
+            .release = wb_io_dev_device_release,
+        },
+    },
+};
+
+static int __init wb_io_dev_device_init(void)
+{
+    int i;
+    int ret = 0;
+    io_dev_device_t *io_dev_device_data;
+
+    WB_IO_DEV_DEVICE_DEBUG_VERBOSE("enter!\n");
+    for (i = 0; i < ARRAY_SIZE(io_dev_device); i++) {
+        io_dev_device_data = io_dev_device[i].dev.platform_data;
+        ret = platform_device_register(&io_dev_device[i]);
+        if (ret < 0) {
+            io_dev_device_data->device_flag = -1; /* device register failed, set flag -1 */
+            printk(KERN_ERR "wb-io-dev.%d register failed!\n", i + 1);
+        } else {
+            io_dev_device_data->device_flag = 0; /* device register suucess, set flag 0 */
+        }
+    }
+    return 0;
+}
+
+static void __exit wb_io_dev_device_exit(void)
+{
+    int i;
+    io_dev_device_t *io_dev_device_data;
+
+    WB_IO_DEV_DEVICE_DEBUG_VERBOSE("enter!\n");
+    for (i = ARRAY_SIZE(io_dev_device) - 1; i >= 0; i--) {
+        io_dev_device_data = io_dev_device[i].dev.platform_data;
+        if (io_dev_device_data->device_flag == 0) { /* device register success, need unregister */
+            platform_device_unregister(&io_dev_device[i]);
+        }
+    }
+}
+
+module_init(wb_io_dev_device_init);
+module_exit(wb_io_dev_device_exit);
+MODULE_DESCRIPTION("IO DEV Devices");
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("support");
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_lpc_drv_device.c b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_lpc_drv_device.c
new file mode 100644
index 000000000..363d670d5
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_lpc_drv_device.c
@@ -0,0 +1,150 @@
+/*
+ * An wb_i2c_ocores_device driver for i2c ocore device function
+ *
+ * Copyright (C) 2024 Micas Networks Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/module.h>
+#include <linux/io.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+
+#include <wb_lpc_drv.h>
+
+static int g_wb_lpc_drv_device_debug = 0;
+static int g_wb_lpc_drv_device_error = 0;
+
+module_param(g_wb_lpc_drv_device_debug, int, S_IRUGO | S_IWUSR);
+module_param(g_wb_lpc_drv_device_error, int, S_IRUGO | S_IWUSR);
+
+#define WB_LPC_DRV_DEVICE_DEBUG_VERBOSE(fmt, args...) do {                                        \
+    if (g_wb_lpc_drv_device_debug) { \
+        printk(KERN_INFO "[WB_LPC_DRV_DEVICE][VER][func:%s line:%d]\r\n"fmt, __func__, __LINE__, ## args); \
+    } \
+} while (0)
+
+#define WB_LPC_DRV_DEVICE_DEBUG_ERROR(fmt, args...) do {                                        \
+    if (g_wb_lpc_drv_device_error) { \
+        printk(KERN_ERR "[WB_LPC_DRV_DEVICE][ERR][func:%s line:%d]\r\n"fmt, __func__, __LINE__, ## args); \
+    } \
+} while (0)
+
+static lpc_drv_device_t lpc_drv_device_data_0 = {
+    .lpc_io_name = "wb_lpc",
+    .pci_domain = 0x0000,
+    .pci_bus = 0x00,
+    .pci_slot = 0x1f,
+    .pci_fn = 0,
+    .lpc_io_base = 0x700,
+    .lpc_io_size = 0x100,
+    .lpc_gen_dec = 0x84,
+};
+
+static lpc_drv_device_t lpc_drv_device_data_1 = {
+    .lpc_io_name = "wb_lpc",
+    .pci_domain = 0x0000,
+    .pci_bus = 0x00,
+    .pci_slot = 0x1f,
+    .pci_fn = 0,
+    .lpc_io_base = 0x900,
+    .lpc_io_size = 0x100,
+    .lpc_gen_dec = 0x88,
+};
+
+static lpc_drv_device_t lpc_drv_device_data_2 = {
+    .lpc_io_name = "wb_lpc",
+    .pci_domain = 0x0000,
+    .pci_bus = 0x00,
+    .pci_slot = 0x1f,
+    .pci_fn = 0,
+    .lpc_io_base = 0xb00,
+    .lpc_io_size = 0x100,
+    .lpc_gen_dec = 0x90,
+};
+
+static void wb_lpc_drv_device_release(struct device *dev)
+{
+    return;
+}
+
+static struct platform_device lpc_drv_device[] = {
+    {
+        .name   = "wb-lpc",
+        .id = 1,
+        .dev    = {
+            .platform_data  = &lpc_drv_device_data_0,
+            .release = wb_lpc_drv_device_release,
+        },
+    },
+    {
+        .name   = "wb-lpc",
+        .id = 2,
+        .dev    = {
+            .platform_data  = &lpc_drv_device_data_1,
+            .release = wb_lpc_drv_device_release,
+        },
+    },
+    {
+        .name   = "wb-lpc",
+        .id = 3,
+        .dev    = {
+            .platform_data  = &lpc_drv_device_data_2,
+            .release = wb_lpc_drv_device_release,
+        },
+    },
+};
+
+static int __init wb_lpc_drv_device_init(void)
+{
+    int i;
+    int ret = 0;
+    lpc_drv_device_t *lpc_drv_device_data;
+
+    WB_LPC_DRV_DEVICE_DEBUG_VERBOSE("enter!\n");
+    for (i = 0; i < ARRAY_SIZE(lpc_drv_device); i++) {
+        lpc_drv_device_data = lpc_drv_device[i].dev.platform_data;
+        ret = platform_device_register(&lpc_drv_device[i]);
+        if (ret < 0) {
+            lpc_drv_device_data->device_flag = -1; /* device register failed, set flag -1 */
+            printk(KERN_ERR "wb-lpc.%d register failed!\n", i + 1);
+        } else {
+            lpc_drv_device_data->device_flag = 0; /* device register suucess, set flag 0 */
+        }
+    }
+    return 0;
+}
+
+static void __exit wb_lpc_drv_device_exit(void)
+{
+    int i;
+    lpc_drv_device_t *lpc_drv_device_data;
+
+    WB_LPC_DRV_DEVICE_DEBUG_VERBOSE("enter!\n");
+    for (i = ARRAY_SIZE(lpc_drv_device) - 1; i >= 0; i--) {
+        lpc_drv_device_data = lpc_drv_device[i].dev.platform_data;
+        if (lpc_drv_device_data->device_flag == 0) { /* device register success, need unregister */
+            platform_device_unregister(&lpc_drv_device[i]);
+        }
+    }
+}
+
+module_init(wb_lpc_drv_device_init);
+module_exit(wb_lpc_drv_device_exit);
+MODULE_DESCRIPTION("LPC DRV Devices");
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("support");
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_wdt_device.c b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_wdt_device.c
new file mode 100644
index 000000000..e49ba375c
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/modules/driver/wb_wdt_device.c
@@ -0,0 +1,130 @@
+/*
+ * An wb_wdt_device driver for watchdog device function
+ *
+ * Copyright (C) 2024 Micas Networks Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/module.h>
+#include <linux/io.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+
+#include <wb_wdt.h>
+
+static int g_wb_wdt_device_debug = 0;
+static int g_wb_wdt_device_error = 0;
+
+module_param(g_wb_wdt_device_debug, int, S_IRUGO | S_IWUSR);
+module_param(g_wb_wdt_device_error, int, S_IRUGO | S_IWUSR);
+
+#define WB_WDT_DEVICE_DEBUG_VERBOSE(fmt, args...) do {                                        \
+    if (g_wb_wdt_device_debug) { \
+        printk(KERN_INFO "[WB_WDT_DEVICE][VER][func:%s line:%d]\r\n"fmt, __func__, __LINE__, ## args); \
+    } \
+} while (0)
+
+#define WB_WDT_DEVICE_DEBUG_ERROR(fmt, args...) do {                                        \
+    if (g_wb_wdt_device_error) { \
+        printk(KERN_ERR "[WB_WDT_DEVICE][ERR][func:%s line:%d]\r\n"fmt, __func__, __LINE__, ## args); \
+    } \
+} while (0)
+
+static wb_wdt_device_t wb_wdt_device_data_0 = {
+    .config_dev_name = "/dev/cpld0",
+    .hw_algo = "eigenvalues",
+    .config_mode = 2,       /* Logic dev feed watchdog */
+    .priv_func_mode = 3,    /* IO */
+    .enable_val = 0xa5,
+    .disable_val = 0x0,
+    .enable_mask = 0xff,
+    .enable_reg = 0x68,
+    .timeout_cfg_reg = 0x66,
+    .timeleft_cfg_reg = 0x69,
+    .hw_margin = 90000,     /* timeout */
+    .timer_accuracy_reg_flag = 1,
+    .timer_accuracy_reg = 0x65,
+    .timer_accuracy_reg_val = 0x80, /* 1s */
+    .timer_accuracy = 1000,
+    .timer_update_reg_flag = 1,
+    .timer_update_reg = 0x67,
+    .timer_update_reg_val = 0x01,
+    .feed_wdt_type = 0,     /* watchdog device */
+    .wdt_config_mode.logic_wdt = {
+        .feed_dev_name = "/dev/cpld0",
+        .logic_func_mode = 0x03,    /* IO */
+        .feed_reg = 0x64,
+        .active_val = 0x01
+    },
+    .sysfs_index = SYSFS_NO_CFG,
+};
+
+static void wb_wdt_device_release(struct device *dev)
+{
+    return;
+}
+
+static struct platform_device wb_wdt_device[] = {
+    {
+        .name   = "wb_wdt",
+        .id = 0,
+        .dev    = {
+            .platform_data  = &wb_wdt_device_data_0,
+            .release = wb_wdt_device_release,
+        },
+    },
+};
+
+static int __init wb_wdt_device_init(void)
+{
+    int i;
+    int ret = 0;
+    wb_wdt_device_t *wb_wdt_device_data;
+
+    WB_WDT_DEVICE_DEBUG_VERBOSE("enter!\n");
+    for (i = 0; i < ARRAY_SIZE(wb_wdt_device); i++) {
+        wb_wdt_device_data = wb_wdt_device[i].dev.platform_data;
+        ret = platform_device_register(&wb_wdt_device[i]);
+        if (ret < 0) {
+            wb_wdt_device_data->device_flag = -1; /* device register failed, set flag -1 */
+            printk(KERN_ERR "rg-wdt.%d register failed!\n", i + 1);
+        } else {
+            wb_wdt_device_data->device_flag = 0; /* device register suucess, set flag 0 */
+        }
+    }
+    return 0;
+}
+
+static void __exit wb_wdt_device_exit(void)
+{
+    int i;
+    wb_wdt_device_t *wb_wdt_device_data;
+
+    WB_WDT_DEVICE_DEBUG_VERBOSE("enter!\n");
+    for (i = ARRAY_SIZE(wb_wdt_device) - 1; i >= 0; i--) {
+        wb_wdt_device_data = wb_wdt_device[i].dev.platform_data;
+        if (wb_wdt_device_data->device_flag == 0) { /* device register success, need unregister */
+            platform_device_unregister(&wb_wdt_device[i]);
+        }
+    }
+}
+
+module_init(wb_wdt_device_init);
+module_exit(wb_wdt_device_exit);
+MODULE_DESCRIPTION("WB WDT Devices");
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("support");
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_CPLD.cfg b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_CPLD.cfg
new file mode 100644
index 000000000..2c10ab9bb
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_CPLD.cfg
@@ -0,0 +1,40 @@
+# configuration item: I2C address of CPLD
+# format: cpld_i2c_dev.bus_[cpld_slot]_[cpld_id] cpld_i2c_dev.addr_[cpld_slot]_[cpld_id]
+# cpld_slot: Main card: 0, linear card: start from 1
+# cpld_id: start from 0
+# bus: I2C bus number of CPLD
+# addr: I2C address of CPLD
+cpld_i2c_dev.bus_0_3=0
+cpld_i2c_dev.addr_0_3=0x0d
+cpld_i2c_dev.bus_0_4=15
+cpld_i2c_dev.addr_0_4=0x51
+cpld_i2c_dev.bus_0_5=16
+cpld_i2c_dev.addr_0_5=0x52
+
+
+# configuration item: LPC address of CPLD
+# format: cpld_lpc_addr_[cpld_slot]_[cpld_id]
+# cpld_slot: Main card: 0, linear card: start from 1
+# cpld_id: start from 0
+cpld_lpc_dev_0_0=0x700
+cpld_lpc_dev_0_1=0x900
+cpld_lpc_dev_0_2=0xb00
+
+
+# configuration item: CPLD access method, lpc or i2c
+# format: mode_cpld_[cpld_slot][cpld_slot]=lpc/i2c
+# cpld_slot: Main card: 0, linear card: start from 1
+# cpld_id: start from 0
+mode_cpld_0_0=lpc
+mode_cpld_0_1=lpc
+mode_cpld_0_2=lpc
+mode_cpld_0_3=i2c
+mode_cpld_0_4=i2c
+mode_cpld_0_5=i2c
+
+
+# configuration item: the number of CPLD
+# format: dev_num_[main_dev]_[minor_dev]
+# main_dev: CPLD main_dev is 4
+# minor_dev: CPLD minor_dev not exist
+dev_num_4_0=6
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_FAN.cfg b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_FAN.cfg
new file mode 100644
index 000000000..eb2d7faf5
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_FAN.cfg
@@ -0,0 +1,112 @@
+# configuration item: the number of fans
+# format: dev_num_[main_dev]_[minor_dev]
+# main_dev: fan main_dev is 1
+# minor_dev: fan minor_dev not exist(0)
+dev_num_1_0=2
+
+
+# configuration item: the number of rotors
+# format: dev_num_[main_dev]_[minor_dev]
+# main_dev: rotor main_dev is 1
+# minor_dev: rotor minor_dev is 5
+dev_num_1_5=1
+
+
+# configuration item: fan presence status
+# format: dev_present_status_[main_dev_id][fan_index]
+# main_dev_id: fan main_dev_id is 1
+# fan_index: start from 1
+dev_present_status.mode_1_1=config
+dev_present_status.src_1_1=cpld
+dev_present_status.frmt_1_1=bit
+dev_present_status.pola_1_1=negative
+dev_present_status.addr_1_1=0x00010094
+dev_present_status.len_1_1=1
+dev_present_status.bit_offset_1_1=0
+
+dev_present_status.mode_1_2=config
+dev_present_status.src_1_2=cpld
+dev_present_status.frmt_1_2=bit
+dev_present_status.pola_1_2=negative
+dev_present_status.addr_1_2=0x00010094
+dev_present_status.len_1_2=1
+dev_present_status.bit_offset_1_2=1
+
+
+# configuration item: fan rotor status
+# format: fan_roll_status_[fan_id]_[motor_id]
+# fan_id: start from 1
+# motor_id: start from 0
+fan_roll_status.mode_1_0=config
+fan_roll_status.int_cons_1_0=
+fan_roll_status.src_1_0=cpld
+fan_roll_status.frmt_1_0=bit
+fan_roll_status.pola_1_0=positive
+fan_roll_status.fpath_1_0=
+fan_roll_status.addr_1_0=0x00010095
+fan_roll_status.len_1_0=1
+fan_roll_status.bit_offset_1_0=0
+
+
+fan_roll_status.mode_2_0=config
+fan_roll_status.int_cons_2_0=
+fan_roll_status.src_2_0=cpld
+fan_roll_status.frmt_2_0=bit
+fan_roll_status.pola_2_0=positive
+fan_roll_status.fpath_2_0=
+fan_roll_status.addr_2_0=0x00010095
+fan_roll_status.len_2_0=1
+fan_roll_status.bit_offset_2_0=1
+
+
+# configuration item: fan speed
+# format: fan_speed_[fan_id]_[motor_id]
+# fan_id: start from 1
+# motor_id: start from 0
+fan_speed.mode_1_0=config
+fan_speed.int_cons_1_0=
+fan_speed.src_1_0=cpld
+fan_speed.frmt_1_0=byte
+fan_speed.pola_1_0=
+fan_speed.fpath_1_0=
+fan_speed.addr_1_0=0x00010098
+fan_speed.len_1_0=1
+fan_speed.bit_offset_1_0=
+fan_speed.int_extra1_1_0=1
+
+
+fan_speed.mode_2_0=config
+fan_speed.int_cons_2_0=
+fan_speed.src_2_0=cpld
+fan_speed.frmt_2_0=byte
+fan_speed.pola_2_0=
+fan_speed.fpath_2_0=
+fan_speed.addr_2_0=0x00010099
+fan_speed.len_2_0=1
+fan_speed.bit_offset_2_0=
+fan_speed.int_extra1_2_0=1
+
+
+# configuration item: fan pwm
+# format: fan_ratio_[fan_id]_[motor_id]
+# fan_id: start from 1
+# motor_id: start from 0
+fan_ratio.mode_1_0=config
+fan_ratio.int_cons_1_0=
+fan_ratio.src_1_0=cpld
+fan_ratio.frmt_1_0=byte
+fan_ratio.pola_1_0=
+fan_ratio.fpath_1_0=
+fan_ratio.addr_1_0=0x00010090
+fan_ratio.len_1_0=1
+fan_ratio.bit_offset_1_0=
+
+fan_ratio.mode_2_0=config
+fan_ratio.int_cons_2_0=
+fan_ratio.src_2_0=cpld
+fan_ratio.frmt_2_0=byte
+fan_ratio.pola_2_0=
+fan_ratio.fpath_2_0=
+fan_ratio.addr_2_0=0x00010091
+fan_ratio.len_2_0=1
+fan_ratio.bit_offset_2_0=
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_PSU.cfg b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_PSU.cfg
new file mode 100644
index 000000000..8b2d41974
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_PSU.cfg
@@ -0,0 +1,64 @@
+# configuration item: the number of psus
+# format: dev_num_[main_dev]_[minor_dev]
+# main_dev: psu main_dev is 2
+# minor_dev: psu minor_dev not exist(0)
+dev_num_2_0=2
+
+
+# configuration item: psu status
+# format: psu_status_[psu_index]_[status_id]
+# psu_index: start from 1
+# status_id: 0: presence 1: output 2: alert
+# psu1 presence status
+psu_status.mode_1_0=config
+psu_status.src_1_0=cpld
+psu_status.frmt_1_0=bit
+psu_status.pola_1_0=negative
+psu_status.addr_1_0=0x00020010
+psu_status.len_1_0=1
+psu_status.bit_offset_1_0=0
+
+# psu1 output status
+psu_status.mode_1_1=config
+psu_status.src_1_1=cpld
+psu_status.frmt_1_1=bit
+psu_status.pola_1_1=positive
+psu_status.addr_1_1=0x00020011
+psu_status.len_1_1=1
+psu_status.bit_offset_1_1=0
+
+# psu1 alert status
+psu_status.mode_1_2=config
+psu_status.src_1_2=cpld
+psu_status.frmt_1_2=bit
+psu_status.pola_1_2=negative
+psu_status.addr_1_2=0x00020011
+psu_status.len_1_2=1
+psu_status.bit_offset_1_2=0
+
+# psu2 presence status
+psu_status.mode_2_0=config
+psu_status.src_2_0=cpld
+psu_status.frmt_2_0=bit
+psu_status.pola_2_0=negative
+psu_status.addr_2_0=0x00020010
+psu_status.len_2_0=1
+psu_status.bit_offset_2_0=1
+
+# psu2 output status
+psu_status.mode_2_1=config
+psu_status.src_2_1=cpld
+psu_status.frmt_2_1=bit
+psu_status.pola_2_1=positive
+psu_status.addr_2_1=0x00020011
+psu_status.len_2_1=1
+psu_status.bit_offset_2_1=1
+
+# psu2 alert status
+psu_status.mode_2_2=config
+psu_status.src_2_2=cpld
+psu_status.frmt_2_2=bit
+psu_status.pola_2_2=negative
+psu_status.addr_2_2=0x00020011
+psu_status.len_2_2=1
+psu_status.bit_offset_2_2=1
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_SFF.cfg b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_SFF.cfg
new file mode 100644
index 000000000..9cfdcd29e
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/WB_PLAT_SFF.cfg
@@ -0,0 +1,54 @@
+# configuration item: the number of sffs
+# format: dev_num_[main_dev]_[minor_dev]
+# main_dev: sff main_dev is 3
+# minor_dev: sff minor_dev not exist(0)
+dev_num_3_0=4
+
+
+# configuration item: The directory name of sff sysfs
+# format: sff_dir_name_[sff_index]
+# sff_index: start from 1
+sff_dir_name_1 =sff49
+sff_dir_name_2 =sff50
+sff_dir_name_3 =sff51
+sff_dir_name_4 =sff52
+
+
+# configuration item: sff cpld register status
+# format: sff_cpld_reg_[sff_index]_[cpld_reg]
+# sff_index: start from 1
+# cpld_reg: 1: power_on, 2: tx_fault, 3: tx_dis, 4:pre_n, 5:rx_los
+# 6: reset, 7: lpmode, 8: module_present, 9: interrupt
+
+# sff cpld presence status
+sff_cpld_reg.mode_1_8=config
+sff_cpld_reg.src_1_8=cpld
+sff_cpld_reg.frmt_1_8=bit
+sff_cpld_reg.pola_1_8=negative
+sff_cpld_reg.addr_1_8=0x00020030
+sff_cpld_reg.len_1_8=1
+sff_cpld_reg.bit_offset_1_8=1
+
+sff_cpld_reg.mode_2_8=config
+sff_cpld_reg.src_2_8=cpld
+sff_cpld_reg.frmt_2_8=bit
+sff_cpld_reg.pola_2_8=negative
+sff_cpld_reg.addr_2_8=0x00020030
+sff_cpld_reg.len_2_8=1
+sff_cpld_reg.bit_offset_2_8=0
+
+sff_cpld_reg.mode_3_8=config
+sff_cpld_reg.src_3_8=cpld
+sff_cpld_reg.frmt_3_8=bit
+sff_cpld_reg.pola_3_8=negative
+sff_cpld_reg.addr_3_8=0x00020030
+sff_cpld_reg.len_3_8=1
+sff_cpld_reg.bit_offset_3_8=3
+
+sff_cpld_reg.mode_4_8=config
+sff_cpld_reg.src_4_8=cpld
+sff_cpld_reg.frmt_4_8=bit
+sff_cpld_reg.pola_4_8=negative
+sff_cpld_reg.addr_4_8=0x00020030
+sff_cpld_reg.len_4_8=1
+sff_cpld_reg.bit_offset_4_8=2
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/cfg_file_name b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/cfg_file_name
new file mode 100644
index 000000000..5f4942044
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/plat_sysfs_cfg/cfg_file_name
@@ -0,0 +1,4 @@
+WB_PLAT_CPLD
+WB_PLAT_FAN
+WB_PLAT_PSU
+WB_PLAT_SFF
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/service/set-eth-mac.service b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/service/set-eth-mac.service
new file mode 100644
index 000000000..4b74632c2
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/service/set-eth-mac.service
@@ -0,0 +1,14 @@
+[Unit]
+Description=Set eth mac address
+Before=interfaces-config.service
+Requires=platform_driver.service
+After=platform_driver.service
+#DefaultDependencies=no
+
+[Service]
+Type=oneshot
+ExecStart=/usr/local/bin/set_eth_mac.py
+RemainAfterExit=yes
+
+[Install]
+WantedBy=multi-user.target
diff --git a/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/setup.py b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/setup.py
new file mode 100644
index 000000000..6c3916921
--- /dev/null
+++ b/platform/broadcom/sonic-platform-modules-micas/m2-w6510-48gt4v/setup.py
@@ -0,0 +1,39 @@
+from setuptools import setup
+
+setup(
+    name='sonic-platform',
+    version='1.0',
+    description='SONiC platform API implementation',
+    license='Apache 2.0',
+    author='SONiC Team',
+    author_email='support',
+    url='',
+    maintainer='support',
+    maintainer_email='',
+    packages=[
+        'sonic_platform',
+        'plat_hal',
+        'wbutil',
+        'eepromutil',
+        'hal-config',
+        'config',
+    ],
+    py_modules=[
+        'hal_pltfm',
+        'platform_util',
+        'platform_intf',
+    ],
+    classifiers=[
+        'Development Status :: 3 - Alpha',
+        'Environment :: Plugins',
+        'Intended Audience :: Developers',
+        'Intended Audience :: Information Technology',
+        'Intended Audience :: System Administrators',
+        'License :: OSI Approved :: Apache Software License',
+        'Natural Language :: English',
+        'Operating System :: POSIX :: Linux',
+        'Programming Language :: Python :: 3.7',
+        'Topic :: Utilities',
+    ],
+    keywords='sonic SONiC platform PLATFORM',
+)
-- 
2.25.1

