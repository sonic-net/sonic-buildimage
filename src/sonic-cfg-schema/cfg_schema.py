"""SONiC Config Schema module."""

from __future__ import print_function
import os

def get_schema_path():
    """Return the path to the cfg_schema.h file."""
    return os.path.join(os.path.dirname(__file__), 'cfg_schema.h')

def generate_schema(output_path, yang_dir='/usr/local/yang-models'):
    """Generate cfg_schema.h file using sonic_yang.

    Args:
        output_path (str): Path where to write the generated schema file
        yang_dir (str): Path to the directory containing YANG models
    
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        # Import sonic_yang here to avoid import errors when this module is imported
        import sonic_yang

        # Create header and footer for the schema file
        header = """#ifndef CFG_SCHEMA_H
#define CFG_SCHEMA_H

// Macros for table names are autogenerated. Manual update will not be preserved.
#ifdef __cplusplus
namespace swss {
#endif
"""
        footer = """
#ifdef __cplusplus
}
#endif
#endif"""

        # Load YANG models and get table names
        sy = sonic_yang.SonicYang(yang_dir)
        sy.loadYangModel()
        keys = [k for k, v in sy.confDbYangMap.items() if "container" in v]

        # Write the schema file
        with open(output_path, "w") as f:
            f.write(header)
            f.write("\n")
            for key in sorted(keys):
                if '-' in key:
                    f.write('// #define CFG_{}_TABLE_NAME "{}"\n'.format(key, key))
                else:
                    f.write('#define CFG_{}_TABLE_NAME "{}"\n'.format(key, key))
            f.write(footer)

        print("Successfully generated schema at {}".format(output_path))
        return True
    except Exception as e:
        print("Error generating schema: {}".format(e))
        return False
