From 4dc52f7e0f5b58734d4353ac7eae443ebcdacc38 Mon Sep 17 00:00:00 2001
From: Carmine Scarpitta <cscarpit@cisco.com>
Date: Sat, 7 Jun 2025 09:37:19 +0000
Subject: [PATCH] zebra: Cleanup SRv6 output of `show running-config`

Currently, `show running-config` displays the `formats`,
`format usid-f3216` and `format uncompressed` nodes even if the user does
not change any config parameter under those nodes.

This commit cleans up the output of `show running-config` by hiding
those nodes when the config under them is the default config.

Example:

```
router# configure
router(config)# segment-routing
router(config-sr)# srv6
router(config-srv6)# locators
router(config-locators)# locator MAIN
router(config-locator)# prefix fcbb:bb01:1::/48
```

Before:

```
router# show running-config
...
segment-routing
 srv6
  locators
   locator MAIN
    prefix fcbb:bb01:1::/48
   exit
   !
  exit
  !
  formats
   format usid-f3216
   exit
   !
   format uncompressed-f4024
   exit
   !
  exit
  !
 exit
 !
exit
!
end
```

After:

```
router# show running-config
...
segment-routing
 srv6
  locators
   locator MAIN
    prefix fcbb:bb01:1::/48
   exit
   !
  exit
  !
 exit
 !
exit
```

Signed-off-by: Carmine Scarpitta <cscarpit@cisco.com>
---
 zebra/zebra_srv6_vty.c | 143 +++++++++++++++++++++++++++++------------
 1 file changed, 101 insertions(+), 42 deletions(-)

diff --git a/zebra/zebra_srv6_vty.c b/zebra/zebra_srv6_vty.c
index b8fabbd77a61..80d8120ace6c 100644
--- a/zebra/zebra_srv6_vty.c
+++ b/zebra/zebra_srv6_vty.c
@@ -1374,6 +1374,60 @@ DEFPY(no_srv6_sid_format_explicit,
 	return CMD_SUCCESS;
 }
 
+/* Helper function to check if a SID format is using the default config */
+static bool has_default_sid_format_config(struct srv6_sid_format *format)
+{
+	bool has_default_config = true;
+
+	switch (format->type) {
+	case SRV6_SID_FORMAT_TYPE_USID:
+		if (format->config.usid.lib_start != SRV6_SID_FORMAT_USID_F3216_LIB_START)
+			has_default_config = false;
+
+		if (format->config.usid.elib_start != SRV6_SID_FORMAT_USID_F3216_ELIB_START)
+			has_default_config = false;
+
+		if (format->config.usid.elib_end != SRV6_SID_FORMAT_USID_F3216_ELIB_END)
+			has_default_config = false;
+
+		if (format->config.usid.wlib_start != SRV6_SID_FORMAT_USID_F3216_WLIB_START)
+			has_default_config = false;
+
+		if (format->config.usid.wlib_end != SRV6_SID_FORMAT_USID_F3216_WLIB_END)
+			has_default_config = false;
+
+		if (format->config.usid.ewlib_start != SRV6_SID_FORMAT_USID_F3216_EWLIB_START)
+			has_default_config = false;
+
+		break;
+
+	case SRV6_SID_FORMAT_TYPE_UNCOMPRESSED:
+		if (format->config.uncompressed.explicit_start !=
+		    SRV6_SID_FORMAT_UNCOMPRESSED_F4024_EXPLICIT_RANGE_START)
+			has_default_config = false;
+
+		break;
+
+	case SRV6_SID_FORMAT_TYPE_UNSPEC:
+		break;
+	}
+
+	return has_default_config;
+}
+
+/* Helper function to check if all SID formats are using the default config */
+static bool has_default_sid_format_config_all(void)
+{
+	struct zebra_srv6 *srv6 = zebra_srv6_get_default();
+	struct listnode *node;
+	struct srv6_sid_format *format;
+
+	for (ALL_LIST_ELEMENTS_RO(srv6->sid_formats, node, format))
+		if (!has_default_sid_format_config(format))
+			return false;
+
+	return true;
+}
 static int zebra_sr_config(struct vty *vty)
 {
 	struct zebra_srv6 *srv6 = zebra_srv6_get_default();
@@ -1434,50 +1488,55 @@ static int zebra_sr_config(struct vty *vty)
 		}
 		vty_out(vty, "  exit\n");
 		vty_out(vty, "  !\n");
-		vty_out(vty, "  formats\n");
-		for (ALL_LIST_ELEMENTS_RO(srv6->sid_formats, node, format)) {
-			if (format->type == SRV6_SID_FORMAT_TYPE_UNCOMPRESSED) {
-				vty_out(vty, "   format %s\n", format->name);
-				if (format->config.uncompressed.explicit_start !=
-				    SRV6_SID_FORMAT_UNCOMPRESSED_F4024_EXPLICIT_RANGE_START)
-					vty_out(vty, "    explicit start %u\n",
-						format->config.uncompressed
-							.explicit_start);
-			}
-			if (format->type == SRV6_SID_FORMAT_TYPE_USID) {
-				vty_out(vty, "   format %s\n", format->name);
-				if (format->config.usid.lib_start !=
-				    SRV6_SID_FORMAT_USID_F3216_LIB_START)
-					vty_out(vty,
-						"    local-id-block start %u\n",
-						format->config.usid.lib_start);
-				if (format->config.usid.elib_start !=
-					    SRV6_SID_FORMAT_USID_F3216_ELIB_START ||
-				    format->config.usid.elib_end !=
-					    SRV6_SID_FORMAT_USID_F3216_ELIB_END)
-					vty_out(vty,
-						"    local-id-block explicit start %u end %u\n",
-						format->config.usid.elib_start,
-						format->config.usid.elib_end);
-				if (format->config.usid.wlib_start !=
-					    SRV6_SID_FORMAT_USID_F3216_WLIB_START ||
-				    format->config.usid.wlib_end !=
-					    SRV6_SID_FORMAT_USID_F3216_WLIB_END)
-					vty_out(vty,
-						"    wide-local-id-block start %u end %u\n",
-						format->config.usid.wlib_start,
-						format->config.usid.wlib_end);
-				if (format->config.usid.ewlib_start !=
-				    SRV6_SID_FORMAT_USID_F3216_EWLIB_START)
-					vty_out(vty,
-						"    wide-local-id-block explicit start %u\n",
-						format->config.usid.ewlib_start);
+
+		if (!has_default_sid_format_config_all()) {
+			vty_out(vty, "  formats\n");
+			for (ALL_LIST_ELEMENTS_RO(srv6->sid_formats, node, format)) {
+				if (has_default_sid_format_config(format))
+					/* This SID format is using the default config, skipping */
+					continue;
+
+				if (format->type == SRV6_SID_FORMAT_TYPE_UNCOMPRESSED) {
+					vty_out(vty, "   format %s\n", format->name);
+					if (format->config.uncompressed.explicit_start !=
+					    SRV6_SID_FORMAT_UNCOMPRESSED_F4024_EXPLICIT_RANGE_START)
+						vty_out(vty, "    explicit start %u\n",
+							format->config.uncompressed.explicit_start);
+				}
+				if (format->type == SRV6_SID_FORMAT_TYPE_USID) {
+					vty_out(vty, "   format %s\n", format->name);
+					if (format->config.usid.lib_start !=
+					    SRV6_SID_FORMAT_USID_F3216_LIB_START)
+						vty_out(vty, "    local-id-block start %u\n",
+							format->config.usid.lib_start);
+					if (format->config.usid.elib_start !=
+						    SRV6_SID_FORMAT_USID_F3216_ELIB_START ||
+					    format->config.usid.elib_end !=
+						    SRV6_SID_FORMAT_USID_F3216_ELIB_END)
+						vty_out(vty,
+							"    local-id-block explicit start %u end %u\n",
+							format->config.usid.elib_start,
+							format->config.usid.elib_end);
+					if (format->config.usid.wlib_start !=
+						    SRV6_SID_FORMAT_USID_F3216_WLIB_START ||
+					    format->config.usid.wlib_end !=
+						    SRV6_SID_FORMAT_USID_F3216_WLIB_END)
+						vty_out(vty,
+							"    wide-local-id-block start %u end %u\n",
+							format->config.usid.wlib_start,
+							format->config.usid.wlib_end);
+					if (format->config.usid.ewlib_start !=
+					    SRV6_SID_FORMAT_USID_F3216_EWLIB_START)
+						vty_out(vty,
+							"    wide-local-id-block explicit start %u\n",
+							format->config.usid.ewlib_start);
+				}
+				vty_out(vty, "   exit\n");
+				vty_out(vty, "   !\n");
 			}
-			vty_out(vty, "   exit\n");
-			vty_out(vty, "   !\n");
+			vty_out(vty, "  exit\n");
+			vty_out(vty, "  !\n");
 		}
-		vty_out(vty, "  exit\n");
-		vty_out(vty, "  !\n");
 		vty_out(vty, " exit\n");
 		vty_out(vty, " !\n");
 	}
