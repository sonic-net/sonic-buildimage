From 7169055059999233210784922f69a776483d8c8a Mon Sep 17 00:00:00 2001
From: Yuqing Zhao <galadriel.zyq@alibaba-inc.com>
Date: Mon, 12 May 2025 06:13:28 +0000
Subject: [PATCH 1/3] bgpd: Add support for BGP to use SRv6 SID in an explicit
 way

Add support for bgp to use explicit SRv6 SID.
Use configuration "sid vpn per-vrf export explicit X:X::X:X"
in vrf context to request the explicit SID from Zebra.
If SRv6 SID manager allocates the explicit SID successfully,
then BGP will advertise it.

Signed-off-by: Yuqing Zhao <galadriel.zyq@alibaba-inc.com>
---
 bgpd/bgp_mplsvpn.c | 35 ++++++++++++++++++++++++++++-------
 bgpd/bgp_mplsvpn.h | 10 ++++++----
 bgpd/bgp_vty.c     | 46 +++++++++++++++++++++++++++++++++++++---------
 bgpd/bgpd.c        |  3 +++
 bgpd/bgpd.h        |  2 ++
 5 files changed, 76 insertions(+), 20 deletions(-)

diff --git a/bgpd/bgp_mplsvpn.c b/bgpd/bgp_mplsvpn.c
index 782d29a7f53d..9576c3db766a 100644
--- a/bgpd/bgp_mplsvpn.c
+++ b/bgpd/bgp_mplsvpn.c
@@ -848,6 +848,7 @@ void ensure_vrf_tovpn_sid_per_vrf(struct bgp *bgp_vpn, struct bgp *bgp_vrf)
 	struct in6_addr tovpn_sid = {};
 	uint32_t tovpn_sid_index = 0;
 	bool tovpn_sid_auto = false;
+	bool is_tovpn_sid_explicit = false;
 	struct srv6_sid_ctx ctx = {};
 	uint32_t sid_func;
 
@@ -875,25 +876,39 @@ void ensure_vrf_tovpn_sid_per_vrf(struct bgp *bgp_vpn, struct bgp *bgp_vrf)
 
 	tovpn_sid_index = bgp_vrf->tovpn_sid_index;
 	tovpn_sid_auto = CHECK_FLAG(bgp_vrf->vrf_flags, BGP_VRF_TOVPN_SID_AUTO);
+	is_tovpn_sid_explicit = CHECK_FLAG(bgp_vrf->vrf_flags, BGP_VRF_TOVPN_SID_EXPLICIT);
 
 	/* skip when VPN isn't configured on vrf-instance */
-	if (tovpn_sid_index == 0 && !tovpn_sid_auto)
+	if (tovpn_sid_index == 0 && !tovpn_sid_auto && !is_tovpn_sid_explicit)
 		return;
 
-	/* check invalid case both configured index and auto */
-	if (tovpn_sid_index != 0 && tovpn_sid_auto) {
-		zlog_err("%s: index-mode and auto-mode both selected. ignored.",
+	/*
+	 * check invalid case more than one mode configured
+	 * among index, auto and explicit
+	 */
+	if ((tovpn_sid_index != 0 && tovpn_sid_auto) ||
+	    (tovpn_sid_index != 0 && is_tovpn_sid_explicit) ||
+	    (tovpn_sid_auto && is_tovpn_sid_explicit)) {
+		zlog_err("%s: more than one mode selected among index-mode, auto-mode and explicit-mode. ignored.",
 			 __func__);
 		return;
 	}
 
-	if (!tovpn_sid_auto) {
+	/* skip when sid value isn't set for explicit-mode */
+	if (is_tovpn_sid_explicit && !bgp_vrf->tovpn_sid_explicit) {
+		zlog_err("%s: explicit-mode seleted without sid value.", __func__);
+		return;
+	}
+
+	if (!tovpn_sid_auto && !is_tovpn_sid_explicit) {
 		if (!srv6_sid_compose(&tovpn_sid, bgp_vpn->srv6_locator,
 				      bgp_vrf->tovpn_sid_index)) {
 			zlog_err("%s: failed to compose new sid for vrf %s",
 				 __func__, bgp_vrf->name_pretty);
 			return;
 		}
+	} else if (is_tovpn_sid_explicit) {
+		tovpn_sid = *(bgp_vrf->tovpn_sid_explicit);
 	}
 
 	ctx.vrf_id = bgp_vrf->vrf_id;
@@ -916,7 +931,8 @@ void ensure_vrf_tovpn_sid(struct bgp *bgp_vpn, struct bgp *bgp_vrf, afi_t afi)
 
 	/* per-vrf sid */
 	if (bgp_vrf->tovpn_sid_index != 0 ||
-	    CHECK_FLAG(bgp_vrf->vrf_flags, BGP_VRF_TOVPN_SID_AUTO))
+	    CHECK_FLAG(bgp_vrf->vrf_flags, BGP_VRF_TOVPN_SID_AUTO) ||
+	    CHECK_FLAG(bgp_vrf->vrf_flags, BGP_VRF_TOVPN_SID_EXPLICIT))
 		return ensure_vrf_tovpn_sid_per_vrf(bgp_vpn, bgp_vrf);
 }
 
@@ -967,6 +983,7 @@ void delete_vrf_tovpn_sid_per_vrf(struct bgp *bgp_vpn, struct bgp *bgp_vrf)
 	int debug = BGP_DEBUG(vpn, VPN_LEAK_FROM_VRF);
 	uint32_t tovpn_sid_index = 0;
 	bool tovpn_sid_auto = false;
+	bool is_tovpn_sid_explicit = false;
 	struct srv6_sid_ctx ctx = {};
 
 	if (debug)
@@ -976,9 +993,10 @@ void delete_vrf_tovpn_sid_per_vrf(struct bgp *bgp_vpn, struct bgp *bgp_vrf)
 	tovpn_sid_index = bgp_vrf->tovpn_sid_index;
 	tovpn_sid_auto =
 		CHECK_FLAG(bgp_vrf->vrf_flags, BGP_VPN_POLICY_TOVPN_SID_AUTO);
+	is_tovpn_sid_explicit = CHECK_FLAG(bgp_vrf->vrf_flags, BGP_VRF_TOVPN_SID_EXPLICIT);
 
 	/* skip when VPN is configured on vrf-instance */
-	if (tovpn_sid_index != 0 || tovpn_sid_auto)
+	if (tovpn_sid_index != 0 || tovpn_sid_auto || is_tovpn_sid_explicit)
 		return;
 
 	if (bgp_vrf->vrf_id == VRF_UNKNOWN) {
@@ -999,6 +1017,9 @@ void delete_vrf_tovpn_sid_per_vrf(struct bgp *bgp_vpn, struct bgp *bgp_vrf)
 		sid_unregister(bgp_vpn, bgp_vrf->tovpn_sid);
 		XFREE(MTYPE_BGP_SRV6_SID, bgp_vrf->tovpn_sid);
 	}
+	if (bgp_vrf->tovpn_sid_explicit) {
+		XFREE(MTYPE_BGP_SRV6_SID, bgp_vrf->tovpn_sid_explicit);
+	}
 	bgp_vrf->tovpn_sid_transpose_label = 0;
 }
 
diff --git a/bgpd/bgp_mplsvpn.h b/bgpd/bgp_mplsvpn.h
index 75c0264987ff..81ff57fd9f0e 100644
--- a/bgpd/bgp_mplsvpn.h
+++ b/bgpd/bgp_mplsvpn.h
@@ -278,13 +278,14 @@ static inline void vpn_leak_postchange(enum vpn_policy_direction direction,
 		}
 
 		if (bgp_vrf->vpn_policy[afi].tovpn_sid_index == 0 &&
-		    !CHECK_FLAG(bgp_vrf->vpn_policy[afi].flags,
-				BGP_VPN_POLICY_TOVPN_SID_AUTO) &&
+		    !CHECK_FLAG(bgp_vrf->vpn_policy[afi].flags, BGP_VPN_POLICY_TOVPN_SID_AUTO) &&
 		    bgp_vrf->tovpn_sid_index == 0 &&
-		    !CHECK_FLAG(bgp_vrf->vrf_flags, BGP_VRF_TOVPN_SID_AUTO))
+		    !CHECK_FLAG(bgp_vrf->vrf_flags, BGP_VRF_TOVPN_SID_AUTO) &&
+		    !CHECK_FLAG(bgp_vrf->vrf_flags, BGP_VRF_TOVPN_SID_EXPLICIT))
 			delete_vrf_tovpn_sid(bgp_vpn, bgp_vrf, afi);
 
-		if (!bgp_vrf->vpn_policy[afi].tovpn_sid && !bgp_vrf->tovpn_sid)
+		if (CHECK_FLAG(bgp_vrf->vrf_flags, BGP_VRF_TOVPN_SID_EXPLICIT) ||
+		    (!bgp_vrf->vpn_policy[afi].tovpn_sid && !bgp_vrf->tovpn_sid))
 			ensure_vrf_tovpn_sid(bgp_vpn, bgp_vrf, afi);
 
 		if ((!bgp_vrf->vpn_policy[afi].tovpn_sid &&
@@ -366,6 +367,7 @@ static inline bool is_pi_srv6_valid(struct bgp_path_info *pi, struct bgp *bgp_ne
 
 	if (bgp_nexthop->tovpn_sid_index == 0 &&
 	    !CHECK_FLAG(bgp_nexthop->vrf_flags, BGP_VRF_TOVPN_SID_AUTO) &&
+	    !CHECK_FLAG(bgp_nexthop->vrf_flags, BGP_VRF_TOVPN_SID_EXPLICIT) &&
 	    bgp_nexthop->vpn_policy[afi].tovpn_sid_index == 0 &&
 	    !CHECK_FLAG(bgp_nexthop->vpn_policy[afi].flags, BGP_VPN_POLICY_TOVPN_SID_AUTO))
 		return false;
diff --git a/bgpd/bgp_vty.c b/bgpd/bgp_vty.c
index 2e86ce25ad25..aef013229f6b 100644
--- a/bgpd/bgp_vty.c
+++ b/bgpd/bgp_vty.c
@@ -10157,17 +10157,20 @@ DEFPY (af_sid_vpn_export,
 
 DEFPY (bgp_sid_vpn_export,
        bgp_sid_vpn_export_cmd,
-       "[no] sid vpn per-vrf export <(1-1048575)$sid_idx|auto$sid_auto>",
+       "[no] sid vpn per-vrf export <(1-1048575)$sid_idx|auto$sid_auto|explicit$sid_explicit X:X::X:X$sid_value>",
        NO_STR
        "sid value for VRF\n"
        "Between current vrf and vpn\n"
        "sid per-VRF (both IPv4 and IPv6 address families)\n"
        "For routes leaked from current vrf to vpn\n"
        "Sid allocation index\n"
-       "Automatically assign a label\n")
+       "Automatically assign a label\n"
+       "Explicitly assign a sid value\n"
+       "Sid value\n")
 {
 	VTY_DECLVAR_CONTEXT(bgp, bgp);
 	int debug;
+	struct in6_addr *tovpn_sid_explicit = NULL;
 
 	debug = (BGP_DEBUG(vpn, VPN_LEAK_TO_VRF) |
 		 BGP_DEBUG(vpn, VPN_LEAK_FROM_VRF));
@@ -10175,13 +10178,16 @@ DEFPY (bgp_sid_vpn_export,
 	if (no) {
 		/* when per-VRF SID is not set, do nothing */
 		if (bgp->tovpn_sid_index == 0 &&
-		    !CHECK_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_AUTO))
+		    !CHECK_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_AUTO) &&
+		    !CHECK_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_EXPLICIT))
 			return CMD_SUCCESS;
 
 		sid_idx = 0;
 		sid_auto = false;
+		sid_explicit = false;
 		bgp->tovpn_sid_index = 0;
 		UNSET_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_AUTO);
+		UNSET_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_EXPLICIT);
 	}
 
 	if (bgp->vpn_policy[AFI_IP].tovpn_sid_index != 0 ||
@@ -10198,18 +10204,28 @@ DEFPY (bgp_sid_vpn_export,
 
 	/* skip when it's already configured */
 	if ((sid_idx != 0 && bgp->tovpn_sid_index != 0) ||
-	    (sid_auto && CHECK_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_AUTO)))
+	    (sid_auto && CHECK_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_AUTO)) ||
+	    (sid_explicit && CHECK_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_EXPLICIT)))
 		return CMD_SUCCESS;
 
 	/*
-	 * mode change between sid_idx and sid_auto isn't supported.
+	 * mode change among sid_idx, sid_auto and sid_explicit isn't supported.
 	 * user must negate sid vpn export when they want to change the mode
 	 */
 	if ((sid_auto && bgp->tovpn_sid_index != 0) ||
-	    (sid_idx != 0 &&
-	     CHECK_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_AUTO))) {
-		vty_out(vty, "it's already configured as %s.\n",
-			sid_auto ? "auto-mode" : "idx-mode");
+	    (sid_auto && CHECK_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_EXPLICIT)) ||
+	    (sid_idx != 0 && CHECK_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_AUTO)) ||
+	    (sid_idx != 0 && CHECK_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_EXPLICIT)) ||
+	    (sid_explicit && bgp->tovpn_sid_index != 0) ||
+	    (sid_explicit && CHECK_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_AUTO))) {
+		vty_out(vty, "it's already configured as ");
+		if (CHECK_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_AUTO))
+			vty_out(vty, "auto-mode.\n");
+		else if (CHECK_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_EXPLICIT))
+			vty_out(vty, "explicit-mode.\n");
+		else if (sid_idx != 0)
+			vty_out(vty, "idx-mode.\n");
+
 		return CMD_WARNING_CONFIG_FAILED;
 	}
 
@@ -10230,6 +10246,15 @@ DEFPY (bgp_sid_vpn_export,
 			zlog_debug("%s: idx %ld per-vrf sid alloc.", __func__,
 				   sid_idx);
 		bgp->tovpn_sid_index = sid_idx;
+	} else if (sid_explicit) {
+		/* SID allocation explicit-mode */
+		tovpn_sid_explicit = XCALLOC(MTYPE_BGP_SRV6_SID, sizeof(struct in6_addr));
+		memcpy(tovpn_sid_explicit, &sid_value, sizeof(struct in6_addr));
+		bgp->tovpn_sid_explicit = tovpn_sid_explicit;
+
+		if (debug)
+			zlog_debug("%s: explicit per-vrf sid alloc.", __func__);
+		SET_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_EXPLICIT);
 	}
 
 	/* post-change */
@@ -20032,6 +20057,9 @@ int bgp_config_write(struct vty *vty)
 		tovpn_sid_index = bgp->tovpn_sid_index;
 		if (CHECK_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_AUTO)) {
 			vty_out(vty, " sid vpn per-vrf export auto\n");
+		} else if (CHECK_FLAG(bgp->vrf_flags, BGP_VRF_TOVPN_SID_EXPLICIT)) {
+			vty_out(vty, " sid vpn per-vrf export explicit %pI6\n",
+				bgp->tovpn_sid_explicit);
 		} else if (tovpn_sid_index != 0) {
 			vty_out(vty, " sid vpn per-vrf export %d\n",
 				tovpn_sid_index);
diff --git a/bgpd/bgpd.c b/bgpd/bgpd.c
index d29f3c02d02f..531540c5bb89 100644
--- a/bgpd/bgpd.c
+++ b/bgpd/bgpd.c
@@ -1534,6 +1534,9 @@ static void bgp_srv6_cleanup(struct bgp *bgp)
 		sid_unregister(bgp, bgp->tovpn_sid);
 		XFREE(MTYPE_BGP_SRV6_SID, bgp->tovpn_sid);
 	}
+	if (bgp->tovpn_sid_explicit != NULL) {
+		XFREE(MTYPE_BGP_SRV6_SID, bgp->tovpn_sid_explicit);
+	}
 
 	if (bgp->srv6_locator_chunks)
 		list_delete(&bgp->srv6_locator_chunks);
diff --git a/bgpd/bgpd.h b/bgpd/bgpd.h
index 67e4084f4c89..1db967f503da 100644
--- a/bgpd/bgpd.h
+++ b/bgpd/bgpd.h
@@ -907,6 +907,7 @@ struct bgp {
 #define BGP_VRF_L3VNI_PREFIX_ROUTES_ONLY    (1 << 6)
 /* per-VRF toVPN SID */
 #define BGP_VRF_TOVPN_SID_AUTO              (1 << 7)
+#define BGP_VRF_TOVPN_SID_EXPLICIT	    (1 << 8)
 
 	/* unique ID for auto derivation of RD for this vrf */
 	uint16_t vrf_rd_id;
@@ -961,6 +962,7 @@ struct bgp {
 	struct list *srv6_functions;
 	uint32_t tovpn_sid_index; /* unset => set to 0 */
 	struct in6_addr *tovpn_sid;
+	struct in6_addr *tovpn_sid_explicit;
 	struct srv6_locator *tovpn_sid_locator;
 	uint32_t tovpn_sid_transpose_label;
 	struct in6_addr *tovpn_zebra_vrf_sid_last_sent;

From 0bfb292d68c9964b43fa9e3dca9aa1bfa20795e2 Mon Sep 17 00:00:00 2001
From: Yuqing Zhao <galadriel.zyq@alibaba-inc.com>
Date: Tue, 13 May 2025 04:24:13 +0000
Subject: [PATCH 2/3] tests: Add topotest for BGP explicit SRv6 SID

Signed-off-by: Yuqing Zhao <galadriel.zyq@alibaba-inc.com>
---
 .../bgp_srv6_sid_explicit/__init__.py         |   0
 .../bgp_srv6_sid_explicit/c11/frr.conf        |  18 ++
 .../bgp_srv6_sid_explicit/c12/frr.conf        |  35 +++
 .../bgp_srv6_sid_explicit/c21/frr.conf        |  19 ++
 .../bgp_srv6_sid_explicit/c22/frr.conf        |  19 ++
 .../expected_explicit_srv6_sid_allocated.json |  34 +++
 .../expected_rcvd_bgp_vpn_srv6_sid.json       | 112 +++++++++
 .../expected_rcvd_bgp_vrf_srv6_sid_1.json     |  56 +++++
 .../expected_rcvd_bgp_vrf_srv6_sid_2.json     |  56 +++++
 .../expected_rcvd_zebra_vrf_srv6_sid_1.json   |  53 +++++
 .../expected_rcvd_zebra_vrf_srv6_sid_2.json   |  53 +++++
 .../expected_sent_bgp_vpn_srv6_sid.json       | 108 +++++++++
 .../bgp_srv6_sid_explicit/r1/frr.conf         | 110 +++++++++
 .../bgp_srv6_sid_explicit/r1/setup.sh         |  13 ++
 .../bgp_srv6_sid_explicit/r2/frr.conf         | 100 ++++++++
 .../bgp_srv6_sid_explicit/r2/setup.sh         |  13 ++
 .../test_bgp_srv6_sid_explicit.py             | 221 ++++++++++++++++++
 17 files changed, 1020 insertions(+)
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/__init__.py
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/c11/frr.conf
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/c12/frr.conf
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/c21/frr.conf
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/c22/frr.conf
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/expected_explicit_srv6_sid_allocated.json
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_bgp_vpn_srv6_sid.json
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_bgp_vrf_srv6_sid_1.json
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_bgp_vrf_srv6_sid_2.json
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_zebra_vrf_srv6_sid_1.json
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_zebra_vrf_srv6_sid_2.json
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/expected_sent_bgp_vpn_srv6_sid.json
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/r1/frr.conf
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/r1/setup.sh
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/r2/frr.conf
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/r2/setup.sh
 create mode 100644 tests/topotests/bgp_srv6_sid_explicit/test_bgp_srv6_sid_explicit.py

diff --git a/tests/topotests/bgp_srv6_sid_explicit/__init__.py b/tests/topotests/bgp_srv6_sid_explicit/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/topotests/bgp_srv6_sid_explicit/c11/frr.conf b/tests/topotests/bgp_srv6_sid_explicit/c11/frr.conf
new file mode 100644
index 000000000000..8cd11477707b
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/c11/frr.conf
@@ -0,0 +1,18 @@
+frr version 8.2.2-my-manual-build
+frr defaults traditional
+hostname c11
+!
+ip route 0.0.0.0/0 192.168.1.254
+ipv6 route ::/0 2001:1::ffff
+!
+interface eth10
+ ip address 192.168.1.1/24
+ ipv6 address 2001:1::1/64
+exit
+!
+segment-routing
+ traffic-eng
+ exit
+ srv6
+exit
+!
\ No newline at end of file
diff --git a/tests/topotests/bgp_srv6_sid_explicit/c12/frr.conf b/tests/topotests/bgp_srv6_sid_explicit/c12/frr.conf
new file mode 100644
index 000000000000..9788c762e039
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/c12/frr.conf
@@ -0,0 +1,35 @@
+frr version 8.2.2-my-manual-build
+frr defaults traditional
+hostname c12
+log stdout
+!
+ip route 0.0.0.0/0 192.168.1.254
+ipv6 route ::/0 2001:1::ffff
+!
+interface ce2-eth0
+ ip address 162.0.1.2/24
+exit
+!
+interface eth10
+ ip address 192.168.1.1/24
+ ipv6 address 2001:1::1/64
+exit
+!
+interface lo
+ ip address 2.2.2.2/32
+exit
+!
+router bgp 300
+ neighbor 162.0.1.1 remote-as 200
+ !
+ address-family ipv4 unicast
+  network 2.2.2.2/32
+ exit-address-family
+exit
+!
+segment-routing
+ traffic-eng
+ exit
+ srv6
+exit
+!
\ No newline at end of file
diff --git a/tests/topotests/bgp_srv6_sid_explicit/c21/frr.conf b/tests/topotests/bgp_srv6_sid_explicit/c21/frr.conf
new file mode 100644
index 000000000000..ab7eac122559
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/c21/frr.conf
@@ -0,0 +1,19 @@
+frr version 10.3-dev-my-manual-build
+frr defaults traditional
+hostname c21
+no ipv6 forwarding
+!
+ip route 0.0.0.0/0 192.168.2.254
+ip route 192.168.0.0/16 192.168.2.254
+ipv6 route ::/0 2001:2::ffff
+!
+interface eth10
+ ip address 192.168.2.1/24
+ ipv6 address 2001:2::1/64
+exit
+!
+segment-routing
+ traffic-eng
+ exit
+exit
+!
\ No newline at end of file
diff --git a/tests/topotests/bgp_srv6_sid_explicit/c22/frr.conf b/tests/topotests/bgp_srv6_sid_explicit/c22/frr.conf
new file mode 100644
index 000000000000..c5f8f27ad145
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/c22/frr.conf
@@ -0,0 +1,19 @@
+frr version 10.3-dev-my-manual-build
+frr defaults traditional
+hostname c22
+no ipv6 forwarding
+!
+ip route 0.0.0.0/0 192.168.2.254
+ip route 192.168.0.0/16 192.168.2.254
+ipv6 route ::/0 2001:2::ffff
+!
+interface eth10
+ ip address 192.168.2.1/24
+ ipv6 address 2001:2::1/64
+exit
+!
+segment-routing
+ traffic-eng
+ exit
+exit
+!
\ No newline at end of file
diff --git a/tests/topotests/bgp_srv6_sid_explicit/expected_explicit_srv6_sid_allocated.json b/tests/topotests/bgp_srv6_sid_explicit/expected_explicit_srv6_sid_allocated.json
new file mode 100644
index 000000000000..bfb47948d89b
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/expected_explicit_srv6_sid_allocated.json
@@ -0,0 +1,34 @@
+{
+    "2001:db8:1:1:1000::":{
+      "sid":"2001:db8:1:1:1000::",
+      "behavior":"End.DT46",
+      "context":{
+        "vrfName":"Vrf10",
+        "table":10
+      },
+      "locator":"MAIN",
+      "allocationMode":"explicit",
+      "clients":[
+        {
+          "protocol":"bgp",
+          "instance":0
+        }
+      ]
+    },
+    "2001:db8:1:1:2000::":{
+      "sid":"2001:db8:1:1:2000::",
+      "behavior":"End.DT46",
+      "context":{
+        "vrfName":"Vrf20",
+        "table":20
+      },
+      "locator":"MAIN",
+      "allocationMode":"explicit",
+      "clients":[
+        {
+          "protocol":"bgp",
+          "instance":0
+        }
+      ]
+    }
+}
\ No newline at end of file
diff --git a/tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_bgp_vpn_srv6_sid.json b/tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_bgp_vpn_srv6_sid.json
new file mode 100644
index 000000000000..5ddb7d0cdedc
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_bgp_vpn_srv6_sid.json
@@ -0,0 +1,112 @@
+{
+    "65001:10":{
+      "prefix":"192.168.1.0/24",
+      "version":1,
+      "advertisedTo":{
+        "2001:db8:12::1":{
+          "hostname":"r1"
+        }
+      },
+      "pathCount":1,
+      "paths":[
+        {
+          "aspath":{
+            "string":"65001",
+            "segments":[
+              {
+                "type":"as-sequence",
+                "list":[
+                  65001
+                ]
+              }
+            ],
+            "length":1
+          },
+          "origin":"incomplete",
+          "metric":0,
+          "valid":true,
+          "version":1,
+          "bestpath":{
+            "overall":true,
+            "selectionReason":"First path received"
+          },
+          "extendedCommunity":{
+            "string":"RT:0:10"
+          },
+          "remoteLabel":65536,
+          "remoteSid":"2001:db8:1:1::",
+          "nexthops":[
+            {
+              "ip":"0.0.0.0",
+              "hostname":"r1",
+              "afi":"ipv4",
+              "metric":0,
+              "accessible":true,
+              "used":true
+            }
+          ],
+          "peer":{
+            "peerId":"2001:db8:12::1",
+            "routerId":"192.0.2.1",
+            "hostname":"r1",
+            "type":"external"
+          }
+        }
+      ]
+    },
+    "65001:20":{
+      "prefix":"192.168.1.0/24",
+      "version":1,
+      "advertisedTo":{
+        "2001:db8:12::1":{
+          "hostname":"r1"
+        }
+      },
+      "pathCount":1,
+      "paths":[
+        {
+          "aspath":{
+            "string":"65001",
+            "segments":[
+              {
+                "type":"as-sequence",
+                "list":[
+                  65001
+                ]
+              }
+            ],
+            "length":1
+          },
+          "origin":"incomplete",
+          "metric":0,
+          "valid":true,
+          "version":1,
+          "bestpath":{
+            "overall":true,
+            "selectionReason":"First path received"
+          },
+          "extendedCommunity":{
+            "string":"RT:0:20"
+          },
+          "remoteLabel":131072,
+          "remoteSid":"2001:db8:1:1::",
+          "nexthops":[
+            {
+              "ip":"0.0.0.0",
+              "hostname":"r1",
+              "afi":"ipv4",
+              "metric":0,
+              "accessible":true,
+              "used":true
+            }
+          ],
+          "peer":{
+            "peerId":"2001:db8:12::1",
+            "routerId":"192.0.2.1",
+            "hostname":"r1",
+            "type":"external"
+          }
+        }
+      ]
+    }
+}
\ No newline at end of file
diff --git a/tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_bgp_vrf_srv6_sid_1.json b/tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_bgp_vrf_srv6_sid_1.json
new file mode 100644
index 000000000000..a008d48daa6f
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_bgp_vrf_srv6_sid_1.json
@@ -0,0 +1,56 @@
+{
+    "prefix":"192.168.1.0/24",
+    "version":2,
+    "pathCount":1,
+    "paths":[
+      {
+        "importedFrom":"65001:10",
+        "aspath":{
+          "string":"65001",
+          "segments":[
+            {
+              "type":"as-sequence",
+              "list":[
+                65001
+              ]
+            }
+          ],
+          "length":1
+        },
+        "nhVrfName":"default",
+        "announceNexthopSelf":true,
+        "origin":"incomplete",
+        "metric":0,
+        "valid":true,
+        "version":2,
+        "sourced":true,
+        "local":true,
+        "bestpath":{
+          "overall":true,
+          "selectionReason":"First path received"
+        },
+        "extendedCommunity":{
+          "string":"RT:0:10"
+        },
+        "remoteLabel":65536,
+        "remoteSid":"2001:db8:1:1::",
+        "nexthops":[
+          {
+            "ip":"2001:db8:12::1",
+            "hostname":"r2",
+            "afi":"ipv6",
+            "scope":"global",
+            "linkLocalOnly":false,
+            "length":24,
+            "metric":0,
+            "accessible":true,
+            "used":true
+          }
+        ],
+        "peer":{
+          "peerId":"::",
+          "routerId":"192.0.2.2"
+        }
+      }
+    ]
+}
\ No newline at end of file
diff --git a/tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_bgp_vrf_srv6_sid_2.json b/tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_bgp_vrf_srv6_sid_2.json
new file mode 100644
index 000000000000..561457206247
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_bgp_vrf_srv6_sid_2.json
@@ -0,0 +1,56 @@
+{
+    "prefix":"192.168.1.0/24",
+    "version":2,
+    "pathCount":1,
+    "paths":[
+      {
+        "importedFrom":"65001:20",
+        "aspath":{
+          "string":"65001",
+          "segments":[
+            {
+              "type":"as-sequence",
+              "list":[
+                65001
+              ]
+            }
+          ],
+          "length":1
+        },
+        "nhVrfName":"default",
+        "announceNexthopSelf":true,
+        "origin":"incomplete",
+        "metric":0,
+        "valid":true,
+        "version":2,
+        "sourced":true,
+        "local":true,
+        "bestpath":{
+          "overall":true,
+          "selectionReason":"First path received"
+        },
+        "extendedCommunity":{
+          "string":"RT:0:20"
+        },
+        "remoteLabel":131072,
+        "remoteSid":"2001:db8:1:1::",
+        "nexthops":[
+          {
+            "ip":"2001:db8:12::1",
+            "hostname":"r2",
+            "afi":"ipv6",
+            "scope":"global",
+            "linkLocalOnly":false,
+            "length":24,
+            "metric":0,
+            "accessible":true,
+            "used":true
+          }
+        ],
+        "peer":{
+          "peerId":"::",
+          "routerId":"192.0.2.2"
+        }
+      }
+    ]
+}
\ No newline at end of file
diff --git a/tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_zebra_vrf_srv6_sid_1.json b/tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_zebra_vrf_srv6_sid_1.json
new file mode 100644
index 000000000000..b65f00732ea9
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_zebra_vrf_srv6_sid_1.json
@@ -0,0 +1,53 @@
+{
+    "192.168.1.0/24":[
+      {
+        "prefix":"192.168.1.0/24",
+        "prefixLen":24,
+        "protocol":"bgp",
+        "vrfName":"Vrf10",
+        "selected":true,
+        "destSelected":true,
+        "distance":20,
+        "metric":0,
+        "installed":true,
+        "table":10,
+        "internalStatus":16,
+        "internalFlags":8,
+        "internalNextHopNum":1,
+        "internalNextHopActiveNum":1,
+        "nexthops":[
+          {
+            "flags":3,
+            "fib":true,
+            "ip":"2001:db8:12::1",
+            "afi":"ipv6",
+            "interfaceName":"eth10",
+            "vrf":"default",
+            "active":true,
+            "labels":[
+              65536
+            ],
+            "weight":1,
+            "seg6local":{
+              "action":"unspec",
+              "sidStructure":{
+                "blockLen":0,
+                "nodeLen":0,
+                "funcLen":0,
+                "argLen":0
+              }
+            },
+            "seg6localContext":{
+              "flavors":[
+              ],
+              "unknown":true
+            },
+            "seg6":{
+              "segs":"2001:db8:1:1:1000::"
+            },
+            "srv6EncapBehavior":"H.Encaps"
+          }
+        ]
+      }
+    ]
+}
\ No newline at end of file
diff --git a/tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_zebra_vrf_srv6_sid_2.json b/tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_zebra_vrf_srv6_sid_2.json
new file mode 100644
index 000000000000..1633bf0670fb
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/expected_rcvd_zebra_vrf_srv6_sid_2.json
@@ -0,0 +1,53 @@
+{
+    "192.168.1.0/24":[
+      {
+        "prefix":"192.168.1.0/24",
+        "prefixLen":24,
+        "protocol":"bgp",
+        "vrfName":"Vrf20",
+        "selected":true,
+        "destSelected":true,
+        "distance":20,
+        "metric":0,
+        "installed":true,
+        "table":20,
+        "internalStatus":16,
+        "internalFlags":8,
+        "internalNextHopNum":1,
+        "internalNextHopActiveNum":1,
+        "nexthops":[
+          {
+            "flags":3,
+            "fib":true,
+            "ip":"2001:db8:12::1",
+            "afi":"ipv6",
+            "interfaceName":"eth10",
+            "vrf":"default",
+            "active":true,
+            "labels":[
+              131072
+            ],
+            "weight":1,
+            "seg6local":{
+              "action":"unspec",
+              "sidStructure":{
+                "blockLen":0,
+                "nodeLen":0,
+                "funcLen":0,
+                "argLen":0
+              }
+            },
+            "seg6localContext":{
+              "flavors":[
+              ],
+              "unknown":true
+            },
+            "seg6":{
+              "segs":"2001:db8:1:1:2000::"
+            },
+            "srv6EncapBehavior":"H.Encaps"
+          }
+        ]
+      }
+    ]
+}
\ No newline at end of file
diff --git a/tests/topotests/bgp_srv6_sid_explicit/expected_sent_bgp_vpn_srv6_sid.json b/tests/topotests/bgp_srv6_sid_explicit/expected_sent_bgp_vpn_srv6_sid.json
new file mode 100644
index 000000000000..53a9b340d243
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/expected_sent_bgp_vpn_srv6_sid.json
@@ -0,0 +1,108 @@
+{
+    "65001:10":{
+      "prefix":"192.168.1.0/24",
+      "version":1,
+      "advertisedTo":{
+        "2001:db8:12::2":{
+          "hostname":"r2"
+        }
+      },
+      "pathCount":1,
+      "paths":[
+        {
+          "aspath":{
+            "string":"Local",
+            "segments":[
+            ],
+            "length":0
+          },
+          "nhVrfName":"Vrf10",
+          "announceNexthopSelf":true,
+          "origin":"incomplete",
+          "metric":0,
+          "weight":32768,
+          "valid":true,
+          "version":1,
+          "sourced":true,
+          "local":true,
+          "bestpath":{
+            "overall":true,
+            "selectionReason":"First path received"
+          },
+          "extendedCommunity":{
+            "string":"RT:0:10"
+          },
+          "originatorId":"192.0.2.1",
+          "remoteLabel":65536,
+          "remoteSid":"2001:db8:1:1::",
+          "nexthops":[
+            {
+              "ip":"0.0.0.0",
+              "hostname":"r1",
+              "afi":"ipv4",
+              "metric":0,
+              "accessible":true,
+              "used":true
+            }
+          ],
+          "peer":{
+            "peerId":"0.0.0.0",
+            "routerId":"192.0.2.1"
+          }
+        }
+      ]
+    },
+    "65001:20":{
+      "prefix":"192.168.1.0/24",
+      "version":1,
+      "advertisedTo":{
+        "2001:db8:12::2":{
+          "hostname":"r2"
+        }
+      },
+      "pathCount":1,
+      "paths":[
+        {
+          "aspath":{
+            "string":"Local",
+            "segments":[
+            ],
+            "length":0
+          },
+          "nhVrfName":"Vrf20",
+          "announceNexthopSelf":true,
+          "origin":"incomplete",
+          "metric":0,
+          "weight":32768,
+          "valid":true,
+          "version":1,
+          "sourced":true,
+          "local":true,
+          "bestpath":{
+            "overall":true,
+            "selectionReason":"First path received"
+          },
+          "extendedCommunity":{
+            "string":"RT:0:20"
+          },
+          "originatorId":"192.0.2.1",
+          "remoteLabel":131072,
+          "remoteSid":"2001:db8:1:1::",
+          "nexthops":[
+            {
+              "ip":"0.0.0.0",
+              "hostname":"r1",
+              "afi":"ipv4",
+              "metric":0,
+              "accessible":true,
+              "used":true
+            }
+          ],
+          "peer":{
+            "peerId":"0.0.0.0",
+            "routerId":"192.0.2.1"
+          }
+        }
+      ]
+    }
+}
\ No newline at end of file
diff --git a/tests/topotests/bgp_srv6_sid_explicit/r1/frr.conf b/tests/topotests/bgp_srv6_sid_explicit/r1/frr.conf
new file mode 100644
index 000000000000..e51413b93604
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/r1/frr.conf
@@ -0,0 +1,110 @@
+frr version 10.4-dev-my-manual-build
+frr defaults traditional
+hostname r1
+log file zebra.log
+log commands
+no ipv6 forwarding
+!
+password zebra
+!
+ipv6 route 2001:db8:2:2::/64 2001:db8:12::2
+!
+vrf Vrf10
+exit-vrf
+!
+vrf Vrf20
+exit-vrf
+!
+interface eth2
+ ip address 192.168.1.254/24
+exit
+!
+interface eth3
+ ip address 192.168.1.254/24
+exit
+!
+interface eth10
+ ipv6 address 2001:db8:12::1/64
+ mpls bgp forwarding
+exit
+!
+interface lo
+ ipv6 address 2001:db8:1:1::1/128
+exit
+!
+router bgp 65001
+ bgp router-id 192.0.2.1
+ no bgp ebgp-requires-policy
+ no bgp enforce-first-as
+ no bgp hard-administrative-reset
+ no bgp default ipv4-unicast
+ no bgp graceful-restart notification
+ neighbor 2001:db8:12::2 remote-as 65002
+ neighbor 2001:db8:12::2 timers 3 10
+ neighbor 2001:db8:12::2 timers connect 1
+ neighbor 2001:db8:12::2 capability extended-nexthop
+ !
+ segment-routing srv6
+  locator MAIN
+ exit
+ !
+ address-family ipv4 vpn
+  neighbor 2001:db8:12::2 activate
+ exit-address-family
+exit
+!
+router bgp 65001 vrf Vrf10
+ bgp router-id 192.0.2.1
+ no bgp enforce-first-as
+ no bgp hard-administrative-reset
+ no bgp graceful-restart notification
+ !
+ address-family ipv4 unicast
+  redistribute connected
+  rd vpn export 65001:10
+  rt vpn both 0:10
+  export vpn
+  import vpn
+ exit-address-family
+exit
+!
+router bgp 65001 vrf Vrf20
+ bgp router-id 192.0.2.1
+ no bgp enforce-first-as
+ no bgp hard-administrative-reset
+ no bgp graceful-restart notification
+ !
+ address-family ipv4 unicast
+  redistribute connected
+  rd vpn export 65001:20
+  rt vpn both 0:20
+  export vpn
+  import vpn
+ exit-address-family
+exit
+!
+segment-routing
+ srv6
+  locators
+   locator MAIN
+    prefix 2001:db8:1:1::/64 block-len 40 node-len 24 func-bits 16
+   exit
+   !
+  exit
+  !
+  formats
+   format usid-f3216
+   exit
+   !
+   format uncompressed-f4024
+   exit
+   !
+  exit
+  !
+ exit
+ !
+ traffic-eng
+ exit
+exit
+!
+end
\ No newline at end of file
diff --git a/tests/topotests/bgp_srv6_sid_explicit/r1/setup.sh b/tests/topotests/bgp_srv6_sid_explicit/r1/setup.sh
new file mode 100644
index 000000000000..fe00aa503872
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/r1/setup.sh
@@ -0,0 +1,13 @@
+ip link add sr0 type dummy
+ip link set sr0 up
+
+sysctl -w net.vrf.strict_mode=1
+
+ip link add Vrf10 type vrf table 10
+ip link set Vrf10 up
+
+ip link add Vrf20 type vrf table 20
+ip link set Vrf20 up
+
+ip link set eth2 master Vrf10
+ip link set eth3 master Vrf20
\ No newline at end of file
diff --git a/tests/topotests/bgp_srv6_sid_explicit/r2/frr.conf b/tests/topotests/bgp_srv6_sid_explicit/r2/frr.conf
new file mode 100644
index 000000000000..f8614393fba2
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/r2/frr.conf
@@ -0,0 +1,100 @@
+frr version 10.4-dev-my-manual-build
+frr defaults traditional
+hostname r2
+log file zebra.log
+log commands
+no ipv6 forwarding
+!
+password zebra
+!
+ipv6 route 2001:db8:1:1::/64 2001:db8:12::1
+!
+vrf Vrf10
+exit-vrf
+!
+vrf Vrf20
+exit-vrf
+!
+interface eth1
+ ip address 192.168.2.254/24
+exit
+!
+interface eth2
+ ip address 192.168.2.254/24
+exit
+!
+interface eth10
+ ipv6 address 2001:db8:12::2/64
+exit
+!
+interface lo
+ ipv6 address 2001:db8:2:2::1/128
+exit
+!
+router bgp 65002
+ bgp router-id 192.0.2.2
+ no bgp ebgp-requires-policy
+ no bgp default ipv4-unicast
+ neighbor 2001:db8:12::1 remote-as 65001
+ neighbor 2001:db8:12::1 timers 3 10
+ neighbor 2001:db8:12::1 timers connect 1
+ neighbor 2001:db8:12::1 capability extended-nexthop
+ !
+ segment-routing srv6
+  locator MAIN
+ exit
+ !
+ address-family ipv4 vpn
+  neighbor 2001:db8:12::1 activate
+ exit-address-family
+exit
+!
+router bgp 65002 vrf Vrf10
+ bgp router-id 192.0.2.2
+ !
+ address-family ipv4 unicast
+  redistribute connected
+  rd vpn export 65002:10
+  rt vpn both 0:10
+  export vpn
+  import vpn
+ exit-address-family
+exit
+!
+router bgp 65002 vrf Vrf20
+ bgp router-id 192.0.2.2
+ !
+ address-family ipv4 unicast
+  redistribute connected
+  rd vpn export 65002:20
+  rt vpn both 0:20
+  export vpn
+  import vpn
+ exit-address-family
+exit
+!
+segment-routing
+ srv6
+  locators
+   locator MAIN
+    prefix 2001:db8:2:2::/64 block-len 40 node-len 24 func-bits 16
+   exit
+   !
+  exit
+  !
+  formats
+   format usid-f3216
+   exit
+   !
+   format uncompressed-f4024
+   exit
+   !
+  exit
+  !
+ exit
+ !
+ traffic-eng
+ exit
+exit
+!
+end
\ No newline at end of file
diff --git a/tests/topotests/bgp_srv6_sid_explicit/r2/setup.sh b/tests/topotests/bgp_srv6_sid_explicit/r2/setup.sh
new file mode 100644
index 000000000000..316782245035
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/r2/setup.sh
@@ -0,0 +1,13 @@
+ip link add sr0 type dummy
+ip link set sr0 up
+
+sysctl -w net.vrf.strict_mode=1
+
+ip link add Vrf10 type vrf table 10
+ip link set Vrf10 up
+
+ip link add Vrf20 type vrf table 20
+ip link set Vrf20 up
+
+ip link set eth1 master Vrf10
+ip link set eth2 master Vrf20
\ No newline at end of file
diff --git a/tests/topotests/bgp_srv6_sid_explicit/test_bgp_srv6_sid_explicit.py b/tests/topotests/bgp_srv6_sid_explicit/test_bgp_srv6_sid_explicit.py
new file mode 100644
index 000000000000..0a7a89ae6306
--- /dev/null
+++ b/tests/topotests/bgp_srv6_sid_explicit/test_bgp_srv6_sid_explicit.py
@@ -0,0 +1,221 @@
+#!/usr/bin/env python
+# SPDX-License-Identifier: ISC
+
+#
+# test_bgp_srv6_sid_explicit.py
+#
+# Copyright (c) 2025 by
+# Alibaba Inc, Yuqing Zhao <galadriel.zyq@alibaba-inc.com>
+#
+
+"""
+test_bgp_srv6_sid_explicit.py:
+Test for VPN route with SRv6 SID set by bgp
+"""
+
+import os
+import sys
+import json
+import pytest
+import functools
+
+CWD = os.path.dirname(os.path.realpath(__file__))
+sys.path.append(os.path.join(CWD, "../"))
+
+# pylint: disable=C0413
+from lib import topotest
+from lib.topogen import Topogen, TopoRouter, get_topogen
+from lib.common_config import required_linux_kernel_version
+from lib.checkping import check_ping
+from lib.topolog import logger
+
+pytestmark = [pytest.mark.bgpd]
+
+
+def open_json_file(filename):
+    try:
+        with open(filename, "r") as f:
+            return json.load(f)
+    except IOError:
+        assert False, "Could not read file {}".format(filename)
+
+
+def build_topo(tgen):
+    tgen.add_router("r1")
+    tgen.add_router("r2")
+
+    tgen.add_router("c11")
+    tgen.add_router("c12")
+    tgen.add_router("c21")
+    tgen.add_router("c22")
+
+    tgen.add_link(tgen.gears["r1"], tgen.gears["r2"], "eth10", "eth10")
+    tgen.add_link(tgen.gears["r1"], tgen.gears["c11"], "eth2", "eth10")
+    tgen.add_link(tgen.gears["r1"], tgen.gears["c12"], "eth3", "eth10")
+    tgen.add_link(tgen.gears["r2"], tgen.gears["c21"], "eth1", "eth10")
+    tgen.add_link(tgen.gears["r2"], tgen.gears["c22"], "eth2", "eth10")
+
+
+def setup_module(mod):
+    result = required_linux_kernel_version("5.15")
+    if result is not True:
+        pytest.skip("Kernel requirements are not met")
+
+    tgen = Topogen(build_topo, mod.__name__)
+    tgen.start_topology()
+
+    for rname, router in tgen.routers().items():
+        router.run("/bin/bash {}/{}/setup.sh".format(CWD, rname))
+        router.load_frr_config("frr.conf")
+
+    tgen.start_router()
+
+
+def teardown_module(mod):
+    tgen = get_topogen()
+    tgen.stop_topology()
+
+
+# Configure 'sid vpn per-vrf export explicit X:X::X:X' in vrf and
+# check whether zebra allocates the explicit SRv6 SIDs.
+# By command 'show segment-routing srv6 sid json'
+def test_explicit_srv6_sid_allocated():
+    tgen = get_topogen()
+    if tgen.routers_have_failure():
+        pytest.skip(tgen.errors)
+    router = tgen.gears["r1"]
+
+    def _check_explicit_srv6_sid_allocated(router, expected_sid_file):
+        logger.info("checking bgp explicit srv6 sid allocated in sending end")
+        output = json.loads(router.vtysh_cmd("show segment-routing srv6 sid json"))
+        expected = open_json_file("{}/{}".format(CWD, expected_sid_file))
+        return topotest.json_cmp(output, expected)
+
+    def check_explicit_srv6_sid_allocated(router, expected_file):
+        func = functools.partial(_check_explicit_srv6_sid_allocated, router, expected_file)
+        _, result = topotest.run_and_expect(func, None, count=15, wait=1)
+        assert result is None, "Failed"
+
+    router.vtysh_cmd(
+        """
+        configure terminal
+         router bgp 65001 vrf Vrf10
+          sid vpn per-vrf export explicit 2001:db8:1:1:1000::
+        """
+    )
+    router.vtysh_cmd(
+        """
+        configure terminal
+         router bgp 65001 vrf Vrf20
+          sid vpn per-vrf export explicit 2001:db8:1:1:2000::
+        """
+    )
+
+    # FOR DEVELOPER:
+    # If you want to stop some specific line and start interactive shell,
+    # please use tgen.mininet_cli() to start it.
+    logger.info("--1--Test for bgp explicit srv6 sid allocated in zebra")
+    check_explicit_srv6_sid_allocated(router, "expected_explicit_srv6_sid_allocated.json")
+
+
+# Check whether bgp vpn route contains the static SRv6 SIDs
+# in sending end.
+# By command 'show bgp ipv4 vpn X.X.X.X/M json'
+def test_sent_bgp_vpn_srv6_sid():
+    tgen = get_topogen()
+    if tgen.routers_have_failure():
+        pytest.skip(tgen.errors)
+    router = tgen.gears["r1"]
+
+    def _check_sent_bgp_vpn_srv6_sid(router, expected_route_file):
+        logger.info("checking bgp vpn route with SRv6 SIDs in sending end")
+        output = json.loads(router.vtysh_cmd("show bgp ipv4 vpn 192.168.1.0/24 json"))
+        expected = open_json_file("{}/{}".format(CWD, expected_route_file))
+        return topotest.json_cmp(output, expected)
+
+    def check_sent_bgp_vpn_srv6_sid(router, expected_file):
+        func = functools.partial(_check_sent_bgp_vpn_srv6_sid, router, expected_file)
+        _, result = topotest.run_and_expect(func, None, count=15, wait=1)
+        assert result is None, "Failed"
+
+    # FOR DEVELOPER:
+    # If you want to stop some specific line and start interactive shell,
+    # please use tgen.mininet_cli() to start it.
+    logger.info("--2--Test for bgp explicit SRv6 SIDs in bgp vpn route in sending end")
+    check_sent_bgp_vpn_srv6_sid(router, "expected_sent_bgp_vpn_srv6_sid.json")
+
+
+# Check SRv6 SIDs in bgp vpn route in receiving end.
+# By command 'show bgp ipv4 vpn json X.X.X.X/M json'
+def test_rcvd_bgp_vpn_srv6_sid():
+    tgen = get_topogen()
+    if tgen.routers_have_failure():
+        pytest.skip(tgen.errors)
+    router = tgen.gears["r2"]
+
+    def _check_rcvd_bgp_vpn_srv6_sid(router, expected_route_file):
+        logger.info("checking bgp ipv4 vpn route with SRv6 SIDs in receiving end")
+        output = json.loads(router.vtysh_cmd("show bgp ipv4 vpn 192.168.1.0/24 json"))
+        expected = open_json_file("{}/{}".format(CWD, expected_route_file))
+        return topotest.json_cmp(output, expected)
+
+    def check_rcvd_bgp_vpn_srv6_sid(router, expected_file):
+        func = functools.partial(_check_rcvd_bgp_vpn_srv6_sid, router, expected_file)
+        _, result = topotest.run_and_expect(func, None, count=15, wait=1)
+        assert result is None, "Failed"
+
+    logger.info("--3--Test for SRv6 SID in bgp vpn in receiving end")
+    check_rcvd_bgp_vpn_srv6_sid(router, "expected_rcvd_bgp_vpn_srv6_sid.json")
+
+
+# Check SRv6 SIDs in bgp vrf route in receiving end.
+# By command 'show bgp vrf VrfName ipv4 X.X.X.X/M json'
+def test_rcvd_bgp_vrf_srv6_sid():
+    tgen = get_topogen()
+    if tgen.routers_have_failure():
+        pytest.skip(tgen.errors)
+    router = tgen.gears["r2"]
+
+    def _check_rcvd_bgp_vrf_srv6_sid(router, vrf_name, expected_route_file):
+        logger.info("checking bgp vrf {} ipv4 route with SRv6 SIDs in receiving end".format(vrf_name))
+        output = json.loads(router.vtysh_cmd("show bgp vrf {} ipv4 192.168.1.0/24 json".format(vrf_name)))
+        expected = open_json_file("{}/{}".format(CWD, expected_route_file))
+        return topotest.json_cmp(output, expected)
+
+    def check_rcvd_bgp_vrf_srv6_sid(router, vrf_name, expected_file):
+        func = functools.partial(_check_rcvd_bgp_vrf_srv6_sid, router, vrf_name, expected_file)
+        _, result = topotest.run_and_expect(func, None, count=15, wait=1)
+        assert result is None, "Failed"
+
+    logger.info("--4--Test for SRv6 SIDs in bgp vrf route in receiving end")
+    check_rcvd_bgp_vrf_srv6_sid(router, "Vrf10", "expected_rcvd_bgp_vrf_srv6_sid_1.json")
+    check_rcvd_bgp_vrf_srv6_sid(router, "Vrf20", "expected_rcvd_bgp_vrf_srv6_sid_2.json")
+
+
+# Check SRv6 SIDs in zebra vrf route in receiving end.
+# By command 'show ip route vrf VrfName X.X.X.X/M json'
+def test_rcvd_zebra_vrf_srv6_sid():
+    tgen = get_topogen()
+    if tgen.routers_have_failure():
+        pytest.skip(tgen.errors)
+    router = tgen.gears["r2"]
+
+    def _check_rcvd_zebra_vrf_srv6_sid(router, vrf_name, expected_route_file):
+        logger.info("checking zebra vrf {} ipv4 route with SRv6 SIDs in receiving end".format(vrf_name))
+        output = json.loads(router.vtysh_cmd("show ip route vrf {} 192.168.1.0/24 json".format(vrf_name)))
+        expected = open_json_file("{}/{}".format(CWD, expected_route_file))
+        return topotest.json_cmp(output, expected)
+
+    def check_rcvd_zebra_vrf_srv6_sid(router, vrf_name, expected_file):
+        func = functools.partial(_check_rcvd_zebra_vrf_srv6_sid, router, vrf_name, expected_file)
+        _, result = topotest.run_and_expect(func, None, count=15, wait=1)
+        assert result is None, "Failed"
+
+    logger.info("--5--Test for SRv6 SIDs in zebra vrf route in receiving end")
+    check_rcvd_zebra_vrf_srv6_sid(router, "Vrf10", "expected_rcvd_zebra_vrf_srv6_sid_1.json")
+    check_rcvd_zebra_vrf_srv6_sid(router, "Vrf20", "expected_rcvd_zebra_vrf_srv6_sid_2.json")
+
+
+if __name__ == "__main__":
+    args = ["-s"] + sys.argv[1:]
+    sys.exit(pytest.main(args))

From a9c8e72565782e0f26bf887686a94139da5b28c8 Mon Sep 17 00:00:00 2001
From: Yuqing Zhao <galadriel.zyq@alibaba-inc.com>
Date: Tue, 13 May 2025 06:19:01 +0000
Subject: [PATCH 3/3] doc: Add support for BGP explicit SRv6 SID CLI

Add BGP explicit SID configuration in bgp.rst.

Signed-off-by: Yuqing Zhao <galadriel.zyq@alibaba-inc.com>
---
 doc/user/bgp.rst | 11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

diff --git a/doc/user/bgp.rst b/doc/user/bgp.rst
index d950c8efb564..619145c4843c 100644
--- a/doc/user/bgp.rst
+++ b/doc/user/bgp.rst
@@ -3427,16 +3427,19 @@ General configuration
 Configuration of the SRv6 SID used to advertise a L3VPN for both IPv4 and IPv6
 is accomplished via the following command in the context of a VRF:
 
-.. clicmd:: sid vpn per-vrf export (1..1048575)|auto
+.. clicmd:: sid vpn per-vrf export <(1..1048575)|auto|explicit X:X::X:X>
 
    Enables a SRv6 SID to be attached to a route exported from the current
    unicast VRF to VPN. A single SID is used for both IPv4 and IPv6 address
    families. If you want to set a SID for only IPv4 address family or IPv6
-   address family, you need to use the command ``sid vpn export (1..1048575)|auto``
+   address family, you need to use the command ``sid vpn export <(1..1048575)|auto|explicit X:X::X:X>``
    in the context of an address-family. If the value specified is ``auto``,
    the SID value is automatically assigned from a pool maintained by the Zebra
-   daemon. If Zebra is not running, or if this command is not configured, automatic
-   SID assignment will not complete, which will block corresponding route export.
+   daemon. If the value specified is ``explicit X:X::X:X``, SID allocation
+   with the explicit value is requested from the Zebra daemon.
+   If Zebra is not running, or if this command is not configured, or if SID
+   allocation is failed, automatic or explicit SID assignment will not complete,
+   which will block corresponding route export.
 
 .. _bgp-evpn:
 
