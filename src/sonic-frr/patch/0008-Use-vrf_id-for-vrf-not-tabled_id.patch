From 44f3736ee601e06e43e978fa075402c3da4823bd Mon Sep 17 00:00:00 2001
From: Stepan Blyschak <stepanb@nvidia.com>
Date: Mon, 16 Jan 2023 11:45:19 +0000
Subject: [PATCH] From 349e3f758860be0077b69919c39764d3486ec44a Mon Sep 17
 00:00:00 2001 Subject: [PATCH] use vrf id instead of table id

Signed-off-by: Stepan Blyschak <stepanb@nvidia.com>
---
 zebra/rt_netlink.c |   72 +++++++++++++++++++++++++++++++++++++++++++---------
 1 file changed, 59 insertions(+), 13 deletions(-)

diff --git a/zebra/rt_netlink.c b/zebra/rt_netlink.c
index f12b324e0..9b0599899 100644
--- a/zebra/rt_netlink.c
+++ b/zebra/rt_netlink.c
@@ -385,6 +385,31 @@ static inline int proto2zebra(int proto, int family, bool is_nexthop)
 	return proto;
 }
 
+static uint32_t table_lookup_by_vrf(vrf_id_t vrf_id, ns_id_t ns_id)
+{
+	struct vrf *vrf;
+	struct zebra_vrf *zvrf;
+
+	RB_FOREACH (vrf, vrf_id_head, &vrfs_by_id) {
+		zvrf = vrf->info;
+		if (zvrf == NULL)
+			continue;
+		/* case vrf with netns : match the netnsid */
+		if (vrf_is_backend_netns()) {
+			if (ns_id == zvrf_id(zvrf))
+                return zvrf->table_id;
+		} else {
+			/* VRF is VRF_BACKEND_VRF_LITE */
+			if (zvrf_id(zvrf) != vrf_id)
+				continue;
+            return zvrf->table_id;
+		}
+	}
+
+	return RT_TABLE_UNSPEC;
+}
+
+
 /**
  * @parse_encap_mpls() - Parses encapsulated mpls attributes
  * @tb:         Pointer to rtattr to look for nested items in.
@@ -742,7 +767,8 @@ static int netlink_route_read_unicast_ctx(struct nlmsghdr *h, ns_id_t ns_id,
 	char anyaddr[16] = {};
 	int proto = ZEBRA_ROUTE_KERNEL;
 	int index = 0;
-	int tableid;
+	int tableid = ZEBRA_ROUTE_TABLE_UNKNOWN;
+	int vrf_id = VRF_UNKNOWN;
 	int metric = 0;
 	uint32_t mtu = 0;
 	uint8_t distance = 0;
@@ -815,11 +841,19 @@ static int netlink_route_read_unicast_ctx(struct nlmsghdr *h, ns_id_t ns_id,
 
 	selfroute = is_selfroute(rtm->rtm_protocol);
 
-	/* Table corresponding to route. */
-	if (tb[RTA_TABLE])
-		tableid = *(int *)RTA_DATA(tb[RTA_TABLE]);
-	else
-		tableid = rtm->rtm_table;
+	if (!ctx) {
+		/* Table corresponding to route. */
+		if (tb[RTA_TABLE])
+			tableid = *(int *)RTA_DATA(tb[RTA_TABLE]);
+		else
+			tableid = rtm->rtm_table;
+	} else {
+		/* With FPM, rtm_table contains vrf id, see netlink_route_multipath_msg_encode */
+		if (tb[RTA_TABLE])
+			vrf_id = *(int *)RTA_DATA(tb[RTA_TABLE]);
+		else
+			vrf_id = rtm->rtm_table;
+	}
 
 	/* Map flags values */
 	if (rtm->rtm_flags & RTM_F_TRAP)
@@ -974,7 +1008,7 @@ static int netlink_route_read_unicast_ctx(struct nlmsghdr *h, ns_id_t ns_id,
 	dplane_ctx_set_afi(ctx, afi);
 	dplane_ctx_set_safi(ctx, SAFI_UNICAST);
 	dplane_ctx_set_table(ctx, tableid);
-	dplane_ctx_set_vrf(ctx, VRF_UNKNOWN);
+	dplane_ctx_set_vrf(ctx, vrf_id);
 	dplane_ctx_set_ns_id(ctx, ns_id);
 	dplane_ctx_set_dest(ctx, &p);
 	if (src_p.prefixlen > 0)
@@ -2530,12 +2564,24 @@ ssize_t netlink_route_multipath_msg_encode(int cmd, struct zebra_dplane_ctx *ctx
 
 	/* Table corresponding to this route. */
 	table_id = dplane_ctx_get_table(ctx);
-	if (table_id < 256)
-		req->r.rtm_table = table_id;
-	else {
-		req->r.rtm_table = RT_TABLE_UNSPEC;
-		if (!nl_attr_put32(&req->n, datalen, RTA_TABLE, table_id))
-			return 0;
+	if (!fpm) {
+		if (table_id < 256)
+			req->r.rtm_table = table_id;
+		else {
+			req->r.rtm_table = RT_TABLE_UNSPEC;
+			if (!nl_attr_put32(&req->n, datalen, RTA_TABLE, table_id))
+				return 0;
+		}
+	} else {
+		/* Put vrf if_index instead of table id */
+		vrf_id_t vrf = dplane_ctx_get_vrf(ctx);
+		if (vrf < 256)
+			req->r.rtm_table = vrf;
+		else {
+			req->r.rtm_table = RT_TABLE_UNSPEC;
+			if (!nl_attr_put32(&req->n, datalen, RTA_TABLE, vrf))
+				return 0;
+		}
 	}

 	if (IS_ZEBRA_DEBUG_KERNEL)
 		zlog_debug(
