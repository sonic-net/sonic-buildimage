From dccb0f4858de2a04934a7a7f7bd9eee01576ff1c Mon Sep 17 00:00:00 2001
From: Carmine Scarpitta <cscarpit@cisco.com>
Date: Sat, 7 Jun 2025 10:37:36 +0000
Subject: [PATCH] zebra: Provide SID value when sending SRv6 SID release notify
 message

When a daemon asks SID Manager to release a SID, SID Manager calls
static_zebra_srv6_sid_notify() to notify the daemon if the SID release
was successful or there was an error.

Currently, when calling static_zebra_srv6_sid_notify(), SID Manager
does not provide the SID value, which makes difficult for the daemon to
figure out which SID the notification refers to.

The problem can be clearly observed by enabling `debug static srv6`,
removing a SID in STATIC and looking at STATIC logs.

Before the change, STATIC receives a notify message from SID Manager
that does not contain a sid_value "::" :

2025/06/07 10:15:32.204664 STATIC: [J9AAH-6B3EE] static_zebra_srv6_sid_notify: received SRv6 SID notify: ctx End.DT6 vrf_id 4 sid_value :: sid_func 0 note ZAPI_SRV6_SID_RELEASED
2025/06/07 10:15:32.204691 STATIC: [HMKQ2-9A3HV] static_zebra_srv6_sid_notify: SRv6 SID :: End.DT6 vrf_id 4: RELEASED

After the change, the notify message provides an indication of which
sid_value has been released "fcbb:bbbb:1:fe20::" :

2025/06/07 10:13:35.840414 STATIC: [J9AAH-6B3EE] static_zebra_srv6_sid_notify: received SRv6 SID notify: ctx End.DT6 vrf_id 4 sid_value fcbb:bbbb:1:fe20:: sid_func 0 note ZAPI_SRV6_SID_RELEASED
2025/06/07 10:13:35.840445 STATIC: [HMKQ2-9A3HV] static_zebra_srv6_sid_notify: SRv6 SID fcbb:bbbb:1:fe20:: End.DT6 vrf_id 4: RELEASED

Signed-off-by: Carmine Scarpitta <cscarpit@cisco.com>
---
 zebra/zebra_srv6.c | 13 ++++++++-----
 1 file changed, 8 insertions(+), 5 deletions(-)

diff --git a/zebra/zebra_srv6.c b/zebra/zebra_srv6.c
index ee0d6c41c67f..3cfc1c606ff2 100644
--- a/zebra/zebra_srv6.c
+++ b/zebra/zebra_srv6.c
@@ -2419,6 +2419,7 @@ static int srv6_manager_release_sid_internal(struct zserv *client,
 	struct listnode *node, *nnode;
 	char buf[256];
 	const char *locator_name = NULL;
+	struct in6_addr sid_value = {};
 
 	if (IS_ZEBRA_DEBUG_SRV6)
 		zlog_debug("%s: releasing SRv6 SID associated with ctx %s",
@@ -2427,9 +2428,11 @@ static int srv6_manager_release_sid_internal(struct zserv *client,
 	/* Lookup Zebra SID context and release it */
 	for (ALL_LIST_ELEMENTS(srv6->sids, node, nnode, zctx))
 		if (memcmp(&zctx->ctx, ctx, sizeof(struct srv6_sid_ctx)) == 0) {
-			if (zctx->sid && zctx->sid->locator)
-				locator_name =
-					(const char *)zctx->sid->locator->name;
+			if (zctx->sid) {
+				if (zctx->sid->locator)
+					locator_name = (const char *)zctx->sid->locator->name;
+				sid_value = zctx->sid->value;
+			}
 			ret = release_srv6_sid(client, zctx);
 			break;
 		}
@@ -2439,10 +2442,10 @@ static int srv6_manager_release_sid_internal(struct zserv *client,
 			   srv6_sid_ctx2str(buf, sizeof(buf), ctx));
 
 	if (ret == 0)
-		zsend_srv6_sid_notify(client, ctx, NULL, 0, 0, locator_name,
+		zsend_srv6_sid_notify(client, ctx, &sid_value, 0, 0, locator_name,
 				      ZAPI_SRV6_SID_RELEASED);
 	else
-		zsend_srv6_sid_notify(client, ctx, NULL, 0, 0, locator_name,
+		zsend_srv6_sid_notify(client, ctx, &sid_value, 0, 0, locator_name,
 				      ZAPI_SRV6_SID_FAIL_RELEASE);
 
 	return ret;
