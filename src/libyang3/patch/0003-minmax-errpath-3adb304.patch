From 3adb3044f9a3e67f88d8bf3286b6ada8bccb09e8 Mon Sep 17 00:00:00 2001
From: Michal Vasko <mvasko@cesnet.cz>
Date: Mon, 24 Feb 2025 10:15:19 +0100
Subject: [PATCH] validation UPDATE improve list min/max log path

Fixes #2353
---
 src/validation.c                    | 66 ++++++++++++++++++++---------
 tests/utests/data/test_validation.c |  6 +--
 tests/utests/node/list.c            |  4 +-
 3 files changed, 50 insertions(+), 26 deletions(-)

diff --git a/src/validation.c b/src/validation.c
index bea1047d5..a21d8f034 100644
--- a/src/validation.c
+++ b/src/validation.c
@@ -1140,13 +1140,17 @@ static LY_ERR
 lyd_validate_minmax(const struct lyd_node *first, const struct lyd_node *parent, const struct lysc_node *snode,
         uint32_t min, uint32_t max, uint32_t val_opts)
 {
+    LY_ERR rc = LY_SUCCESS;
     uint32_t count = 0;
-    struct lyd_node *iter;
+    struct lyd_node *iter, *last_iter = NULL;
     const struct lysc_when *disabled;
+    char *log_path;
+    int r;
 
     assert(min || max);
 
     LYD_LIST_FOR_INST(first, snode, iter) {
+        last_iter = iter;
         ++count;
 
         if (min && (count == min)) {
@@ -1182,32 +1186,52 @@ lyd_validate_minmax(const struct lyd_node *first, const struct lyd_node *parent,
         max = 0;
     }
 
-    if (min) {
-        if (val_opts & LYD_VALIDATE_OPERATIONAL) {
-            /* only a warning */
-            LOG_LOCSET(snode, NULL);
-            LOGWRN(snode->module->ctx, "Too few \"%s\" instances.", snode->name);
-            LOG_LOCBACK(1, 0);
+    if (min || max) {
+        /* set log path */
+        if (last_iter) {
+            /* standard data path */
+            LOG_LOCSET(NULL, last_iter);
         } else {
-            LOG_LOCSET(snode, NULL);
-            LOGVAL_APPTAG(snode->module->ctx, "too-few-elements", LY_VCODE_NOMIN, snode->name);
-            LOG_LOCBACK(1, 0);
-            return LY_EVALID;
+            /* data path with last schema node name or only the schema node if !parent */
+            if (lyd_node_module(parent) != snode->module) {
+                r = asprintf(&log_path, "/%s:%s", snode->module->name, snode->name);
+            } else {
+                r = asprintf(&log_path, "/%s", snode->name);
+            }
+            if (r == -1) {
+                LOGMEM_RET(snode->module->ctx);
+            }
+            ly_log_location(NULL, parent, log_path, NULL);
+            free(log_path);
         }
-    } else if (max) {
-        if (val_opts & LYD_VALIDATE_OPERATIONAL) {
-            /* only a warning */
-            LOG_LOCSET(NULL, iter);
-            LOGWRN(snode->module->ctx, "Too many \"%s\" instances.", snode->name);
+
+        if (min) {
+            if (val_opts & LYD_VALIDATE_OPERATIONAL) {
+                /* only a warning */
+                LOGWRN(snode->module->ctx, "Too few \"%s\" instances.", snode->name);
+            } else {
+                LOGVAL_APPTAG(snode->module->ctx, "too-few-elements", LY_VCODE_NOMIN, snode->name);
+                rc = LY_EVALID;
+            }
+        } else if (max) {
+            if (val_opts & LYD_VALIDATE_OPERATIONAL) {
+                /* only a warning */
+                LOGWRN(snode->module->ctx, "Too many \"%s\" instances.", snode->name);
+            } else {
+                LOGVAL_APPTAG(snode->module->ctx, "too-many-elements", LY_VCODE_NOMAX, snode->name);
+                rc = LY_EVALID;
+            }
+        }
+
+        /* revert log path */
+        if (last_iter) {
             LOG_LOCBACK(0, 1);
         } else {
-            LOG_LOCSET(NULL, iter);
-            LOGVAL_APPTAG(snode->module->ctx, "too-many-elements", LY_VCODE_NOMAX, snode->name);
-            LOG_LOCBACK(0, 1);
-            return LY_EVALID;
+            ly_log_location_revert(0, parent ? 1 : 0, 1, 0);
         }
     }
-    return LY_SUCCESS;
+
+    return rc;
 }
 
 /**
diff --git a/tests/utests/data/test_validation.c b/tests/utests/data/test_validation.c
index 4a505fe75..694501604 100644
--- a/tests/utests/data/test_validation.c
+++ b/tests/utests/data/test_validation.c
@@ -277,12 +277,12 @@ test_minmax(void **state)
     CHECK_PARSE_LYD_PARAM("<l xmlns=\"urn:tests:c\">mate</l>"
             "<d xmlns=\"urn:tests:c\"/>",
             LYD_XML, 0, LYD_VALIDATE_PRESENT, LY_EVALID, tree);
-    CHECK_LOG_CTX_APPTAG("Too few \"l\" instances.", "/c:choic/b/l", 0, "too-few-elements");
+    CHECK_LOG_CTX_APPTAG("Too few \"l\" instances.", "/c:l[.='mate']", 0, "too-few-elements");
 
     CHECK_PARSE_LYD_PARAM("<l xmlns=\"urn:tests:c\">val1</l>"
             "<l xmlns=\"urn:tests:c\">val2</l>",
             LYD_XML, 0, LYD_VALIDATE_PRESENT, LY_EVALID, tree);
-    CHECK_LOG_CTX_APPTAG("Too few \"l\" instances.", "/c:choic/b/l", 0, "too-few-elements");
+    CHECK_LOG_CTX_APPTAG("Too few \"l\" instances.", "/c:l[.='val2']", 0, "too-few-elements");
 
     LYD_TREE_CREATE("<l xmlns=\"urn:tests:c\">val1</l>"
             "<l xmlns=\"urn:tests:c\">val2</l>"
@@ -1259,7 +1259,7 @@ test_multi_error(void **state)
     CHECK_PARSE_LYD_PARAM(data, LYD_JSON, LYD_PARSE_ONLY, 0, LY_SUCCESS, tree);
     assert_int_equal(LY_EVALID, lyd_validate_all(&tree, NULL, LYD_VALIDATE_PRESENT | LYD_VALIDATE_MULTI_ERROR, NULL));
     lyd_free_tree(tree);
-    CHECK_LOG_CTX_APPTAG("Too few \"ll\" instances.", "/ii:cont/ll", 0, "too-few-elements");
+    CHECK_LOG_CTX_APPTAG("Too few \"ll\" instances.", "/ii:cont/ll[.='25']", 0, "too-few-elements");
     CHECK_LOG_CTX_APPTAG("l leaf is not left", "/ii:cont/l3", 0, "not-left");
     CHECK_LOG_CTX_APPTAG("Must condition \"../l = 'right'\" not satisfied.", "/ii:cont/l2", 0, "must-violation");
     CHECK_LOG_CTX_APPTAG("Duplicate instance of \"l\".", "/ii:cont/l", 0, NULL);
diff --git a/tests/utests/node/list.c b/tests/utests/node/list.c
index 4a69dbbd0..39d026b68 100644
--- a/tests/utests/node/list.c
+++ b/tests/utests/node/list.c
@@ -1051,7 +1051,7 @@ test_xml(void **state)
             "</user>";
     CHECK_PARSE_LYD_PARAM(data, LYD_XML, 0, LYD_VALIDATE_PRESENT, LY_EVALID, tree);
     assert_null(tree);
-    CHECK_LOG_CTX("Too few \"user\" instances.", "/T2:user", 0);
+    CHECK_LOG_CTX("Too few \"user\" instances.", "/T2:user[uid='1']", 0);
 
     data =
             "<user xmlns=\"urn:tests:T2\">"
@@ -1347,7 +1347,7 @@ test_json(void **state)
             "]}";
     CHECK_PARSE_LYD_PARAM(data, LYD_JSON, 0, LYD_VALIDATE_PRESENT, LY_EVALID, tree);
     assert_null(tree);
-    CHECK_LOG_CTX("Too few \"user\" instances.", "/T2:user", 0);
+    CHECK_LOG_CTX("Too few \"user\" instances.", "/T2:user[uid='4']", 0);
 
     data =
             "{\"T2:user\": ["
