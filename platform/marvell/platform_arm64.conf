#  Copyright (C) Marvell Inc

# over ride default behaviour

echo "Preparing for installation ... "

# global defines
VAR_LOG=512
UBOOT_FW_DEFAULT=1

kernel_addr=0x1100000
kernel_version=6.1.0-22-2-arm64
kernel_fname="/boot/vmlinuz-$kernel_version"
initrd_fname="/boot/initrd.img-$kernel_version"
fit_fname="/boot/sonic_arm64.fit"
demo_volume_label=SONiC-OS

# global mount defines
demo_mnt=/tmp

if [ "$install_env" = "onie" ]; then
    MACH_FILE="/etc/machine.conf"
else
    MACH_FILE="/host/machine.conf"
fi

PLATFORM=`sed -n 's/^onie_platform=\(.*\)/\1/p' $MACH_FILE`
echo "Intalling SONiC from $install_env on Platform $PLATFORM"

PLATFORM_AC5X=0
PLATFORM_CN9131=0

case $PLATFORM in
    arm64-nokia_ixs7215_52xb-r0) PLATFORM_7215_A1=1;
		fdt_fname="/usr/lib/linux-image-${kernel_version}/marvell/7215-ixs-a1.dtb";
		fit_conf_name="#conf_7215_a1";;
    arm64-marvell_rd98DX35xx-r0) PLATFORM_AC5X=1;
		fdt_fname="/usr/lib/linux-image-$kernel_version/marvell/ac5-98dx35xx-rd.dtb";
		fit_conf_name="#conf_ac5x";;
    arm64-marvell_rd98DX35xx_cn9131-r0) PLATFORM_CN9131=1;
		fdt_fname="/boot/cn9131-db-comexpress.dtb";
		fit_conf_name="#conf_cn9131";;
    arm64-supermicro_sse_g3748-r0) PLATFORM_AC5X=2;
                fdt_fname="/usr/lib/linux-image-${kernel_version}/marvell/smc_sse-g3748.dtb";
                fit_conf_name="#conf_smc_sse-g3748";;
esac

if [ $PLATFORM_AC5X -eq 1 ]; then
    fdt_addr=0x201000000
    fit_addr=0x210000000
    initrd_addr=0x206000000

    FW_ENV_DEFAULT='/dev/mtd0 0x400000 0x10000 0x10000'
    demo_part=2
    mmc_bus="mmc0:0001"
elif [ $PLATFORM_7215_A1 -eq 1 ]; then
    fit_addr=0x20000000
    VAR_LOG=4096
    FW_ENV_DEFAULT='/dev/mtd1 0x0 0x10000 0x10000'
    demo_part=2
    mmc_bus="mmc0:0001"
elif [ $PLATFORM_CN9131 -eq 1 ]; then
    fdt_addr=0x1000000
    fit_addr=0x8000000
    initrd_addr=0x2000000
    demo_part=2
    FW_ENV_DEFAULT='/dev/mtd1 0x1F0000 0x10000 0x10000'
    mmc_bus="mmc0:0001"
elif [ $PLATFORM_AC5X -eq 2 ]; then
    fdt_addr=0x201000000
    fit_addr=0x210000000
    initrd_addr=0x206000000

    #---------------------------------------------------------------
    #              device name offset  Env size sector size
    #              ----------- ------- -------- -----------
    FW_ENV_DEFAULT='/dev/mtd1 0x000000 0x10000 0x10000'
    demo_part=2
    mmc_bus="mmc0:0001"

    onie_part_size=168M
    onie_part_num=1
    onie_part_label=ONIE

    sonic_part_num=2
    sonic_part_label=SONiC-OS

    swap_part_size=3G
    swap_part_num=3
    swap_part_label=swap

    debug_part_size=2G
    debug_swap_part_size=5G
    debug_part_num=4
    debug_part_label=DEBUG

    current_image_dir=""
    current_image_name=""
    current_fdt_name=""
    current_fit_name=""
    current_sonic_version_1=""
else
    fdt_addr=0x1000000
    fit_addr=0x8000000
    initrd_addr=0x2000000

    fdt_fname="/usr/lib/linux-image-$kernel_version/marvell/armada-7020-comexpress.dtb"

    FW_ENV_DEFAULT='/dev/mtd1 0x0 0x10000 0x100000'
    demo_part=1
    mmc_bus="mmc0:aaaa"
fi

# Skip VID Header in UBIFS
LINUX_MISC_CMD='apparmor=1 security=apparmor usbcore.autosuspend=-1'

#Get block device
#Default block device is eMMC, if not look for usb storage
get_install_device()
{
    for i in 0 1 2 ; do
        if $(ls -l /sys/block/mmcblk$i/device 2>/dev/null | grep -q "$mmc_bus") ; then
            echo "/dev/mmcblk$i"
            blk_dev=/dev/mmcblk$i
            echo "Selected mmc $blk_dev"
            return 0
        fi
    done

    echo "ERROR storage not found"
    return 1
}

get_install_device
if [ $? -ne 0 ]; then
    echo "Error: Unable to detect $blk_dev $demo_dev"
    exit 1
fi

demo_dev=${blk_dev}p${demo_part}

remove_dev_partitions() {
    echo "Remove all existing partitions starting partnum: ${demo_part} from ${blk_dev}"
    local dev_to_install=${blk_dev}p
    for p in $(seq ${demo_part} 9) ; do
        if [[ -e ${dev_to_install}${p} ]]; then
            echo "Removing partition ${dev_to_install}${p}"
            sgdisk -d ${p} ${blk_dev} || true
        fi
    done
    partprobe ${blk_dev}
}

create_demo_partition() {
    if [ $PLATFORM_AC5X -eq 2 ]; then
        onie_part=$(sgdisk -p "$blk_dev" | grep -e "$onie_part_label" | awk '{print $1}')
        sonic_part=$(sgdisk -p "$blk_dev" | grep -e "$sonic_part_label" | awk '{print $1}')
        swap_part=$(sgdisk -p "$blk_dev" | grep -e "$swap_part_label" | awk '{print $1}')
        debug_part=$(sgdisk -p "$blk_dev" | grep -e "$debug_part_label" | awk '{print $1}')

        if [ -z "$onie_part" ]
        then
            echo "Partitioning is Incorrect. Re-partitioning"
            sgdisk -oZ ${blk_dev}

            sgdisk --new ${onie_part_num}:0:+${onie_part_size} \
                --change-name=${onie_part_num}:${onie_part_label} \
                --typecode=${onie_part_num}:8300 -p ${blk_dev}

            if [ $? -ne 0 ]; then
                echo "Failed creating onie eMMC partition"
                return 2
            fi

            mkfs.ext4 -F -L ${onie_part_label} ${blk_dev}p${onie_part_num}
        else
            fsck.ext4 -v -p ${blk_dev}p${onie_part_num}
        fi

        if [ -z "$debug_part" ]; then
            # Create debug partition
            sgdisk --new ${debug_part_num}:-${debug_part_size}: \
                --change-name=${debug_part_num}:${debug_part_label} \
                --typecode=${debug_part_num}:8300 -p ${blk_dev}

            mkfs.ext4 -F -L ${debug_part_label} ${blk_dev}p${debug_part_num}
        else
            fsck.ext4 -v -p ${blk_dev}p${debug_part_num}
        fi

        if [ -z "$swap_part" ]; then
            # Create swap partition
            swap_start_num=-${debug_swap_part_size}
            swap_end_num=-${debug_part_size}
            #sgdisk --new ${swap_part_num}:-${swap_part_size}: \
            sgdisk --new ${swap_part_num}:${swap_start_num}:${swap_end_num} \
                --change-name=${swap_part_num}:${swap_part_label} \
                --typecode=${swap_part_num}:8200 -p ${blk_dev}
        fi

        if [ -z "$sonic_part" ]; then
            # Create sonic partition
            start_num=$(sgdisk -F $blk_dev)
            end_num=$(sgdisk -E $blk_dev)

            sgdisk --new ${sonic_part_num}:${start_num}:${end_num} \
                --change-name=${sonic_part_num}:${sonic_part_label} \
                --typecode=${sonic_part_num}:8300 -p ${blk_dev}

            mkfs.ext4 -F -L ${sonic_part_label} ${blk_dev}p${sonic_part_num}
        else
            mkfs.ext4 -F -L ${sonic_part_label} ${blk_dev}p${sonic_part_num}
        fi

        partprobe
        sync

        mkswap ${blk_dev}p${swap_part_num}
        echo "${blk_dev}p${swap_part_num}    swap  swap  defaults   0   0" > /etc/fstab
        swapon -a

        return 0

    else
        # SD CARD
        remove_dev_partitions

        # Create sonic partition
        sgdisk --new ${demo_part}:: \
            --change-name=${demo_part}:${demo_volume_label} \
            --typecode=${demo_part}:8300 -p ${blk_dev}

        partprobe
    fi
}

create_partition() {
    get_install_device
    if [ $? -ne 0 ]; then
        echo "Error: Unable to detect $blk_dev $demo_dev"
        exit 1
    fi

    # Platform specific partition 
    create_demo_partition
}

mount_partition() {
    # Make filesystem
    echo "demo label: $demo_volume_label. $demo_dev..."
    mkfs.ext4 -L $demo_volume_label $demo_dev

    mount -t ext4 -o defaults,rw $demo_dev $demo_mnt || {
        echo "Error: Unable to mount $demo_dev on $demo_mnt"
        exit 1
    }
}

prepare_boot_menu() {
    echo "Sync up cache ..."
    sync
    echo "Setting up U-Boot environment..."

    DTB_HAS_ENV_BLK=$(grep uboot-env /proc/mtd | sed -e 's/:.*$//')
    if [ -c "/dev/$DTB_HAS_ENV_BLK" ]; then
        PROC_ENV_FILE=$(find /proc/device-tree/ -name env_size)
        if [ -n "$PROC_ENV_FILE" ]
        then
            UBOOT_ENV_SIZ="0x$(hd $PROC_ENV_FILE | awk 'FNR==1 {print $2 $3 $4 $5}')"
            UBOOT_ENV_ERASE_SIZ="0x$(grep uboot-env /proc/mtd | awk '{print $3}')"
            if [[ -n "$UBOOT_ENV_SIZ" && -n "$UBOOT_ENV_ERASE_SIZ" ]]
            then
                # Env info from DTB 
                FW_ENV_DTB="/dev/$DTB_HAS_ENV_BLK 0x00000000 $UBOOT_ENV_SIZ $UBOOT_ENV_ERASE_SIZ"
            fi
        fi
    fi
    if [ $UBOOT_FW_DEFAULT -eq 1 ]
    then
        echo $FW_ENV_DEFAULT > /etc/fw_env.config
        echo "Using pre-configured uboot env"
    fi
    image_name=${image_dir}${kernel_fname}
    initrd_name=${image_dir}${initrd_fname}
    fdt_name=${image_dir}${fdt_fname}
    fit_name=${image_dir}${fit_fname}
    if [ $PLATFORM_AC5X -eq 2 ]; then
        current_image_dir="image-$running_sonic_revision"
        current_image_name=${current_image_dir}${kernel_name}
        current_fdt_name=${current_image_dir}${fdt_fname}
        current_fit_name=${current_image_dir}${fit_fname}
        current_sonic_version_1="${demo_volume_label}-${running_sonic_revision}"
    fi

    if [ "$install_env" = "onie" ]; then
        FW_ARG="-f"
        fw_setenv ${FW_ARG} image_dir_old "" > /dev/null
        fw_setenv ${FW_ARG} image_name_old "" > /dev/null
        fw_setenv ${FW_ARG} initrd_name_old "" > /dev/null
        fw_setenv ${FW_ARG} fdt_name_old "" > /dev/null
        fw_setenv ${FW_ARG} fit_name_old "" > /dev/null
        fw_setenv ${FW_ARG} sonic_version_2 "None" > /dev/null
        fw_setenv ${FW_ARG} linuxargs_old "" > /dev/null
    else
        if [ $PLATFORM_AC5X -eq 2 ]; then
            sonic_version_1=$(fw_printenv -n sonic_version_1 || true)
            sonic_version_2=$(fw_printenv -n sonic_version_2 || true)
            if [ "$sonic_version_1" != "NONE" ] && [ "$sonic_version_1" != "None" ]
            then
                if [ "$running_sonic_revision" != "None" ]
                then
                    image_dir_old=${current_image_dir}
                    image_name_old=${current_image_name}
                    initrd_name_old=${current_initrd_name}
                    fdt_name_old=${current_fdt_name}
                    fit_name_old=${current_fit_name}
                    sonic_version_2=${current_sonic_version_1}
                else
                    image_dir_old=$(fw_printenv -n image_dir || true)
                    image_name_old=$(fw_printenv -n image_name || true)
                    initrd_name_old=$(fw_printenv -n initrd_name || true)
                    fdt_name_old=$(fw_printenv -n fdt_name || true)
                    fit_name_old=$(fw_printenv -n fit_name || true)
                    sonic_version_2=$(fw_printenv -n sonic_version_1 || true)
                fi
            else
                if [ "$sonic_version_2" != "NONE" ] && [ "$sonic_version_2" != "None" ]
                then
                    image_dir_old=$(fw_printenv -n image_dir_old || true)
                    image_name_old=$(fw_printenv -n image_name_old || true)
                    initrd_name_old=$(fw_printenv -n initrd_name_old || true)
                    fdt_name_old=$(fw_printenv -n fdt_name_old || true)
                    fit_name_old=$(fw_printenv -n fit_name_old || true)
                fi
            fi
            linuxargs_old='net.ifnames=0 loopfstype=squashfs loop=$image_dir_old/$FILESYSTEM_SQUASHFS systemd.unified_cgroup_hierarchy=0 varlog_size=$VAR_LOG ${ONIE_PLATFORM_EXTRA_CMDLINE_LINUX}'
            fw_setenv ${FW_ARG} image_dir_old "$image_dir_old" > /dev/null
            fw_setenv ${FW_ARG} image_name_old "$image_name_old" > /dev/null
            fw_setenv ${FW_ARG} initrd_name_old "$initrd_name_old" > /dev/null
            fw_setenv ${FW_ARG} fdt_name_old "$fdt_name_old" > /dev/null
            fw_setenv ${FW_ARG} fit_name_old "$fit_name_old" > /dev/null
            fw_setenv ${FW_ARG} sonic_version_2 "$sonic_version_2" > /dev/null
            fw_setenv ${FW_ARG} linuxargs_old "$linuxargs_old" > /dev/null

            if [ -z "$demo_dev" ]; then
                get_install_device
                if [ $? -ne 0 ]; then
                    echo "Error: Unable to detect $blk_dev $demo_dev"
                    exit 1
                fi
                demo_part=${sonic_part_num}
                demo_dev=${blk_dev}p${sonic_part_num}
            fi
        else
            CURR_SONIC_IMAGE="$(sonic-installer list | grep "Current: " | cut -f2 -d' ')"
            FIRST_SONIC_IMAGE="$(fw_printenv sonic_version_1 | cut -f2 -d'=')"
            if [ "$CURR_SONIC_IMAGE" = "$FIRST_SONIC_IMAGE" ]; then
                image_dir_old=$(fw_printenv -n image_dir || true)
                image_name_old=$(fw_printenv -n image_name || true)
                initrd_name_old=$(fw_printenv -n initrd_name || true)
                fdt_name_old=$(fw_printenv -n fdt_name || true)
                fit_name_old=$(fw_printenv -n fit_name || true)
                sonic_version_2=$(fw_printenv -n sonic_version_1 || true)
                linuxargs_old=$(fw_printenv -n linuxargs || true)
                fw_setenv ${FW_ARG} image_dir_old "$image_dir_old" > /dev/null
                fw_setenv ${FW_ARG} image_name_old "$image_name_old" > /dev/null
                fw_setenv ${FW_ARG} initrd_name_old "$initrd_name_old" > /dev/null
                fw_setenv ${FW_ARG} fdt_name_old "$fdt_name_old" > /dev/null
                fw_setenv ${FW_ARG} fit_name_old "$fit_name_old" > /dev/null
                fw_setenv ${FW_ARG} sonic_version_2 "$sonic_version_2" > /dev/null
                fw_setenv ${FW_ARG} linuxargs_old "$linuxargs_old" > /dev/null
            fi
        fi
    fi

    # Set boot variables
    fw_setenv ${FW_ARG} image_dir $image_dir > /dev/null
    fw_setenv ${FW_ARG} image_name $image_name > /dev/null
    fw_setenv ${FW_ARG} initrd_name $initrd_name > /dev/null
    fw_setenv ${FW_ARG} fdt_name $fdt_name > /dev/null
    fw_setenv ${FW_ARG} fit_name $fit_name > /dev/null
    fw_setenv ${FW_ARG} sonic_version_1 $demo_volume_revision_label > /dev/null
    BOOT1='echo " > Boot1: $sonic_version_1 - run sonic_image_1";echo;'
    BOOT2='echo " > Boot2: $sonic_version_2 - run sonic_image_2";echo;'
    BOOT3='echo " > Boot3: ONIE - run onie_boot";echo;'
    BORDER='echo "---------------------------------------------------";echo;'
    fw_setenv ${FW_ARG} print_menu "$BORDER $BOOT1 $BOOT2 $BOOT3 $BORDER" > /dev/null

    fw_setenv ${FW_ARG} linuxargs "net.ifnames=0 loopfstype=squashfs loop=$image_dir/$FILESYSTEM_SQUASHFS systemd.unified_cgroup_hierarchy=0 varlog_size=$VAR_LOG ${ONIE_PLATFORM_EXTRA_CMDLINE_LINUX}" > /dev/null
    sonic_bootargs_old='setenv bootargs root='$demo_dev' rw rootwait panic=1 console=ttyS0,${baudrate} ${linuxargs_old}'
    fw_setenv ${FW_ARG} sonic_bootargs_old "$sonic_bootargs_old" > /dev/null || true
    sonic_boot_load_old=$(fw_printenv -n sonic_boot_load || true)
    old_str="_old"
    fw_setenv ${FW_ARG} sonic_boot_load_old "$sonic_boot_load_old$old_str" > /dev/null || true

    fw_setenv ${FW_ARG} kernel_addr $kernel_addr > /dev/null
    fw_setenv ${FW_ARG} fdt_addr $fdt_addr > /dev/null
    fw_setenv ${FW_ARG} fit_addr $fit_addr > /dev/null
    fw_setenv ${FW_ARG} fit_conf_name $fit_conf_name > /dev/null
    fw_setenv ${FW_ARG} initrd_addr $initrd_addr > /dev/null
    MMC_LOAD='ext4load mmc 0:'$demo_part' $fit_addr $fit_name'
    fw_setenv ${FW_ARG} sonic_boot_load "$MMC_LOAD" > /dev/null
    SONIC_BOOT_CMD='run sonic_bootargs; run sonic_boot_load; bootm $fit_addr${fit_conf_name}'
    SONIC_BOOT_CMD_OLD='run sonic_bootargs_old; run sonic_boot_load_old; bootm $fit_addr${fit_conf_name}'
    BOOTARGS='setenv bootargs root='$demo_dev' rw rootwait panic=1 console=ttyS0,${baudrate} ${linuxargs}'
    fw_setenv ${FW_ARG} sonic_bootargs "$BOOTARGS" > /dev/null
    fw_setenv ${FW_ARG} sonic_image_2 "$SONIC_BOOT_CMD_OLD" > /dev/null
    fw_setenv ${FW_ARG} sonic_image_1 "$SONIC_BOOT_CMD" > /dev/null
    fw_setenv ${FW_ARG} boot_next  'run sonic_image_1'> /dev/null
    if [ $PLATFORM_AC5X -eq 2 ]; then
        fw_setenv ${FW_ARG} boot_once > /dev/null
        fw_setenv ${FW_ARG} nos_bootcmd 'run print_menu; usb start; test -n "$boot_once" && run boot_once; run boot_next' > /dev/null
        fw_setenv ${FW_ARG} bootcmd 'run diag_bootcmd; run check_boot_reason; run nos_bootcmd; run onie_bootcmd' > /dev/null
    else
        fw_setenv ${FW_ARG} bootcmd 'run print_menu; usb start; test -n "$boot_once" && setenv do_boot_once "$boot_once" && setenv boot_once "" && saveenv && run do_boot_once; run boot_next' > /dev/null
    fi

    echo "Installed SONiC base image SONiC-OS successfully"
}

bootloader_menu_config() {
    # Update uboot Environment
    prepare_boot_menu
}

