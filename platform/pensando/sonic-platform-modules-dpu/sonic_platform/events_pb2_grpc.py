# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import events_pb2 as events__pb2


class EventSvcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EventGet = channel.unary_unary(
                '/operd.EventSvc/EventGet',
                request_serializer=events__pb2.EventRequest.SerializeToString,
                response_deserializer=events__pb2.EventResponse.FromString,
                )
        self.EventSubscribe = channel.unary_stream(
                '/operd.EventSvc/EventSubscribe',
                request_serializer=events__pb2.EventSubscribeRequest.SerializeToString,
                response_deserializer=events__pb2.Event.FromString,
                )


class EventSvcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EventGet(self, request, context):
        """EventGet() API will return either all events that happened in the
        system until that moment or only events of interest based on the
        EventRequest passed
        The client is expected to periodically or on-need basis query and
        get the event information using this API
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EventSubscribe(self, request, context):
        """EventSubscribe API will periodically send requested events to the
        client refreshing the client with the latest snapshot of the events
        gRPC client has to the call API once and the caller thread will be
        update in so-called "push" model, where DSC pushes the event information
        periodically after that point
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventSvcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EventGet': grpc.unary_unary_rpc_method_handler(
                    servicer.EventGet,
                    request_deserializer=events__pb2.EventRequest.FromString,
                    response_serializer=events__pb2.EventResponse.SerializeToString,
            ),
            'EventSubscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.EventSubscribe,
                    request_deserializer=events__pb2.EventSubscribeRequest.FromString,
                    response_serializer=events__pb2.Event.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'operd.EventSvc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EventSvc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EventGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/operd.EventSvc/EventGet',
            events__pb2.EventRequest.SerializeToString,
            events__pb2.EventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EventSubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/operd.EventSvc/EventSubscribe',
            events__pb2.EventSubscribeRequest.SerializeToString,
            events__pb2.Event.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
