# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import oper_pb2 as oper__pb2


class OperSvcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OperInfoSubscribe = channel.stream_stream(
                '/operd.OperSvc/OperInfoSubscribe',
                request_serializer=oper__pb2.OperInfoRequest.SerializeToString,
                response_deserializer=oper__pb2.OperInfoResponse.FromString,
                )


class OperSvcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OperInfoSubscribe(self, request_iterator, context):
        """OperInfoSubscribe() API is used to subscribe for the  events of interest;
        as and when events happen, they are streamed to the client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OperSvcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OperInfoSubscribe': grpc.stream_stream_rpc_method_handler(
                    servicer.OperInfoSubscribe,
                    request_deserializer=oper__pb2.OperInfoRequest.FromString,
                    response_serializer=oper__pb2.OperInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'operd.OperSvc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OperSvc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OperInfoSubscribe(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/operd.OperSvc/OperInfoSubscribe',
            oper__pb2.OperInfoRequest.SerializeToString,
            oper__pb2.OperInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
