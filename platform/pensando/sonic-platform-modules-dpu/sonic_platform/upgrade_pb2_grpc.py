# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import base_pb2 as base__pb2
import upgrade_pb2 as upgrade__pb2


class UpgSvcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpgRequest = channel.unary_stream(
                '/pds.UpgSvc/UpgRequest',
                request_serializer=upgrade__pb2.UpgradeRequest.SerializeToString,
                response_deserializer=upgrade__pb2.UpgradeResponse.FromString,
                )
        self.UpgRequestNonStreaming = channel.unary_unary(
                '/pds.UpgSvc/UpgRequestNonStreaming',
                request_serializer=upgrade__pb2.UpgradeRequest.SerializeToString,
                response_deserializer=upgrade__pb2.UpgradeResponse.FromString,
                )
        self.ConfigReplayReadyCheck = channel.unary_unary(
                '/pds.UpgSvc/ConfigReplayReadyCheck',
                request_serializer=base__pb2.EmptyMsg.SerializeToString,
                response_deserializer=upgrade__pb2.ConfigReplayReadyRsp.FromString,
                )
        self.ConfigReplayStarted = channel.unary_unary(
                '/pds.UpgSvc/ConfigReplayStarted',
                request_serializer=base__pb2.EmptyMsg.SerializeToString,
                response_deserializer=base__pb2.EmptyMsg.FromString,
                )
        self.ConfigReplayDone = channel.unary_unary(
                '/pds.UpgSvc/ConfigReplayDone',
                request_serializer=base__pb2.EmptyMsg.SerializeToString,
                response_deserializer=base__pb2.EmptyMsg.FromString,
                )
        self.UpgStatus = channel.unary_stream(
                '/pds.UpgSvc/UpgStatus',
                request_serializer=base__pb2.EmptyMsg.SerializeToString,
                response_deserializer=upgrade__pb2.UpgradeResponse.FromString,
                )
        self.UpgStatusNonStreaming = channel.unary_unary(
                '/pds.UpgSvc/UpgStatusNonStreaming',
                request_serializer=upgrade__pb2.UpgradeStatusRequest.SerializeToString,
                response_deserializer=upgrade__pb2.UpgradeResponse.FromString,
                )
        self.UpgTraceUpdate = channel.unary_unary(
                '/pds.UpgSvc/UpgTraceUpdate',
                request_serializer=upgrade__pb2.UpgradeTraceRequest.SerializeToString,
                response_deserializer=upgrade__pb2.UpgradeTraceResponse.FromString,
                )
        self.UpgTraceFlush = channel.unary_unary(
                '/pds.UpgSvc/UpgTraceFlush',
                request_serializer=base__pb2.EmptyMsg.SerializeToString,
                response_deserializer=base__pb2.EmptyMsg.FromString,
                )


class UpgSvcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpgRequest(self, request, context):
        """start the upgrade
        NOTE: abort operation is not supported
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpgRequestNonStreaming(self, request, context):
        """start the upgrade non streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigReplayReadyCheck(self, request, context):
        """check if configuration replay can be started
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigReplayStarted(self, request, context):
        """notify configuration replay started
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigReplayDone(self, request, context):
        """notify configuration replay done
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpgStatus(self, request, context):
        """check for upgrade status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpgStatusNonStreaming(self, request, context):
        """check for upgrade status non streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpgTraceUpdate(self, request, context):
        """update upgrade trace level
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpgTraceFlush(self, request, context):
        """flush upgrade trace messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UpgSvcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpgRequest': grpc.unary_stream_rpc_method_handler(
                    servicer.UpgRequest,
                    request_deserializer=upgrade__pb2.UpgradeRequest.FromString,
                    response_serializer=upgrade__pb2.UpgradeResponse.SerializeToString,
            ),
            'UpgRequestNonStreaming': grpc.unary_unary_rpc_method_handler(
                    servicer.UpgRequestNonStreaming,
                    request_deserializer=upgrade__pb2.UpgradeRequest.FromString,
                    response_serializer=upgrade__pb2.UpgradeResponse.SerializeToString,
            ),
            'ConfigReplayReadyCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigReplayReadyCheck,
                    request_deserializer=base__pb2.EmptyMsg.FromString,
                    response_serializer=upgrade__pb2.ConfigReplayReadyRsp.SerializeToString,
            ),
            'ConfigReplayStarted': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigReplayStarted,
                    request_deserializer=base__pb2.EmptyMsg.FromString,
                    response_serializer=base__pb2.EmptyMsg.SerializeToString,
            ),
            'ConfigReplayDone': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigReplayDone,
                    request_deserializer=base__pb2.EmptyMsg.FromString,
                    response_serializer=base__pb2.EmptyMsg.SerializeToString,
            ),
            'UpgStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.UpgStatus,
                    request_deserializer=base__pb2.EmptyMsg.FromString,
                    response_serializer=upgrade__pb2.UpgradeResponse.SerializeToString,
            ),
            'UpgStatusNonStreaming': grpc.unary_unary_rpc_method_handler(
                    servicer.UpgStatusNonStreaming,
                    request_deserializer=upgrade__pb2.UpgradeStatusRequest.FromString,
                    response_serializer=upgrade__pb2.UpgradeResponse.SerializeToString,
            ),
            'UpgTraceUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.UpgTraceUpdate,
                    request_deserializer=upgrade__pb2.UpgradeTraceRequest.FromString,
                    response_serializer=upgrade__pb2.UpgradeTraceResponse.SerializeToString,
            ),
            'UpgTraceFlush': grpc.unary_unary_rpc_method_handler(
                    servicer.UpgTraceFlush,
                    request_deserializer=base__pb2.EmptyMsg.FromString,
                    response_serializer=base__pb2.EmptyMsg.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pds.UpgSvc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UpgSvc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpgRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pds.UpgSvc/UpgRequest',
            upgrade__pb2.UpgradeRequest.SerializeToString,
            upgrade__pb2.UpgradeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpgRequestNonStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pds.UpgSvc/UpgRequestNonStreaming',
            upgrade__pb2.UpgradeRequest.SerializeToString,
            upgrade__pb2.UpgradeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigReplayReadyCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pds.UpgSvc/ConfigReplayReadyCheck',
            base__pb2.EmptyMsg.SerializeToString,
            upgrade__pb2.ConfigReplayReadyRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigReplayStarted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pds.UpgSvc/ConfigReplayStarted',
            base__pb2.EmptyMsg.SerializeToString,
            base__pb2.EmptyMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigReplayDone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pds.UpgSvc/ConfigReplayDone',
            base__pb2.EmptyMsg.SerializeToString,
            base__pb2.EmptyMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpgStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pds.UpgSvc/UpgStatus',
            base__pb2.EmptyMsg.SerializeToString,
            upgrade__pb2.UpgradeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpgStatusNonStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pds.UpgSvc/UpgStatusNonStreaming',
            upgrade__pb2.UpgradeStatusRequest.SerializeToString,
            upgrade__pb2.UpgradeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpgTraceUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pds.UpgSvc/UpgTraceUpdate',
            upgrade__pb2.UpgradeTraceRequest.SerializeToString,
            upgrade__pb2.UpgradeTraceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpgTraceFlush(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pds.UpgSvc/UpgTraceFlush',
            base__pb2.EmptyMsg.SerializeToString,
            base__pb2.EmptyMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
